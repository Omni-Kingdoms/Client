/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type ItemStruct = {
  slot: BigNumberish;
  rank: BigNumberish;
  value: BigNumberish;
  stat: BigNumberish;
  name: string;
  owner: string;
  isEquiped: boolean;
};

export type ItemStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  boolean
] & {
  slot: BigNumber;
  rank: BigNumber;
  value: BigNumber;
  stat: BigNumber;
  name: string;
  owner: string;
  isEquiped: boolean;
};

export type SlotStruct = {
  head: BigNumberish;
  body: BigNumberish;
  leftHand: BigNumberish;
  rightHand: BigNumberish;
  pants: BigNumberish;
  feet: BigNumberish;
  neck: BigNumberish;
};

export type SlotStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  head: BigNumber;
  body: BigNumber;
  leftHand: BigNumber;
  rightHand: BigNumber;
  pants: BigNumber;
  feet: BigNumber;
  neck: BigNumber;
};

export type BasicEquipmentStruct = {
  id: BigNumberish,
  basicEquipmentSchemaId: BigNumberish,
  slot: BigNumberish,
  value: BigNumberish,
  stat: BigNumberish,
  cost: BigNumberish,
  name: string,
  uri: string
}

export type BasicPotionStruct = {
  basicHealthPotionSchemaId: BigNumberish;
  value: BigNumberish;
  cost: BigNumberish;
  isHealth: boolean;
  name: string;
  uri: string;
}

export type BasicMonsterStruct = {
  monsterId: BigNumberish;
  xpReward: BigNumberish;
  damage: BigNumberish;
  hp: BigNumberish;
  cooldown: BigNumberish;
  name: string;
  uri: string;
};

export type PlayerStruct = {
  level: BigNumberish;
  xp: BigNumberish;
  status: BigNumberish;
  strength: BigNumberish;
  health: BigNumberish;
  currentHealth: BigNumberish;
  magic: BigNumberish;
  mana: BigNumberish;
  maxMana: BigNumberish;
  agility: BigNumberish;
  luck: BigNumberish;
  wisdom: BigNumberish;
  haki: BigNumberish;
  perception: BigNumberish;
  defense: BigNumberish;
  name: string;
  uri: string;
  male: boolean;
  slot: SlotStruct;
  playerClass: BigNumberish;
};

export type PlayerStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  boolean,
  SlotStructOutput,
  BigNumber
] & {
  level: BigNumber;
  xp: BigNumber;
  status: BigNumber;
  strength: BigNumber;
  health: BigNumber;
  currentHealth: BigNumber;
  magic: BigNumber;
  mana: BigNumber;
  maxMana: BigNumber;
  agility: BigNumber;
  luck: BigNumber;
  wisdom: BigNumber;
  haki: BigNumber;
  perception: BigNumber;
  defense: BigNumber;
  name: string;
  uri: string;
  male: boolean;
  slot: SlotStructOutput;
  playerClass: BigNumber;
};

export type TreasureStruct = {
  id: BigNumberish;
  rank: BigNumberish;
  pointer: BigNumberish;
  name: string;
};

export type TreasureStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
  id: BigNumber;
  rank: BigNumber;
  pointer: BigNumber;
  name: string;
};

export declare namespace IDiamond {
  export type FacetCutStruct = {
    facetAddress: string;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    facetAddress: string;
    action: number;
    functionSelectors: string[];
  };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: string;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [string, string[]] & {
    facetAddress: string;
    functionSelectors: string[];
  };
}

export interface DIAMOND1HARDHATInterface extends utils.Interface {
  functions: {
    "enterMagicArena(uint256)": FunctionFragment;
    "enterMainArena(uint256)": FunctionFragment;
    "enterSecondArena(uint256)": FunctionFragment;
    "fightMagicArena(uint256)": FunctionFragment;
    "fightMainArena(uint256)": FunctionFragment;
    "fightSecondArena(uint256)": FunctionFragment;
    "getMagicArena()": FunctionFragment;
    "getMagicArenaLosses(uint256)": FunctionFragment;
    "getMagicArenaWins(uint256)": FunctionFragment;
    "getMainArena()": FunctionFragment;
    "getMainArenaLosses(uint256)": FunctionFragment;
    "getMainArenaWins(uint256)": FunctionFragment;
    "getSecondArena()": FunctionFragment;
    "getTotalLosses(uint256)": FunctionFragment;
    "getTotalWins(uint256)": FunctionFragment;
    "leaveMainArena(uint256)": FunctionFragment;
    "openArenas()": FunctionFragment;
    "craftArmor(uint256)": FunctionFragment;
    "craftGuitar(uint256)": FunctionFragment;
    "craftHelmet(uint256)": FunctionFragment;
    "craftSorcerShoes(uint256)": FunctionFragment;
    "craftSword(uint256)": FunctionFragment;
    "craftWizardHat(uint256)": FunctionFragment;
    "getItem(uint256)": FunctionFragment;
    "getItemCount()": FunctionFragment;
    "getItems(address)": FunctionFragment;
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
    "facetAddress(bytes4)": FunctionFragment;
    "facetAddresses()": FunctionFragment;
    "facetFunctionSelectors(address)": FunctionFragment;
    "facets()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "equipBody(uint256,uint256)": FunctionFragment;
    "equipHead(uint256,uint256)": FunctionFragment;
    "equipRightHand(uint256,uint256)": FunctionFragment;
    "unequipBody(uint256,uint256)": FunctionFragment;
    "unequipHead(uint256,uint256)": FunctionFragment;
    "unequipRightHand(uint256,uint256)": FunctionFragment;
    "crateListing(uint256,uint256)": FunctionFragment;
    "getAllListings()": FunctionFragment;
    "getLisitng(uint256)": FunctionFragment;
    "getListings(address)": FunctionFragment;
    "purchasePlayer(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "changeName(uint256,string)": FunctionFragment;
    "getBlocktime()": FunctionFragment;
    "getPlayer(uint256)": FunctionFragment;
    "getPlayers(address)": FunctionFragment;
    "mint(string,string,bool)": FunctionFragment;
    "nameAvailable(string)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "playerCount()": FunctionFragment;
    "dragonQuest(uint256)": FunctionFragment;
    "endQuestGem(uint256)": FunctionFragment;
    "endQuestGold(uint256)": FunctionFragment;
    "getCooldown(uint256)": FunctionFragment;
    "getGemBalance(address)": FunctionFragment;
    "getGemStart(uint256)": FunctionFragment;
    "getGoldBalance(address)": FunctionFragment;
    "getGoldStart(uint256)": FunctionFragment;
    "getTreasure(uint256)": FunctionFragment;
    "getTreasures(uint256)": FunctionFragment;
    "startQuestGem(uint256)": FunctionFragment;
    "startQuestGold(uint256)": FunctionFragment;
    "activeScript(uint256)": FunctionFragment;
    "openArena()": FunctionFragment;
    "endTrainingCombat(uint256)": FunctionFragment;
    "endTrainingMana(uint256)": FunctionFragment;
    "getCombatStart(uint256)": FunctionFragment;
    "getManaStart(uint256)": FunctionFragment;
    "startTrainingCombat(uint256)": FunctionFragment;
    "startTrainingMana(uint256)": FunctionFragment;
    "claimTreasureDropKyberShard(uint256,bytes32[],uint256)": FunctionFragment;
    "claimedStatus(uint256,address)": FunctionFragment;
    "createTreasureDrop(bytes32,string)": FunctionFragment;
    "getTreasureDropMerkleRoot(uint256)": FunctionFragment;
    "verifyTreasureDropWhitelist(bytes32[],uint256,address)": FunctionFragment;
    "init()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "enterMagicArena"
      | "enterMainArena"
      | "enterSecondArena"
      | "fightMagicArena"
      | "fightMainArena"
      | "fightSecondArena"
      | "getMagicArena"
      | "getMagicArenaLosses"
      | "getMagicArenaWins"
      | "getMainArena"
      | "getMainArenaLosses"
      | "getMainArenaWins"
      | "getSecondArena"
      | "getTotalLosses"
      | "getTotalWins"
      | "leaveMainArena"
      | "openArenas"
      | "craftArmor"
      | "craftGuitar"
      | "craftHelmet"
      | "craftSorcerShoes"
      | "craftSword"
      | "craftWizardHat"
      | "getItem"
      | "getItemCount"
      | "getItems"
      | "diamondCut((address,uint8,bytes4[])[],address,bytes)"
      | "diamondCut((address,uint8,bytes4[])[],address,bytes)"
      | "facetAddress(bytes4)"
      | "facetAddress(bytes4)"
      | "facetAddresses()"
      | "facetAddresses()"
      | "facetFunctionSelectors(address)"
      | "facetFunctionSelectors(address)"
      | "facets()"
      | "facets()"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "equipBody"
      | "equipHead"
      | "equipRightHand"
      | "unequipBody"
      | "unequipHead"
      | "unequipRightHand"
      | "crateListing"
      | "getAllListings"
      | "getLisitng"
      | "getListings"
      | "purchasePlayer"
      | "owner()"
      | "owner()"
      | "transferOwnership(address)"
      | "transferOwnership(address)"
      | "changeName"
      | "getBlocktime"
      | "getPlayer"
      | "getPlayers"
      | "mint"
      | "nameAvailable"
      | "ownerOf"
      | "playerCount"
      | "dragonQuest"
      | "endQuestGem"
      | "endQuestGold"
      | "getCooldown"
      | "getGemBalance"
      | "getGemStart"
      | "getGoldBalance"
      | "getGoldStart"
      | "getTreasure"
      | "getTreasures"
      | "startQuestGem"
      | "startQuestGold"
      | "activeScript"
      | "openArena"
      | "endTrainingCombat"
      | "endTrainingMana"
      | "getCombatStart"
      | "getManaStart"
      | "startTrainingCombat"
      | "startTrainingMana"
      | "claimTreasureDropKyberShard"
      | "claimedStatus"
      | "createTreasureDrop"
      | "getTreasureDropMerkleRoot"
      | "verifyTreasureDropWhitelist"
      | "init"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "enterMagicArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterMainArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterSecondArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fightMagicArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fightMainArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fightSecondArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMagicArena",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMagicArenaLosses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMagicArenaWins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainArena",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMainArenaLosses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainArenaWins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecondArena",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLosses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveMainArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openArenas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "craftArmor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "craftGuitar",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "craftHelmet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "craftSorcerShoes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "craftSword",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "craftWizardHat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getItemCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getItems", values: [string]): string;
  encodeFunctionData(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    values: [IDiamond.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    values: [IDiamond.FacetCutStruct[], string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors(address)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "facets()", values?: undefined): string;
  encodeFunctionData(functionFragment: "facets()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "equipBody",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equipHead",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equipRightHand",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unequipBody",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unequipHead",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unequipRightHand",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "crateListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLisitng",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getListings", values: [string]): string;
  encodeFunctionData(
    functionFragment: "purchasePlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlocktime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPlayers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "nameAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dragonQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endQuestGem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endQuestGold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGemBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGemStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasure",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startQuestGem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startQuestGold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeScript",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "openArena", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endTrainingCombat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endTrainingMana",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCombatStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManaStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTrainingCombat",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTrainingMana",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasureDropKyberShard",
    values: [BigNumberish, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedStatus",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createTreasureDrop",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasureDropMerkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTreasureDropWhitelist",
    values: [BytesLike[], BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "enterMagicArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMainArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterSecondArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fightMagicArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fightMainArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fightSecondArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagicArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagicArenaLosses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagicArenaWins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainArenaLosses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainArenaWins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecondArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLosses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveMainArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openArenas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "craftArmor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "craftGuitar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "craftHelmet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "craftSorcerShoes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "craftSword", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "craftWizardHat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getItemCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "facets()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "equipBody", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "equipHead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "equipRightHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unequipBody",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unequipHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unequipRightHand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crateListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLisitng", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlocktime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dragonQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endQuestGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endQuestGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGemBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGemStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startQuestGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startQuestGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openArena", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endTrainingCombat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTrainingMana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCombatStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManaStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTrainingCombat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTrainingMana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasureDropKyberShard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTreasureDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasureDropMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTreasureDropWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;

  events: {
    "EnterMagic(uint256)": EventFragment;
    "EnterMain(uint256)": EventFragment;
    "EnterSecond(uint256)": EventFragment;
    "MagicLoss(uint256)": EventFragment;
    "MagicWin(uint256)": EventFragment;
    "MainLoss(uint256)": EventFragment;
    "MainWin(uint256)": EventFragment;
    "SecondLoss(uint256)": EventFragment;
    "SecondWin(uint256)": EventFragment;
    "ItemCrafted(address,uint256)": EventFragment;
    "DiamondCut(tuple[],address,bytes)": EventFragment;
    "ItemEquiped(address,uint256,uint256)": EventFragment;
    "ItemUnequiped(address,uint256,uint256)": EventFragment;
    "List(address,uint256,uint256)": EventFragment;
    "Purchase(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Mint(uint256,address,string,string)": EventFragment;
    "NameChange(address,uint256,string)": EventFragment;
    "BeginQuesting(address,uint256)": EventFragment;
    "DragonQuest(uint256)": EventFragment;
    "EndQuesting(address,uint256)": EventFragment;
    "BeginTrainingCombat(address,uint256)": EventFragment;
    "BeginTrainingMana(address,uint256)": EventFragment;
    "EndTrainingCombat(address,uint256)": EventFragment;
    "EndTrainingMana(address,uint256)": EventFragment;
    "ClaimTreasure(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnterMagic"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterMain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnterSecond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MagicLoss"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MagicWin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainLoss"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MainWin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecondLoss"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SecondWin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCrafted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCut(tuple[],address,bytes)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCut(tuple[],address,bytes)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCut(tuple[],address,bytes)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCut(tuple[],address,bytes)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemEquiped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemUnequiped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "List"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeginQuesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DragonQuest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndQuesting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeginTrainingCombat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeginTrainingMana"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndTrainingCombat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndTrainingMana"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimTreasure"): EventFragment;
}

export interface EnterMagicEventObject {
  _playerId: BigNumber;
}
export type EnterMagicEvent = TypedEvent<[BigNumber], EnterMagicEventObject>;

export type EnterMagicEventFilter = TypedEventFilter<EnterMagicEvent>;

export interface EnterMainEventObject {
  _playerId: BigNumber;
}
export type EnterMainEvent = TypedEvent<[BigNumber], EnterMainEventObject>;

export type EnterMainEventFilter = TypedEventFilter<EnterMainEvent>;

export interface EnterSecondEventObject {
  _playerId: BigNumber;
}
export type EnterSecondEvent = TypedEvent<[BigNumber], EnterSecondEventObject>;

export type EnterSecondEventFilter = TypedEventFilter<EnterSecondEvent>;

export interface MagicLossEventObject {
  _playerId: BigNumber;
}
export type MagicLossEvent = TypedEvent<[BigNumber], MagicLossEventObject>;

export type MagicLossEventFilter = TypedEventFilter<MagicLossEvent>;

export interface MagicWinEventObject {
  _playerId: BigNumber;
}
export type MagicWinEvent = TypedEvent<[BigNumber], MagicWinEventObject>;

export type MagicWinEventFilter = TypedEventFilter<MagicWinEvent>;

export interface MainLossEventObject {
  _playerId: BigNumber;
}
export type MainLossEvent = TypedEvent<[BigNumber], MainLossEventObject>;

export type MainLossEventFilter = TypedEventFilter<MainLossEvent>;

export interface MainWinEventObject {
  _playerId: BigNumber;
}
export type MainWinEvent = TypedEvent<[BigNumber], MainWinEventObject>;

export type MainWinEventFilter = TypedEventFilter<MainWinEvent>;

export interface SecondLossEventObject {
  _playerId: BigNumber;
}
export type SecondLossEvent = TypedEvent<[BigNumber], SecondLossEventObject>;

export type SecondLossEventFilter = TypedEventFilter<SecondLossEvent>;

export interface SecondWinEventObject {
  _playerId: BigNumber;
}
export type SecondWinEvent = TypedEvent<[BigNumber], SecondWinEventObject>;

export type SecondWinEventFilter = TypedEventFilter<SecondWinEvent>;

export interface ItemCraftedEventObject {
  _owner: string;
  _player: BigNumber;
}
export type ItemCraftedEvent = TypedEvent<
  [string, BigNumber],
  ItemCraftedEventObject
>;

export type ItemCraftedEventFilter = TypedEventFilter<ItemCraftedEvent>;

export interface DiamondCut_tuple_array_address_bytes_EventObject {
  _diamondCut: IDiamond.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}

export interface DiamondCut_tuple_array_address_bytes_EventObject {
  _diamondCut: IDiamond.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}

export interface DiamondCut_tuple_array_address_bytes_EventObject {
  _diamondCut: IDiamond.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}

export interface DiamondCut_tuple_array_address_bytes_EventObject {
  _diamondCut: IDiamond.FacetCutStructOutput[];
  _init: string;
  _calldata: string;
}

export interface ItemEquipedEventObject {
  _owner: string;
  _playerId: BigNumber;
  _itemId: BigNumber;
}
export type ItemEquipedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemEquipedEventObject
>;

export type ItemEquipedEventFilter = TypedEventFilter<ItemEquipedEvent>;

export interface ItemUnequipedEventObject {
  _owner: string;
  _playerId: BigNumber;
  _itemId: BigNumber;
}
export type ItemUnequipedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ItemUnequipedEventObject
>;

export type ItemUnequipedEventFilter = TypedEventFilter<ItemUnequipedEvent>;

export interface ListEventObject {
  _from: string;
  _playerId: BigNumber;
  _price: BigNumber;
}
export type ListEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ListEventObject
>;

export type ListEventFilter = TypedEventFilter<ListEvent>;

export interface PurchaseEventObject {
  _to: string;
  _id: BigNumber;
}
export type PurchaseEvent = TypedEvent<
  [string, BigNumber],
  PurchaseEventObject
>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export interface OwnershipTransferred_address_address_EventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferred_address_address_Event = TypedEvent<
  [string, string],
  OwnershipTransferred_address_address_EventObject
>;

export type OwnershipTransferred_address_address_EventFilter =
  TypedEventFilter<OwnershipTransferred_address_address_Event>;

export interface OwnershipTransferred_address_address_EventObject {
  previousOwner: string;
  newOwner: string;
}

export interface OwnershipTransferred_address_address_EventObject {
  previousOwner: string;
  newOwner: string;
}

export interface MintEventObject {
  id: BigNumber;
  owner: string;
  name: string;
  uri: string;
}
export type MintEvent = TypedEvent<
  [BigNumber, string, string, string],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface NameChangeEventObject {
  owner: string;
  id: BigNumber;
  newName: string;
}
export type NameChangeEvent = TypedEvent<
  [string, BigNumber, string],
  NameChangeEventObject
>;

export type NameChangeEventFilter = TypedEventFilter<NameChangeEvent>;

export interface BeginQuestingEventObject {
  _playerAddress: string;
  _id: BigNumber;
}
export type BeginQuestingEvent = TypedEvent<
  [string, BigNumber],
  BeginQuestingEventObject
>;

export type BeginQuestingEventFilter = TypedEventFilter<BeginQuestingEvent>;

export interface DragonQuestEventObject {
  _playerId: BigNumber;
}
export type DragonQuestEvent = TypedEvent<[BigNumber], DragonQuestEventObject>;

export type DragonQuestEventFilter = TypedEventFilter<DragonQuestEvent>;

export interface EndQuestingEventObject {
  _playerAddress: string;
  _id: BigNumber;
}
export type EndQuestingEvent = TypedEvent<
  [string, BigNumber],
  EndQuestingEventObject
>;

export type EndQuestingEventFilter = TypedEventFilter<EndQuestingEvent>;

export interface BeginTrainingCombatEventObject {
  _playerAddress: string;
  _id: BigNumber;
}
export type BeginTrainingCombatEvent = TypedEvent<
  [string, BigNumber],
  BeginTrainingCombatEventObject
>;

export type BeginTrainingCombatEventFilter =
  TypedEventFilter<BeginTrainingCombatEvent>;

export interface BeginTrainingManaEventObject {
  _playerAddress: string;
  _id: BigNumber;
}
export type BeginTrainingManaEvent = TypedEvent<
  [string, BigNumber],
  BeginTrainingManaEventObject
>;

export type BeginTrainingManaEventFilter =
  TypedEventFilter<BeginTrainingManaEvent>;

export interface EndTrainingCombatEventObject {
  _playerAddress: string;
  _id: BigNumber;
}
export type EndTrainingCombatEvent = TypedEvent<
  [string, BigNumber],
  EndTrainingCombatEventObject
>;

export type EndTrainingCombatEventFilter =
  TypedEventFilter<EndTrainingCombatEvent>;

export interface EndTrainingManaEventObject {
  _playerAddress: string;
  _id: BigNumber;
}
export type EndTrainingManaEvent = TypedEvent<
  [string, BigNumber],
  EndTrainingManaEventObject
>;

export type EndTrainingManaEventFilter = TypedEventFilter<EndTrainingManaEvent>;

export interface ClaimTreasureEventObject {
  _playerId: BigNumber;
  _treasureDropId: BigNumber;
}
export type ClaimTreasureEvent = TypedEvent<
  [BigNumber, BigNumber],
  ClaimTreasureEventObject
>;

export type ClaimTreasureEventFilter = TypedEventFilter<ClaimTreasureEvent>;

export interface DIAMOND1HARDHAT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DIAMOND1HARDHATInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    enterMagicArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enterMainArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    enterSecondArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fightMagicArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fightMainArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    fightSecondArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getMagicArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getMagicArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMagicArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMainArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getMainArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMainArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSecondArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getTotalLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    leaveMainArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    openArenas(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    craftArmor(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    craftGuitar(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    craftHelmet(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    craftSorcerShoes(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    craftSword(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    craftWizardHat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[ItemStructOutput] & { item: ItemStructOutput }>;

    getItemCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getItems(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { items: BigNumber[] }>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { facetAddress_: string }>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetAddresses_: string[] }>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _facetFunctionSelectors: string[] }>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { facetFunctionSelectors_: string[] }>;

    "facets()"(overrides?: CallOverrides): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    "facets()"(overrides?: CallOverrides): Promise<
      [IDiamondLoupe.FacetStructOutput[]] & {
        facets_: IDiamondLoupe.FacetStructOutput[];
      }
    >;

    "supportsInterface(bytes4)"(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    equipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    equipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    equipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unequipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unequipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unequipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    crateListing(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllListings(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getLisitng(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        seller: string;
        playerId: BigNumber;
        price: BigNumber;
      }
    >;

    getListings(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    purchasePlayer(
      _listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<[string] & { owner_: string }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<[string] & { owner_: string }>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeName(
      _id: BigNumberish,
      _newName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBlocktime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlayer(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PlayerStructOutput] & { player: PlayerStructOutput }>;

    getPlayers(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    mint(
      _name: string,
      _uri: string,
      _isMale: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    nameAvailable(
      _name: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { available: boolean }>;

    ownerOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    playerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    dragonQuest(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endQuestGem(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endQuestGold(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCooldown(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGemBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGemStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGoldBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGoldStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreasure(
      _treasureId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TreasureStructOutput]>;

    getTreasures(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    startQuestGem(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startQuestGold(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    activeScript(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    openArena(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endTrainingMana(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getCombatStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getManaStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    startTrainingMana(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimTreasureDropKyberShard(
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimedStatus(
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createTreasureDrop(
      _merkleRoot: BytesLike,
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getTreasureDropMerkleRoot(
      _treasureDropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyTreasureDropWhitelist(
      _proof: BytesLike[],
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  enterMagicArena(
    _playerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enterMainArena(
    _playerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  enterSecondArena(
    _playerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fightMagicArena(
    _challengerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fightMainArena(
    _challengerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  fightSecondArena(
    _challengerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getMagicArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  getMagicArenaLosses(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMagicArenaWins(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMainArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  getMainArenaLosses(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMainArenaWins(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSecondArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  getTotalLosses(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalWins(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  leaveMainArena(
    _playerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  openArenas(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  craftArmor(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  craftGuitar(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  craftHelmet(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  craftSorcerShoes(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  craftSword(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  craftWizardHat(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getItem(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ItemStructOutput>;

  getItemCount(overrides?: CallOverrides): Promise<BigNumber>;

  getItems(_address: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
    _diamondCut: IDiamond.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
    _diamondCut: IDiamond.FacetCutStruct[],
    _init: string,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "facetAddress(bytes4)"(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "facetAddress(bytes4)"(
    _functionSelector: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facetFunctionSelectors(address)"(
    _facet: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<IDiamondLoupe.FacetStructOutput[]>;

  "facets()"(
    overrides?: CallOverrides
  ): Promise<IDiamondLoupe.FacetStructOutput[]>;

  "supportsInterface(bytes4)"(
    _interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  equipBody(
    _playerId: BigNumberish,
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  equipHead(
    _playerId: BigNumberish,
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  equipRightHand(
    _playerId: BigNumberish,
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unequipBody(
    _playerId: BigNumberish,
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unequipHead(
    _playerId: BigNumberish,
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unequipRightHand(
    _playerId: BigNumberish,
    _itemId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  crateListing(
    _id: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllListings(overrides?: CallOverrides): Promise<BigNumber[]>;

  getLisitng(
    _listingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      seller: string;
      playerId: BigNumber;
      price: BigNumber;
    }
  >;

  getListings(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  purchasePlayer(
    _listingId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    _newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeName(
    _id: BigNumberish,
    _newName: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBlocktime(overrides?: CallOverrides): Promise<BigNumber>;

  getPlayer(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PlayerStructOutput>;

  getPlayers(_address: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  mint(
    _name: string,
    _uri: string,
    _isMale: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  nameAvailable(_name: string, overrides?: CallOverrides): Promise<boolean>;

  ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  playerCount(overrides?: CallOverrides): Promise<BigNumber>;

  dragonQuest(
    _playerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endQuestGem(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endQuestGold(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCooldown(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGemBalance(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGemStart(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGoldBalance(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGoldStart(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreasure(
    _treasureId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TreasureStructOutput>;

  getTreasures(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  startQuestGem(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startQuestGold(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  activeScript(
    _playerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  openArena(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endTrainingCombat(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endTrainingMana(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getCombatStart(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getManaStart(
    _playerId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startTrainingCombat(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  startTrainingMana(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimTreasureDropKyberShard(
    _treasureDropId: BigNumberish,
    _proof: BytesLike[],
    _playerId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimedStatus(
    _treasureDropId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createTreasureDrop(
    _merkleRoot: BytesLike,
    _name: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getTreasureDropMerkleRoot(
    _treasureDropId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyTreasureDropWhitelist(
    _proof: BytesLike[],
    _treasureDropId: BigNumberish,
    _address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    enterMagicArena(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterMainArena(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterSecondArena(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fightMagicArena(
      _challengerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fightMainArena(
      _challengerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fightSecondArena(
      _challengerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMagicArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getMagicArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMagicArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getMainArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondArena(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    getTotalLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leaveMainArena(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openArenas(overrides?: CallOverrides): Promise<void>;

    craftArmor(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    craftGuitar(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    craftHelmet(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    craftSorcerShoes(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    craftSword(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    craftWizardHat(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ItemStructOutput>;

    getItemCount(overrides?: CallOverrides): Promise<BigNumber>;

    getItems(_address: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    "facets()"(
      overrides?: CallOverrides
    ): Promise<IDiamondLoupe.FacetStructOutput[]>;

    "supportsInterface(bytes4)"(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    equipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    equipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    equipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unequipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unequipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unequipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    crateListing(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllListings(overrides?: CallOverrides): Promise<BigNumber[]>;

    getLisitng(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        seller: string;
        playerId: BigNumber;
        price: BigNumber;
      }
    >;

    getListings(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    purchasePlayer(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeName(
      _id: BigNumberish,
      _newName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlocktime(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayer(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PlayerStructOutput>;

    getPlayers(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    mint(
      _name: string,
      _uri: string,
      _isMale: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    nameAvailable(_name: string, overrides?: CallOverrides): Promise<boolean>;

    ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    playerCount(overrides?: CallOverrides): Promise<BigNumber>;

    dragonQuest(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endQuestGem(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endQuestGold(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCooldown(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGemBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGemStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoldBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoldStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasure(
      _treasureId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TreasureStructOutput>;

    getTreasures(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    startQuestGem(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startQuestGold(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    activeScript(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openArena(overrides?: CallOverrides): Promise<void>;

    endTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    endTrainingMana(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCombatStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManaStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startTrainingMana(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTreasureDropKyberShard(
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimedStatus(
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createTreasureDrop(
      _merkleRoot: BytesLike,
      _name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTreasureDropMerkleRoot(
      _treasureDropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyTreasureDropWhitelist(
      _proof: BytesLike[],
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EnterMagic(uint256)"(
      _playerId?: BigNumberish | null
    ): EnterMagicEventFilter;
    EnterMagic(_playerId?: BigNumberish | null): EnterMagicEventFilter;

    "EnterMain(uint256)"(_playerId?: BigNumberish | null): EnterMainEventFilter;
    EnterMain(_playerId?: BigNumberish | null): EnterMainEventFilter;

    "EnterSecond(uint256)"(
      _playerId?: BigNumberish | null
    ): EnterSecondEventFilter;
    EnterSecond(_playerId?: BigNumberish | null): EnterSecondEventFilter;

    "MagicLoss(uint256)"(_playerId?: BigNumberish | null): MagicLossEventFilter;
    MagicLoss(_playerId?: BigNumberish | null): MagicLossEventFilter;

    "MagicWin(uint256)"(_playerId?: BigNumberish | null): MagicWinEventFilter;
    MagicWin(_playerId?: BigNumberish | null): MagicWinEventFilter;

    "MainLoss(uint256)"(_playerId?: BigNumberish | null): MainLossEventFilter;
    MainLoss(_playerId?: BigNumberish | null): MainLossEventFilter;

    "MainWin(uint256)"(_playerId?: BigNumberish | null): MainWinEventFilter;
    MainWin(_playerId?: BigNumberish | null): MainWinEventFilter;

    "SecondLoss(uint256)"(
      _playerId?: BigNumberish | null
    ): SecondLossEventFilter;
    SecondLoss(_playerId?: BigNumberish | null): SecondLossEventFilter;

    "SecondWin(uint256)"(_playerId?: BigNumberish | null): SecondWinEventFilter;
    SecondWin(_playerId?: BigNumberish | null): SecondWinEventFilter;

    "ItemCrafted(address,uint256)"(
      _owner?: string | null,
      _player?: null
    ): ItemCraftedEventFilter;
    ItemCrafted(_owner?: string | null, _player?: null): ItemCraftedEventFilter;

    "ItemEquiped(address,uint256,uint256)"(
      _owner?: string | null,
      _playerId?: BigNumberish | null,
      _itemId?: BigNumberish | null
    ): ItemEquipedEventFilter;
    ItemEquiped(
      _owner?: string | null,
      _playerId?: BigNumberish | null,
      _itemId?: BigNumberish | null
    ): ItemEquipedEventFilter;

    "ItemUnequiped(address,uint256,uint256)"(
      _owner?: string | null,
      _playerId?: BigNumberish | null,
      _itemId?: BigNumberish | null
    ): ItemUnequipedEventFilter;
    ItemUnequiped(
      _owner?: string | null,
      _playerId?: BigNumberish | null,
      _itemId?: BigNumberish | null
    ): ItemUnequipedEventFilter;

    "List(address,uint256,uint256)"(
      _from?: string | null,
      _playerId?: BigNumberish | null,
      _price?: null
    ): ListEventFilter;
    List(
      _from?: string | null,
      _playerId?: BigNumberish | null,
      _price?: null
    ): ListEventFilter;

    "Purchase(address,uint256)"(
      _to?: string | null,
      _id?: null
    ): PurchaseEventFilter;
    Purchase(_to?: string | null, _id?: null): PurchaseEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferred_address_address_EventFilter;
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferred_address_address_EventFilter;
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferred_address_address_EventFilter;

    "Mint(uint256,address,string,string)"(
      id?: BigNumberish | null,
      owner?: string | null,
      name?: null,
      uri?: null
    ): MintEventFilter;
    Mint(
      id?: BigNumberish | null,
      owner?: string | null,
      name?: null,
      uri?: null
    ): MintEventFilter;

    "NameChange(address,uint256,string)"(
      owner?: string | null,
      id?: BigNumberish | null,
      newName?: string | null
    ): NameChangeEventFilter;
    NameChange(
      owner?: string | null,
      id?: BigNumberish | null,
      newName?: string | null
    ): NameChangeEventFilter;

    "BeginQuesting(address,uint256)"(
      _playerAddress?: string | null,
      _id?: null
    ): BeginQuestingEventFilter;
    BeginQuesting(
      _playerAddress?: string | null,
      _id?: null
    ): BeginQuestingEventFilter;

    "DragonQuest(uint256)"(
      _playerId?: BigNumberish | null
    ): DragonQuestEventFilter;
    DragonQuest(_playerId?: BigNumberish | null): DragonQuestEventFilter;

    "EndQuesting(address,uint256)"(
      _playerAddress?: string | null,
      _id?: null
    ): EndQuestingEventFilter;
    EndQuesting(
      _playerAddress?: string | null,
      _id?: null
    ): EndQuestingEventFilter;

    "BeginTrainingCombat(address,uint256)"(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): BeginTrainingCombatEventFilter;
    BeginTrainingCombat(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): BeginTrainingCombatEventFilter;

    "BeginTrainingMana(address,uint256)"(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): BeginTrainingManaEventFilter;
    BeginTrainingMana(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): BeginTrainingManaEventFilter;

    "EndTrainingCombat(address,uint256)"(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): EndTrainingCombatEventFilter;
    EndTrainingCombat(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): EndTrainingCombatEventFilter;

    "EndTrainingMana(address,uint256)"(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): EndTrainingManaEventFilter;
    EndTrainingMana(
      _playerAddress?: string | null,
      _id?: BigNumberish | null
    ): EndTrainingManaEventFilter;

    "ClaimTreasure(uint256,uint256)"(
      _playerId?: BigNumberish | null,
      _treasureDropId?: BigNumberish | null
    ): ClaimTreasureEventFilter;
    ClaimTreasure(
      _playerId?: BigNumberish | null,
      _treasureDropId?: BigNumberish | null
    ): ClaimTreasureEventFilter;
  };

  estimateGas: {
    enterMagicArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enterMainArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    enterSecondArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fightMagicArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fightMainArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    fightSecondArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getMagicArena(overrides?: CallOverrides): Promise<BigNumber>;

    getMagicArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMagicArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainArena(overrides?: CallOverrides): Promise<BigNumber>;

    getMainArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecondArena(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leaveMainArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    openArenas(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    craftArmor(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    craftGuitar(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    craftHelmet(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    craftSorcerShoes(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    craftSword(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    craftWizardHat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getItemCount(overrides?: CallOverrides): Promise<BigNumber>;

    getItems(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    "facetAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    "facets()"(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    equipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    equipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unequipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unequipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unequipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    crateListing(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllListings(overrides?: CallOverrides): Promise<BigNumber>;

    getLisitng(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListings(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchasePlayer(
      _listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeName(
      _id: BigNumberish,
      _newName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBlocktime(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayer(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayers(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _name: string,
      _uri: string,
      _isMale: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    nameAvailable(_name: string, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    playerCount(overrides?: CallOverrides): Promise<BigNumber>;

    dragonQuest(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endQuestGem(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endQuestGold(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCooldown(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGemBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGemStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoldBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoldStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasure(
      _treasureId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasures(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startQuestGem(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startQuestGold(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    activeScript(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    openArena(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    endTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endTrainingMana(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getCombatStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getManaStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    startTrainingMana(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimTreasureDropKyberShard(
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimedStatus(
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createTreasureDrop(
      _merkleRoot: BytesLike,
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getTreasureDropMerkleRoot(
      _treasureDropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTreasureDropWhitelist(
      _proof: BytesLike[],
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    enterMagicArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enterMainArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    enterSecondArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fightMagicArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fightMainArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    fightSecondArena(
      _challengerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getMagicArena(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMagicArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMagicArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainArena(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMainArenaLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainArenaWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecondArena(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalLosses(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalWins(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leaveMainArena(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    openArenas(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    craftArmor(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    craftGuitar(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    craftHelmet(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    craftSorcerShoes(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    craftSword(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    craftWizardHat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getItem(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getItemCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getItems(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: string,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddress(bytes4)"(
      _functionSelector: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facetFunctionSelectors(address)"(
      _facet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "facets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      _interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    equipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    equipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    equipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unequipBody(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unequipHead(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unequipRightHand(
      _playerId: BigNumberish,
      _itemId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    crateListing(
      _id: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllListings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLisitng(
      _listingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListings(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchasePlayer(
      _listingId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      _newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeName(
      _id: BigNumberish,
      _newName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBlocktime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayer(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayers(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _name: string,
      _uri: string,
      _isMale: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    nameAvailable(
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dragonQuest(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endQuestGem(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endQuestGold(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCooldown(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGemBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGemStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoldBalance(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoldStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasure(
      _treasureId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasures(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startQuestGem(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startQuestGold(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    activeScript(
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    openArena(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endTrainingMana(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getCombatStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getManaStart(
      _playerId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTrainingCombat(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    startTrainingMana(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimTreasureDropKyberShard(
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimedStatus(
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createTreasureDrop(
      _merkleRoot: BytesLike,
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getTreasureDropMerkleRoot(
      _treasureDropId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTreasureDropWhitelist(
      _proof: BytesLike[],
      _treasureDropId: BigNumberish,
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
