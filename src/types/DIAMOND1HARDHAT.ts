/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";
export type PlayerStruct = {
  level: BigNumberish;
  xp: BigNumberish;
  status: BigNumberish;
  strength: BigNumberish;
  health: BigNumberish;
  currentHealth: BigNumberish;
  magic: BigNumberish;
  mana: BigNumberish;
  maxMana: BigNumberish;
  agility: BigNumberish;
  luck: BigNumberish;
  wisdom: BigNumberish;
  haki: BigNumberish;
  perception: BigNumberish;
  defense: BigNumberish;
  name: string;
  uri: string;
  male: boolean;
  slot: SlotStruct;
  playerClass: BigNumberish;
};
export type SlotStruct = {
  head: BigNumberish;
  body: BigNumberish;
  leftHand: BigNumberish;
  rightHand: BigNumberish;
  pants: BigNumberish;
  feet: BigNumberish;
  neck: BigNumberish;
};
export type BasicArenaStruct = {
  basicArenaId: BigNumberish;
  cost: BigNumberish;
  cooldown: BigNumberish;
  hostId: BigNumberish;
  open: boolean;
  hostAddress: AddressLike;
  name: string;
  url: string;
};

export type BasicArenaStructOutput = [
  basicArenaId: bigint,
  cost: bigint,
  cooldown: bigint,
  hostId: bigint,
  open: boolean,
  hostAddress: string,
  name: string,
  url: string
] & {
  basicArenaId: bigint;
  cost: bigint;
  cooldown: bigint;
  hostId: bigint;
  open: boolean;
  hostAddress: string;
  name: string;
  url: string;
};
export type BasicPotionStruct = {
  basicHealthPotionSchemaId: BigNumberish;
  value: BigNumberish;
  cost: BigNumberish;
  supply: BigNumberish;
  isHealth: boolean;
  name: string;
  uri: string;
};
export type HillArenaStruct = {
  hillArenaId: BigNumberish;
  cost: BigNumberish;
  cooldown: BigNumberish;
  hostId: BigNumberish;
  open: boolean;
  hostAddress: AddressLike;
  name: string;
  url: string;
};

export type HillArenaStructOutput = [
  hillArenaId: bigint,
  cost: bigint,
  cooldown: bigint,
  hostId: bigint,
  open: boolean,
  hostAddress: string,
  name: string,
  url: string
] & {
  hillArenaId: bigint;
  cost: bigint;
  cooldown: bigint;
  hostId: bigint;
  open: boolean;
  hostAddress: string;
  name: string;
  url: string;
};

export type BasicEquipmentSchemaStruct = {
  basicEquipmentSchemaId: BigNumberish;
  slot: BigNumberish;
  value: BigNumberish;
  stat: BigNumberish;
  cost: BigNumberish;
  supply: BigNumberish;
  name: string;
  uri: string;
};

export type BasicEquipmentSchemaStructOutput = [
  basicEquipmentSchemaId: bigint,
  slot: bigint,
  value: bigint,
  stat: bigint,
  cost: bigint,
  supply: bigint,
  name: string,
  uri: string
] & {
  basicEquipmentSchemaId: bigint;
  slot: bigint;
  value: bigint;
  stat: bigint;
  cost: bigint;
  supply: bigint;
  name: string;
  uri: string;
};
export type LeaderboardUserStruct = {
  name: string;
  strength: number;
  level: number;
  totalWins: number;
  totalLosses: number;
};
export type BasicEquipmentStruct = {
  id: BigNumberish;
  basicEquipmentSchemaId: BigNumberish;
  slot: BigNumberish;
  value: BigNumberish;
  stat: BigNumberish;
  cost: BigNumberish;
  name: string;
  uri: string;
  supply: BigNumberish;
  currentSupply: BigNumberish;
};
export type AdvancedCraftStructOutput = [
  advancedCraftId: bigint,
  slot: bigint,
  value: bigint,
  stat: bigint,
  amount: bigint,
  treasureSchemaId: bigint,
  oldName: string,
  newName: string,
  uri: string
] & {
  advancedCraftId: bigint;
  slot: bigint;
  value: bigint;
  stat: bigint;
  amount: bigint;
  treasureSchemaId: bigint;
  oldName: string;
  newName: string;
  uri: string;
};

export type BasicCraftStruct = {
  id: BigNumberish;
  slot: BigNumberish;
  value: BigNumberish;
  cost: BigNumberish;
  oldName: string;
  newName: string;
  uri: string;
};

export type BasicCraftStructOutput = [
  id: bigint,
  slot: bigint,
  value: bigint,
  cost: bigint,
  oldName: string,
  newName: string,
  uri: string
] & {
  id: bigint;
  slot: bigint;
  value: bigint;
  cost: bigint;
  oldName: string;
  newName: string;
  uri: string;
};

export type EquipmentStruct = {
  id: BigNumberish;
  pointer: BigNumberish;
  slot: BigNumberish;
  rank: BigNumberish;
  value: BigNumberish;
  stat: BigNumberish;
  owner: BigNumberish;
  name: string;
  uri: string;
  isEquiped: boolean;
};

export type EquipmentStructOutput = [
  id: bigint,
  pointer: bigint,
  slot: bigint,
  rank: bigint,
  value: bigint,
  stat: bigint,
  owner: bigint,
  name: string,
  uri: string,
  isEquiped: boolean
] & {
  id: bigint;
  pointer: bigint;
  slot: bigint;
  rank: bigint;
  value: bigint;
  stat: bigint;
  owner: bigint;
  name: string;
  uri: string;
  isEquiped: boolean;
};

export type PlayerListingStruct = {
  seller: AddressLike;
  playerId: BigNumberish;
  price: BigNumberish;
  pointer: BigNumberish;
  addressPointer: BigNumberish;
};

export type PlayerListingStructOutput = [
  seller: string,
  playerId: bigint,
  price: bigint,
  pointer: bigint,
  addressPointer: bigint
] & {
  seller: string;
  playerId: bigint;
  price: bigint;
  pointer: bigint;
  addressPointer: bigint;
};

export type BasicMonsterStruct = {
  basicMonsterId: BigNumberish;
  xpReward: BigNumberish;
  damage: BigNumberish;
  hp: BigNumberish;
  cooldown: BigNumberish;
  name: string;
  uri: string;
};

export type BasicMonsterStructOutput = [
  basicMonsterId: bigint,
  xpReward: bigint,
  damage: bigint,
  hp: bigint,
  cooldown: bigint,
  name: string,
  uri: string
] & {
  basicMonsterId: bigint;
  xpReward: bigint;
  damage: bigint;
  hp: bigint;
  cooldown: bigint;
  name: string;
  uri: string;
};

export type MagicMonsterStruct = {
  basicMonsterId: BigNumberish;
  xpReward: BigNumberish;
  damage: BigNumberish;
  hp: BigNumberish;
  cooldown: BigNumberish;
  cost: BigNumberish;
  name: string;
  uri: string;
};

export type MagicMonsterStructOutput = [
  basicMonsterId: bigint,
  xpReward: bigint,
  damage: bigint,
  hp: bigint,
  cooldown: bigint,
  cost: bigint,
  name: string,
  uri: string
] & {
  basicMonsterId: bigint;
  xpReward: bigint;
  damage: bigint;
  hp: bigint;
  cooldown: bigint;
  cost: bigint;
  name: string;
  uri: string;
};

export type PlayerDropStruct = {
  id: BigNumberish;
  price: BigNumberish;
  merkleRoot: BytesLike;
  name: string;
};

export type PlayerDropStructOutput = [
  id: bigint,
  price: bigint,
  merkleRoot: string,
  name: string
] & { id: bigint; price: bigint; merkleRoot: string; name: string };

export type GoldQuestSchemaStruct = {
  GoldQuestSchemaId: BigNumberish;
  reward: BigNumberish;
  maxReward: BigNumberish;
  level: BigNumberish;
  damage: BigNumberish;
  time: BigNumberish;
};

export type GoldQuestSchemaStructOutput = [
  GoldQuestSchemaId: bigint,
  reward: bigint,
  maxReward: bigint,
  level: bigint,
  damage: bigint,
  time: bigint
] & {
  GoldQuestSchemaId: bigint;
  reward: bigint;
  maxReward: bigint;
  level: bigint;
  damage: bigint;
  time: bigint;
};

export type BasicPotionSchemaStruct = {
  basicHealthPotionSchemaId: BigNumberish;
  value: BigNumberish;
  cost: BigNumberish;
  isHealth: boolean;
  name: string;
  uri: string;
};

export type BasicPotionSchemaStructOutput = [
  basicHealthPotionSchemaId: bigint,
  value: bigint,
  cost: bigint,
  isHealth: boolean,
  name: string,
  uri: string
] & {
  basicHealthPotionSchemaId: bigint;
  value: bigint;
  cost: bigint;
  isHealth: boolean;
  name: string;
  uri: string;
};

export type TreasureSchemaStruct = {
  basicTreasureId: BigNumberish;
  rank: BigNumberish;
  name: string;
  uri: string;
};

export type TreasureSchemaStructOutput = [
  basicTreasureId: bigint,
  rank: bigint,
  name: string,
  uri: string
] & { basicTreasureId: bigint; rank: bigint; name: string; uri: string };

export declare namespace IDiamondCut {
  export type FacetCutStruct = {
    facetAddress: AddressLike;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facetAddress: string,
    action: bigint,
    functionSelectors: string[]
  ] & { facetAddress: string; action: bigint; functionSelectors: string[] };
}

export type MaterialBalanceStruct = {
  balance: number;
  player: { id: number };
  treasure: MaterialStruct;
};

export declare namespace IDiamond {
  export type FacetCutStruct = {
    facetAddress: AddressLike;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facetAddress: string,
    action: bigint,
    functionSelectors: string[]
  ] & { facetAddress: string; action: bigint; functionSelectors: string[] };
}

export declare namespace IDiamondLoupe {
  export type FacetStruct = {
    facetAddress: AddressLike;
    functionSelectors: BytesLike[];
  };

  export type FacetStructOutput = [
    facetAddress: string,
    functionSelectors: string[]
  ] & { facetAddress: string; functionSelectors: string[] };
}

export declare namespace PlayerSlotLib {
  export type SlotStruct = {
    head: BigNumberish;
    body: BigNumberish;
    leftHand: BigNumberish;
    rightHand: BigNumberish;
    pants: BigNumberish;
    feet: BigNumberish;
    neck: BigNumberish;
  };

  export type SlotStructOutput = [
    head: bigint,
    body: bigint,
    leftHand: bigint,
    rightHand: bigint,
    pants: bigint,
    feet: bigint,
    neck: bigint
  ] & {
    head: bigint;
    body: bigint;
    leftHand: bigint;
    rightHand: bigint;
    pants: bigint;
    feet: bigint;
    neck: bigint;
  };

  export type PlayerStruct = {
    level: BigNumberish;
    xp: BigNumberish;
    status: BigNumberish;
    strength: BigNumberish;
    health: BigNumberish;
    currentHealth: BigNumberish;
    magic: BigNumberish;
    mana: BigNumberish;
    maxMana: BigNumberish;
    agility: BigNumberish;
    luck: BigNumberish;
    wisdom: BigNumberish;
    haki: BigNumberish;
    perception: BigNumberish;
    defense: BigNumberish;
    name: string;
    uri: string;
    male: boolean;
    slot: PlayerSlotLib.SlotStruct;
    playerClass: BigNumberish;
  };

  export type PlayerStructOutput = [
    level: bigint,
    xp: bigint,
    status: bigint,
    strength: bigint,
    health: bigint,
    currentHealth: bigint,
    magic: bigint,
    mana: bigint,
    maxMana: bigint,
    agility: bigint,
    luck: bigint,
    wisdom: bigint,
    haki: bigint,
    perception: bigint,
    defense: bigint,
    name: string,
    uri: string,
    male: boolean,
    slot: PlayerSlotLib.SlotStructOutput,
    playerClass: bigint
  ] & {
    level: bigint;
    xp: bigint;
    status: bigint;
    strength: bigint;
    health: bigint;
    currentHealth: bigint;
    magic: bigint;
    mana: bigint;
    maxMana: bigint;
    agility: bigint;
    luck: bigint;
    wisdom: bigint;
    haki: bigint;
    perception: bigint;
    defense: bigint;
    name: string;
    uri: string;
    male: boolean;
    slot: PlayerSlotLib.SlotStructOutput;
    playerClass: bigint;
  };
}

export interface DiamondABIInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance(address,address)"
      | "allowance(address,address)"
      | "allowance(address,address)"
      | "allowance(address,address)"
      | "allowance(address,address)"
      | "approve(address,uint256)"
      | "approve(address,uint256)"
      | "approve(address,uint256)"
      | "approve(address,uint256)"
      | "approve(address,uint256)"
      | "approve(address,uint256)"
      | "approve(address,uint256)"
      | "approve(address,uint256)"
      | "balanceOf(address)"
      | "balanceOf(address)"
      | "balanceOf(address)"
      | "balanceOf(address)"
      | "balanceOf(address)"
      | "balanceOf(address)"
      | "balanceOf(address,uint256)"
      | "balanceOf(address,uint256)"
      | "balanceOf(address)"
      | "balanceOf(address)"
      | "burn(address,uint256)"
      | "burn(address,uint256)"
      | "burn(address,uint256)"
      | "burn(address,uint256)"
      | "decimals()"
      | "decimals()"
      | "decimals()"
      | "decimals()"
      | "decreaseAllowance(address,uint256)"
      | "decreaseAllowance(address,uint256)"
      | "decreaseAllowance(address,uint256)"
      | "feeRecipientAddress()"
      | "feeRecipientAddress()"
      | "feeRecipientAddress()"
      | "feeRecipientAddress()"
      | "increaseAllowance(address,uint256)"
      | "increaseAllowance(address,uint256)"
      | "increaseAllowance(address,uint256)"
      | "maxSupply()"
      | "maxSupply()"
      | "maxSupply()"
      | "maxSupply()"
      | "mint(address,uint256)"
      | "mint(address,uint256)"
      | "mint(address,uint256)"
      | "mint(address,uint256)"
      | "mint(string,bool,uint256)"
      | "minterRole()"
      | "minterRole()"
      | "minterRole()"
      | "minterRole()"
      | "name()"
      | "name()"
      | "name()"
      | "name()"
      | "name()"
      | "name()"
      | "symbol()"
      | "symbol()"
      | "symbol()"
      | "symbol()"
      | "symbol()"
      | "symbol()"
      | "totalSupply()"
      | "totalSupply()"
      | "totalSupply()"
      | "totalSupply()"
      | "totalSupply()"
      | "transfer(address,uint256)"
      | "transfer(address,uint256)"
      | "transfer(address,uint256)"
      | "transfer(address,uint256)"
      | "transfer(address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "updateFeeRecipient(address)"
      | "updateFeeRecipient(address)"
      | "updateFeeRecipient(address)"
      | "updateFeeRecipient(address)"
      | "updateMaxSupply(uint256)"
      | "updateMaxSupply(uint256)"
      | "updateMaxSupply(uint256)"
      | "updateMaxSupply(uint256)"
      | "updateMinter(address)"
      | "updateMinter(address)"
      | "updateMinter(address)"
      | "updateMinter(address)"
      | "diamondCut((address,uint8,bytes4[])[],address,bytes)"
      | "diamondCut((address,uint8,bytes4[])[],address,bytes)"
      | "diamondCut((address,uint8,bytes4[])[],address,bytes)"
      | "owner()"
      | "owner()"
      | "owner()"
      | "owner()"
      | "owner()"
      | "renounceOwnership()"
      | "renounceOwnership()"
      | "renounceOwnership()"
      | "transferOwnership(address)"
      | "transferOwnership(address)"
      | "transferOwnership(address)"
      | "transferOwnership(address)"
      | "transferOwnership(address)"
      | "extractTimestampsAndAssertAllAreEqual()"
      | "extractTimestampsAndAssertAllAreEqual()"
      | "extractTimestampsAndAssertAllAreEqual()"
      | "extractTimestampsAndAssertAllAreEqual()"
      | "aggregateValues(uint256[])"
      | "aggregateValues(uint256[])"
      | "aggregateValues(uint256[])"
      | "getAuthorisedSignerIndex(address)"
      | "getAuthorisedSignerIndex(address)"
      | "getAuthorisedSignerIndex(address)"
      | "getDataServiceId()"
      | "getDataServiceId()"
      | "getDataServiceId()"
      | "getUniqueSignersThreshold()"
      | "getUniqueSignersThreshold()"
      | "getUniqueSignersThreshold()"
      | "validateTimestamp(uint256)"
      | "validateTimestamp(uint256)"
      | "validateTimestamp(uint256)"
      | "createBasicArena"
      | "createHillArena"
      | "enterBasicArena"
      | "enterHillArena"
      | "fightBaiscArena"
      | "fightHillArena"
      | "freeGold"
      | "getBasicArena"
      | "getBasicArenaCooldowns"
      | "getBasicArenaCount"
      | "getGoldBalance(address)"
      | "getGoldBalance(address)"
      | "getHillArena"
      | "getHillArenaCooldowns"
      | "getHillArenaCount"
      | "getTotalLosses"
      | "getTotalWins"
      | "leaveBasicArena"
      | "leaveHillArena"
      | "advancedCraft"
      | "basicCraft"
      | "createAdvancedCraft"
      | "createBasicCraft"
      | "createBasicEquipment"
      | "getAdvancedCraft"
      | "getAdvancedCraftCount"
      | "getBasicCraft"
      | "getBasicCraftCount"
      | "getBasicEquipmentCount"
      | "getBasicEquipmentSchema"
      | "getBasicEquipmentSupply"
      | "getEquipment"
      | "getPlayerToEquipment"
      | "purchaseBasicEquipment"
      | "updateBasicEquipmentScehma"
      | "facetAddress(bytes4)"
      | "facetAddress(bytes4)"
      | "facetAddresses()"
      | "facetAddresses()"
      | "facetFunctionSelectors(address)"
      | "facetFunctionSelectors(address)"
      | "facets()"
      | "facets()"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "supportsInterface(bytes4)"
      | "getApproved(uint256)"
      | "getApproved(uint256)"
      | "getApproved(uint256)"
      | "isApprovedForAll(address,address)"
      | "isApprovedForAll(address,address)"
      | "isApprovedForAll(address,address)"
      | "isApprovedForAll(address,address)"
      | "isApprovedForAll(address,address)"
      | "ownerOf(uint256)"
      | "ownerOf(uint256)"
      | "ownerOf(uint256)"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "safeTransferFrom(address,address,uint256,uint256,bytes)"
      | "safeTransferFrom(address,address,uint256,uint256,bytes)"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll(address,bool)"
      | "setApprovalForAll(address,bool)"
      | "setApprovalForAll(address,bool)"
      | "setApprovalForAll(address,bool)"
      | "setApprovalForAll(address,bool)"
      | "tokenURI(uint256)"
      | "tokenURI(uint256)"
      | "equip"
      | "unequip"
      | "claimGoldfromERC20"
      | "createPlayerListing"
      | "deListPlayer"
      | "getAllPlayerListings"
      | "getPlayerListing"
      | "getPlayerListingsByAddress"
      | "mintGoldERC20"
      | "owners"
      | "purchasePlayer"
      | "transferPlayer"
      | "addMonsterAdmin"
      | "createBasicMonster"
      | "createMagicMonster"
      | "editBasicMonster"
      | "fightBasicMonster"
      | "fightMagicMonster"
      | "getBasicMonster"
      | "getBasicMonsterCooldown"
      | "getBasicMonsterCounter"
      | "getMagicMonster"
      | "getMagicMonsterCooldown"
      | "getMagicMonsterCounter"
      | "stakeMonsterGoldBasic"
      | "unstakeMonsterGoldBasic"
      | "changeNameFee"
      | "claimPlayerDrop"
      | "claimPlayerDropPaladin"
      | "claimedStatus(uint256,address)"
      | "claimedStatus(uint256,address)"
      | "createPlayerDrop"
      | "getPlayerDrop"
      | "getPlayerDropMerkleRoot"
      | "verifyPlayerDropWhitelist"
      | "changeName"
      | "getBlocktime"
      | "getPlayer"
      | "getPlayers"
      | "levelUp"
      | "nameAvailable"
      | "ownerOfPlayer"
      | "playerCount"
      | "createQuestGold"
      | "endQuestGem"
      | "endQuestGold"
      | "feeMintTest"
      | "getCooldown"
      | "getGemBalance"
      | "getGemStart"
      | "getGold"
      | "getGoldQuest"
      | "getGoldQuestCount"
      | "getGoldStart"
      | "startQuestGem"
      | "startQuestGold"
      | "emitLevel"
      | "levelUpScript"
      | "consumeBasicHealthPotion"
      | "createBasicPotion"
      | "getBaiscPotionCount"
      | "getBasicPotion"
      | "getBasicPotionSchemaCount"
      | "purchaseBasicPotion"
      | "endTrainingBasicHealth"
      | "endTrainingMana"
      | "getHealthStart"
      | "getManaStart"
      | "startTrainingBasicHealth"
      | "startTrainingMana"
      | "claimTreasureDropGravityOrb"
      | "claimTreasureDropKyberShard"
      | "createTreasureDrop"
      | "getTreasureDropMerkleRoot"
      | "verifyTreasureDropWhitelist"
      | "createTreasureSchema"
      | "getTreasurePlayer"
      | "getTreasureSchema"
      | "getTreasureSchemaCounter"
      | "mintTreasure"
      | "balanceOfBatch(address[],uint256[])"
      | "balanceOfBatch(address[],uint256[])"
      | "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
      | "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
      | "uri"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "currentVersion"
      | "iSend"
      | "setDappMetadata"
      | "init"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Approval(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "Transfer(address,address,uint256)"
      | "DiamondCut(tuple[],address,bytes)"
      | "DiamondCut(tuple[],address,bytes)"
      | "DiamondCut(tuple[],address,bytes)"
      | "DiamondCut(tuple[],address,bytes)"
      | "DiamondCut(tuple[],address,bytes)"
      | "DiamondCut(tuple[],address,bytes)"
      | "OwnershipTransferred(address,address)"
      | "OwnershipTransferred(address,address)"
      | "OwnershipTransferred(address,address)"
      | "OwnershipTransferred(address,address)"
      | "OwnershipTransferred(address,address)"
      | "OwnershipTransferred(address,address)"
      | "OwnershipTransferred(address,address)"
      | "BasicArenaLoss"
      | "BasicArenaWin"
      | "CreateBasicArena"
      | "CreateHillArena"
      | "EnterBasicArena"
      | "EnterHillArena"
      | "LeaveBasicArena"
      | "AdvancedCraftEvent"
      | "BasicCraftEvent"
      | "BasicEquipmentSchemaCreated"
      | "BasicEquipmentSchemaUpdate"
      | "CreateAdvancedCraft"
      | "CreateBasicCraft"
      | "PurchaseBasicEquipment"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ApprovalForAll(address,address,bool)"
      | "ItemEquiped"
      | "ItemUnequiped"
      | "CreateEquipmentListing"
      | "CreatePlayerListing"
      | "DelistPlayer"
      | "PurchaseEquipmentLisitng"
      | "PurchasePlayerListing"
      | "AddMonsterAdmin"
      | "CreateBasicMonster"
      | "CreateMagicMonster"
      | "DragonQuest"
      | "EditBasicMonster"
      | "FightBasicMonster"
      | "FightMagicMonster"
      | "ClaimPlayer"
      | "Mint(uint256,address,string,uint256)"
      | "Mint(uint256,address,string,uint256)"
      | "NameChange(address,uint256,string)"
      | "NameChange(address,uint256,string)"
      | "LevelUp"
      | "BeginGoldQuest"
      | "BeginQuesting"
      | "CreateGoldQuest"
      | "EndGoldQuest"
      | "TrustedSignerChanged(address)"
      | "TrustedSignerChanged(address)"
      | "LevelUpPatch"
      | "ConsumeBasicPotion"
      | "CreateBasicPotion"
      | "PurchaseBasicPotion"
      | "BeginTrainingBasicHealth"
      | "BeginTrainingMana"
      | "EndTrainingBasicHealth"
      | "EndTrainingMana"
      | "ClaimTreasure"
      | "CreateTreasureDrop"
      | "MintTreasure"
      | "TreasureSchemaCreation"
      | "TransferBatch(address,address,address,uint256[],uint256[])"
      | "TransferBatch(address,address,address,uint256[],uint256[])"
      | "TransferSingle(address,address,address,uint256,uint256)"
      | "TransferSingle(address,address,address,uint256,uint256)"
      | "URI(string,uint256)"
      | "URI(string,uint256)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipientAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipientAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipientAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipientAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(string,bool,uint256)",
    values: [string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minterRole()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterRole()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterRole()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minterRole()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinter(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinter(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinter(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinter(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    values: [IDiamondCut.FacetCutStruct[], AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    values: [IDiamond.FacetCutStruct[], AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    values: [IDiamond.FacetCutStruct[], AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateValues(uint256[])",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateValues(uint256[])",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateValues(uint256[])",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorisedSignerIndex(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorisedSignerIndex(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorisedSignerIndex(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDataServiceId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataServiceId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataServiceId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniqueSignersThreshold()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniqueSignersThreshold()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUniqueSignersThreshold()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validateTimestamp(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTimestamp(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTimestamp(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBasicArena",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createHillArena",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enterBasicArena",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterHillArena",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fightBaiscArena",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fightHillArena",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "freeGold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBasicArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicArenaCooldowns",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicArenaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldBalance(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldBalance(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHillArena",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHillArenaCooldowns",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHillArenaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLosses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalWins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveBasicArena",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveHillArena",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "advancedCraft",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "basicCraft",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAdvancedCraft",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBasicCraft",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBasicEquipment",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedCraft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedCraftCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicCraft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicCraftCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicEquipmentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicEquipmentSchema",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicEquipmentSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEquipment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerToEquipment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseBasicEquipment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBasicEquipmentScehma",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddress(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetAddresses()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "facetFunctionSelectors(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "facets()", values?: undefined): string;
  encodeFunctionData(functionFragment: "facets()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "equip",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unequip",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGoldfromERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlayerListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deListPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayerListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerListingsByAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintGoldERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPlayer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMonsterAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createBasicMonster",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMagicMonster",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editBasicMonster",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fightBasicMonster",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fightMagicMonster",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicMonster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicMonsterCooldown",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicMonsterCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMagicMonster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMagicMonsterCooldown",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMagicMonsterCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeMonsterGoldBasic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeMonsterGoldBasic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNameFee",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPlayerDrop",
    values: [BigNumberish, BytesLike[], string, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPlayerDropPaladin",
    values: [BigNumberish, BytesLike[], string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedStatus(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedStatus(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPlayerDrop",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerDrop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerDropMerkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyPlayerDropWhitelist",
    values: [BytesLike[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlocktime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nameAvailable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOfPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "playerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createQuestGold",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endQuestGem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endQuestGold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeMintTest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGemBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGemStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getGold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGoldQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldQuestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGoldStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startQuestGem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startQuestGold",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levelUpScript",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "consumeBasicHealthPotion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBasicPotion",
    values: [BigNumberish, BigNumberish, boolean, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaiscPotionCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicPotion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBasicPotionSchemaCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseBasicPotion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endTrainingBasicHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endTrainingMana",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getManaStart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTrainingBasicHealth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTrainingMana",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasureDropGravityOrb",
    values: [BigNumberish, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasureDropKyberShard",
    values: [BigNumberish, BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTreasureDrop",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasureDropMerkleRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTreasureDropWhitelist",
    values: [BytesLike[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createTreasureSchema",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasurePlayer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasureSchema",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasureSchemaCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintTreasure",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch(address[],uint256[])",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch(address[],uint256[])",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "iSend",
    values: [BigNumberish, BigNumberish, string, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDappMetadata",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burn(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipientAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipientAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipientAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipientAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mint(string,bool,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterRole()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterRole()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterRole()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minterRole()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinter(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractTimestampsAndAssertAllAreEqual()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateValues(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateValues(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateValues(uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorisedSignerIndex(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorisedSignerIndex(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorisedSignerIndex(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataServiceId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataServiceId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataServiceId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniqueSignersThreshold()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniqueSignersThreshold()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniqueSignersThreshold()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTimestamp(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTimestamp(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTimestamp(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBasicArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createHillArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterBasicArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterHillArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fightBaiscArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fightHillArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeGold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBasicArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicArenaCooldowns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicArenaCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldBalance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldBalance(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHillArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHillArenaCooldowns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHillArenaCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLosses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalWins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveBasicArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveHillArena",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advancedCraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "basicCraft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAdvancedCraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBasicCraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBasicEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedCraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedCraftCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicCraft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicCraftCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicEquipmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicEquipmentSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicEquipmentSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerToEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseBasicEquipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBasicEquipmentScehma",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddress(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetAddresses()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "facetFunctionSelectors(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "facets()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "facets()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOf(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOf(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOf(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenURI(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenURI(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "equip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unequip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimGoldfromERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPlayerListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deListPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayerListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerListingsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGoldERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchasePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMonsterAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBasicMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMagicMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editBasicMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fightBasicMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fightMagicMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicMonsterCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicMonsterCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagicMonster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagicMonsterCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMagicMonsterCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeMonsterGoldBasic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeMonsterGoldBasic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeNameFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPlayerDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPlayerDropPaladin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedStatus(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedStatus(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPlayerDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerDropMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyPlayerDropWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlocktime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "levelUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerOfPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createQuestGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endQuestGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endQuestGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeMintTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGemBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGemStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGoldQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldQuestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoldStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startQuestGem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startQuestGold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "emitLevel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "levelUpScript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "consumeBasicHealthPotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBasicPotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaiscPotionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBasicPotionSchemaCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseBasicPotion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTrainingBasicHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTrainingMana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getManaStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTrainingBasicHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTrainingMana",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasureDropGravityOrb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasureDropKyberShard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTreasureDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasureDropMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTreasureDropWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTreasureSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasurePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasureSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasureSchemaCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTreasure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch(address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch(address[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "iSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDappMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
}

export namespace Approval_address_address_uint256_Event {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Transfer_address_address_uint256_Event {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DiamondCut_tuple_array_address_bytes_Event {
  export type InputTuple = [
    _diamondCut: IDiamond.FacetCutStruct[],
    _init: AddressLike,
    _calldata: BytesLike
  ];
  export type OutputTuple = [
    _diamondCut: IDiamond.FacetCutStructOutput[],
    _init: string,
    _calldata: string
  ];
  export interface OutputObject {
    _diamondCut: IDiamond.FacetCutStructOutput[];
    _init: string;
    _calldata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferred_address_address_Event {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BasicArenaLossEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _basicArenaId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _basicArenaId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _basicArenaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BasicArenaWinEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _basicArenaId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _basicArenaId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _basicArenaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateBasicArenaEvent {
  export type InputTuple = [
    _basicArenaId: BigNumberish,
    _basicArena: BasicArenaStruct
  ];
  export type OutputTuple = [
    _basicArenaId: bigint,
    _basicArena: BasicArenaStructOutput
  ];
  export interface OutputObject {
    _basicArenaId: bigint;
    _basicArena: BasicArenaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateHillArenaEvent {
  export type InputTuple = [
    _hillArenaId: BigNumberish,
    _hillArena: HillArenaStruct
  ];
  export type OutputTuple = [
    _hillArenaId: bigint,
    _hillArena: HillArenaStructOutput
  ];
  export interface OutputObject {
    _hillArenaId: bigint;
    _hillArena: HillArenaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterBasicArenaEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _basicArenaId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _basicArenaId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _basicArenaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EnterHillArenaEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _hillArenaId: BigNumberish,
    _timestamp: BigNumberish
  ];
  export type OutputTuple = [
    _playerId: bigint,
    _hillArenaId: bigint,
    _timestamp: bigint
  ];
  export interface OutputObject {
    _playerId: bigint;
    _hillArenaId: bigint;
    _timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeaveBasicArenaEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _basicArenaId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _basicArenaId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _basicArenaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdvancedCraftEventEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _equipmentId: BigNumberish,
    _advancedCraftId: BigNumberish
  ];
  export type OutputTuple = [
    _playerId: bigint,
    _equipmentId: bigint,
    _advancedCraftId: bigint
  ];
  export interface OutputObject {
    _playerId: bigint;
    _equipmentId: bigint;
    _advancedCraftId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BasicCraftEventEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _equipmentId: BigNumberish,
    _craftId: BigNumberish
  ];
  export type OutputTuple = [
    _playerId: bigint,
    _equipmentId: bigint,
    _craftId: bigint
  ];
  export interface OutputObject {
    _playerId: bigint;
    _equipmentId: bigint;
    _craftId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BasicEquipmentSchemaCreatedEvent {
  export type InputTuple = [
    _basicEquipmentSchemaId: BigNumberish,
    _value: BigNumberish,
    _uri: string,
    _basicEQuipmentSchema: BasicEquipmentSchemaStruct
  ];
  export type OutputTuple = [
    _basicEquipmentSchemaId: bigint,
    _value: bigint,
    _uri: string,
    _basicEQuipmentSchema: BasicEquipmentSchemaStructOutput
  ];
  export interface OutputObject {
    _basicEquipmentSchemaId: bigint;
    _value: bigint;
    _uri: string;
    _basicEQuipmentSchema: BasicEquipmentSchemaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BasicEquipmentSchemaUpdateEvent {
  export type InputTuple = [
    _basicEquipmentSchemaId: BigNumberish,
    _value: BigNumberish,
    _uri: string,
    _basicEQuipmentSchema: BasicEquipmentSchemaStruct
  ];
  export type OutputTuple = [
    _basicEquipmentSchemaId: bigint,
    _value: bigint,
    _uri: string,
    _basicEQuipmentSchema: BasicEquipmentSchemaStructOutput
  ];
  export interface OutputObject {
    _basicEquipmentSchemaId: bigint;
    _value: bigint;
    _uri: string;
    _basicEQuipmentSchema: BasicEquipmentSchemaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateAdvancedCraftEvent {
  export type InputTuple = [
    id: BigNumberish,
    _advancedCraft: AdvancedCraftStruct
  ];
  export type OutputTuple = [
    id: bigint,
    _advancedCraft: AdvancedCraftStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    _advancedCraft: AdvancedCraftStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateBasicCraftEvent {
  export type InputTuple = [id: BigNumberish, _basicCraft: BasicCraftStruct];
  export type OutputTuple = [id: bigint, _basicCraft: BasicCraftStructOutput];
  export interface OutputObject {
    id: bigint;
    _basicCraft: BasicCraftStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseBasicEquipmentEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _equipmentSchemaId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _equipmentSchemaId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _equipmentSchemaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAll_address_address_bool_Event {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemEquipedEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _playerId: BigNumberish,
    _equipmentId: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _playerId: bigint,
    _equipmentId: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _playerId: bigint;
    _equipmentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ItemUnequipedEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _playerId: BigNumberish,
    _equipmentId: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _playerId: bigint,
    _equipmentId: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _playerId: bigint;
    _equipmentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateEquipmentListingEvent {
  export type InputTuple = [
    _from: AddressLike,
    _playerId: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [_from: string, _playerId: bigint, _price: bigint];
  export interface OutputObject {
    _from: string;
    _playerId: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatePlayerListingEvent {
  export type InputTuple = [
    _from: AddressLike,
    _playerId: BigNumberish,
    _price: BigNumberish
  ];
  export type OutputTuple = [_from: string, _playerId: bigint, _price: bigint];
  export interface OutputObject {
    _from: string;
    _playerId: bigint;
    _price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelistPlayerEvent {
  export type InputTuple = [_from: AddressLike, _playerId: BigNumberish];
  export type OutputTuple = [_from: string, _playerId: bigint];
  export interface OutputObject {
    _from: string;
    _playerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseEquipmentLisitngEvent {
  export type InputTuple = [_to: AddressLike, _id: BigNumberish];
  export type OutputTuple = [_to: string, _id: bigint];
  export interface OutputObject {
    _to: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchasePlayerListingEvent {
  export type InputTuple = [_to: AddressLike, _id: BigNumberish];
  export type OutputTuple = [_to: string, _id: bigint];
  export interface OutputObject {
    _to: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddMonsterAdminEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateBasicMonsterEvent {
  export type InputTuple = [
    _monsterId: BigNumberish,
    _basicMonster: BasicMonsterStruct
  ];
  export type OutputTuple = [
    _monsterId: bigint,
    _basicMonster: BasicMonsterStructOutput
  ];
  export interface OutputObject {
    _monsterId: bigint;
    _basicMonster: BasicMonsterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateMagicMonsterEvent {
  export type InputTuple = [
    _monsterId: BigNumberish,
    _magicMonster: MagicMonsterStruct
  ];
  export type OutputTuple = [
    _monsterId: bigint,
    _magicMonster: MagicMonsterStructOutput
  ];
  export interface OutputObject {
    _monsterId: bigint;
    _magicMonster: MagicMonsterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DragonQuestEvent {
  export type InputTuple = [_playerId: BigNumberish];
  export type OutputTuple = [_playerId: bigint];
  export interface OutputObject {
    _playerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EditBasicMonsterEvent {
  export type InputTuple = [_monsterId: BigNumberish];
  export type OutputTuple = [_monsterId: bigint];
  export interface OutputObject {
    _monsterId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FightBasicMonsterEvent {
  export type InputTuple = [_monsterId: BigNumberish, _playerId: BigNumberish];
  export type OutputTuple = [_monsterId: bigint, _playerId: bigint];
  export interface OutputObject {
    _monsterId: bigint;
    _playerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FightMagicMonsterEvent {
  export type InputTuple = [_monsterId: BigNumberish, _playerId: BigNumberish];
  export type OutputTuple = [_monsterId: bigint, _playerId: bigint];
  export interface OutputObject {
    _monsterId: bigint;
    _playerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimPlayerEvent {
  export type InputTuple = [_playerDropId: BigNumberish];
  export type OutputTuple = [_playerDropId: bigint];
  export interface OutputObject {
    _playerDropId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace Mint_uint256_address_string_uint256_Event {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    name: string,
    _class: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    owner: string,
    name: string,
    _class: bigint
  ];
  export interface OutputObject {
    id: bigint;
    owner: string;
    name: string;
    _class: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameChange_address_uint256_string_Event {
  export type InputTuple = [
    owner: AddressLike,
    id: BigNumberish,
    newName: string
  ];
  export type OutputTuple = [owner: string, id: bigint, newName: string];
  export interface OutputObject {
    owner: string;
    id: bigint;
    newName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelUpEvent {
  export type InputTuple = [_playerId: BigNumberish, _stat: BigNumberish];
  export type OutputTuple = [_playerId: bigint, _stat: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _stat: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeginGoldQuestEvent {
  export type InputTuple = [
    _playerAddress: AddressLike,
    _playerId: BigNumberish,
    _goldQuestScheme: BigNumberish
  ];
  export type OutputTuple = [
    _playerAddress: string,
    _playerId: bigint,
    _goldQuestScheme: bigint
  ];
  export interface OutputObject {
    _playerAddress: string;
    _playerId: bigint;
    _goldQuestScheme: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeginQuestingEvent {
  export type InputTuple = [_playerAddress: AddressLike, _id: BigNumberish];
  export type OutputTuple = [_playerAddress: string, _id: bigint];
  export interface OutputObject {
    _playerAddress: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateGoldQuestEvent {
  export type InputTuple = [
    _goldQuestId: BigNumberish,
    _goldQuest: GoldQuestSchemaStruct
  ];
  export type OutputTuple = [
    _goldQuestId: bigint,
    _goldQuest: GoldQuestSchemaStructOutput
  ];
  export interface OutputObject {
    _goldQuestId: bigint;
    _goldQuest: GoldQuestSchemaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndGoldQuestEvent {
  export type InputTuple = [
    _playerAddress: AddressLike,
    _playerId: BigNumberish,
    _goldQuestScheme: BigNumberish
  ];
  export type OutputTuple = [
    _playerAddress: string,
    _playerId: bigint,
    _goldQuestScheme: bigint
  ];
  export interface OutputObject {
    _playerAddress: string;
    _playerId: bigint;
    _goldQuestScheme: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedSignerChanged_address_Event {
  export type InputTuple = [newSigner: AddressLike];
  export type OutputTuple = [newSigner: string];
  export interface OutputObject {
    newSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LevelUpPatchEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConsumeBasicPotionEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _basicPotionSchemaId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _basicPotionSchemaId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _basicPotionSchemaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export type CraftStruct = {
  id: string;
  cost: number;
  newName: string;
  oldName: string;
  slot: string;
  uri: string;
  value: number;
};

export type AdvancedCraftStruct = {
  id: string;
  newName: string;
  oldName: string;
  slot: string;
  stat: string;
  uri: string;
  value: number;
  treasure: MaterialStruct;
};

export type MaterialStruct = {
  id: string;
  name: string;
  uri: string;
  rank: number;
};

export namespace CreateBasicPotionEvent {
  export type InputTuple = [
    _basicPotionSchemaId: BigNumberish,
    potionSchema: BasicPotionSchemaStruct
  ];
  export type OutputTuple = [
    _basicPotionSchemaId: bigint,
    potionSchema: BasicPotionSchemaStructOutput
  ];
  export interface OutputObject {
    _basicPotionSchemaId: bigint;
    potionSchema: BasicPotionSchemaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseBasicPotionEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _basicPotionSchemaId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _basicPotionSchemaId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _basicPotionSchemaId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeginTrainingBasicHealthEvent {
  export type InputTuple = [_playerAddress: AddressLike, _id: BigNumberish];
  export type OutputTuple = [_playerAddress: string, _id: bigint];
  export interface OutputObject {
    _playerAddress: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeginTrainingManaEvent {
  export type InputTuple = [_playerAddress: AddressLike, _id: BigNumberish];
  export type OutputTuple = [_playerAddress: string, _id: bigint];
  export interface OutputObject {
    _playerAddress: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndTrainingBasicHealthEvent {
  export type InputTuple = [_playerAddress: AddressLike, _id: BigNumberish];
  export type OutputTuple = [_playerAddress: string, _id: bigint];
  export interface OutputObject {
    _playerAddress: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndTrainingManaEvent {
  export type InputTuple = [_playerAddress: AddressLike, _id: BigNumberish];
  export type OutputTuple = [_playerAddress: string, _id: bigint];
  export interface OutputObject {
    _playerAddress: string;
    _id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimTreasureEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _treasureDropId: BigNumberish
  ];
  export type OutputTuple = [_playerId: bigint, _treasureDropId: bigint];
  export interface OutputObject {
    _playerId: bigint;
    _treasureDropId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateTreasureDropEvent {
  export type InputTuple = [_name: string];
  export type OutputTuple = [_name: string];
  export interface OutputObject {
    _name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintTreasureEvent {
  export type InputTuple = [
    _playerId: BigNumberish,
    _treasureSchemaId: TreasureSchemaStruct
  ];
  export type OutputTuple = [
    _playerId: bigint,
    _treasureSchemaId: TreasureSchemaStructOutput
  ];
  export interface OutputObject {
    _playerId: bigint;
    _treasureSchemaId: TreasureSchemaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasureSchemaCreationEvent {
  export type InputTuple = [_treasureSchemaId: TreasureSchemaStruct];
  export type OutputTuple = [_treasureSchemaId: TreasureSchemaStructOutput];
  export interface OutputObject {
    _treasureSchemaId: TreasureSchemaStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatch_address_address_address_uint256_array_uint256_array_Event {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingle_address_address_address_uint256_uint256_Event {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URI_string_uint256_Event {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DiamondABI extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondABI;
  waitForDeployment(): Promise<this>;

  interface: DiamondABIInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "allowance(address,address)": TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  "approve(address,uint256)": TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "balanceOf(address,uint256)": TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  "balanceOf(address)": TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "view"
  >;

  "burn(address,uint256)": TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "decimals()": TypedContractMethod<[], [bigint], "view">;

  "decreaseAllowance(address,uint256)": TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "feeRecipientAddress()": TypedContractMethod<[], [string], "view">;

  "increaseAllowance(address,uint256)": TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "maxSupply()": TypedContractMethod<[], [bigint], "view">;

  "mint(address,uint256)": TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "mint(string,bool,uint256)": TypedContractMethod<
    [_name: string, _isMale: boolean, _class: BigNumberish],
    [void],
    "payable"
  >;

  "minterRole()": TypedContractMethod<[], [string], "view">;

  "name()": TypedContractMethod<[], [string], "view">;

  "symbol()": TypedContractMethod<[], [string], "view">;

  "totalSupply()": TypedContractMethod<[], [bigint], "view">;

  "transfer(address,uint256)": TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "transferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "updateFeeRecipient(address)": TypedContractMethod<
    [recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  "updateMaxSupply(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "updateMinter(address)": TypedContractMethod<
    [minter: AddressLike],
    [void],
    "nonpayable"
  >;

  "diamondCut((address,uint8,bytes4[])[],address,bytes)": TypedContractMethod<
    [
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "owner()": TypedContractMethod<[], [string], "view">;

  "transferOwnership(address)": TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "extractTimestampsAndAssertAllAreEqual()": TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  "aggregateValues(uint256[])": TypedContractMethod<
    [values: BigNumberish[]],
    [bigint],
    "view"
  >;

  "getAuthorisedSignerIndex(address)": TypedContractMethod<
    [signerAddress: AddressLike],
    [bigint],
    "view"
  >;

  "getDataServiceId()": TypedContractMethod<[], [string], "view">;
  "getUniqueSignersThreshold()": TypedContractMethod<[], [bigint], "view">;

  "validateTimestamp(uint256)": TypedContractMethod<
    [receivedTimestampMilliseconds: BigNumberish],
    [void],
    "view"
  >;

  createBasicArena: TypedContractMethod<
    [_cost: BigNumberish, _cooldown: BigNumberish, _name: string, _uri: string],
    [void],
    "nonpayable"
  >;

  createHillArena: TypedContractMethod<
    [_cost: BigNumberish, _cooldown: BigNumberish, _name: string, _uri: string],
    [void],
    "nonpayable"
  >;

  enterBasicArena: TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  enterHillArena: TypedContractMethod<
    [_playerId: BigNumberish, _hillArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fightBaiscArena: TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fightHillArena: TypedContractMethod<
    [_playerId: BigNumberish, _hillArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  freeGold: TypedContractMethod<[], [void], "nonpayable">;

  getBasicArena: TypedContractMethod<
    [_basicArenaId: BigNumberish],
    [BasicArenaStructOutput],
    "view"
  >;

  getBasicArenaCooldowns: TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [bigint],
    "view"
  >;

  getBasicArenaCount: TypedContractMethod<[], [bigint], "view">;

  "getGoldBalance(address)": TypedContractMethod<
    [_address: AddressLike],
    [bigint],
    "view"
  >;

  getHillArena: TypedContractMethod<
    [_hillArenaId: BigNumberish],
    [HillArenaStructOutput],
    "view"
  >;

  getHillArenaCooldowns: TypedContractMethod<
    [_playerId: BigNumberish, _hillArenaId: BigNumberish],
    [bigint],
    "view"
  >;

  getHillArenaCount: TypedContractMethod<[], [bigint], "view">;

  getTotalLosses: TypedContractMethod<
    [_playerId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalWins: TypedContractMethod<
    [_playerId: BigNumberish],
    [bigint],
    "view"
  >;

  leaveBasicArena: TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  leaveHillArena: TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  advancedCraft: TypedContractMethod<
    [
      _playerId: BigNumberish,
      _advancedCraftId: BigNumberish,
      _equipmentId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  basicCraft: TypedContractMethod<
    [
      _playerId: BigNumberish,
      _equipmentId: BigNumberish,
      _craftId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createAdvancedCraft: TypedContractMethod<
    [
      _treasureSchemaId: BigNumberish,
      _slot: BigNumberish,
      _value: BigNumberish,
      _stat: BigNumberish,
      _amount: BigNumberish,
      _oldName: string,
      _newName: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  createBasicCraft: TypedContractMethod<
    [
      _equipmenSchematId: BigNumberish,
      _value: BigNumberish,
      _cost: BigNumberish,
      _newName: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  createBasicEquipment: TypedContractMethod<
    [
      _slot: BigNumberish,
      _value: BigNumberish,
      _stat: BigNumberish,
      _cost: BigNumberish,
      _supply: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  getAdvancedCraft: TypedContractMethod<
    [_advancedCraftId: BigNumberish],
    [AdvancedCraftStructOutput],
    "view"
  >;

  getAdvancedCraftCount: TypedContractMethod<[], [bigint], "view">;

  getBasicCraft: TypedContractMethod<
    [_basicCraftId: BigNumberish],
    [BasicCraftStructOutput],
    "view"
  >;

  getBasicCraftCount: TypedContractMethod<[], [bigint], "view">;

  getBasicEquipmentCount: TypedContractMethod<[], [bigint], "view">;

  getBasicEquipmentSchema: TypedContractMethod<
    [_basicEquipmentSchemaId: BigNumberish],
    [BasicEquipmentSchemaStructOutput],
    "view"
  >;

  getBasicEquipmentSupply: TypedContractMethod<
    [_basicEquipmentSchemaId: BigNumberish],
    [bigint],
    "view"
  >;

  getEquipment: TypedContractMethod<
    [_equipmentId: BigNumberish],
    [EquipmentStructOutput],
    "view"
  >;

  getPlayerToEquipment: TypedContractMethod<
    [_playerId: BigNumberish],
    [bigint[]],
    "view"
  >;

  purchaseBasicEquipment: TypedContractMethod<
    [_playerId: BigNumberish, _equipmentSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateBasicEquipmentScehma: TypedContractMethod<
    [
      _basicEquipmentSchemaId: BigNumberish,
      _slot: BigNumberish,
      _value: BigNumberish,
      _stat: BigNumberish,
      _cost: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  "facetAddress(bytes4)": TypedContractMethod<
    [_functionSelector: BytesLike],
    [string],
    "view"
  >;

  "facetAddresses()": TypedContractMethod<[], [string[]], "view">;

  "facetFunctionSelectors(address)": TypedContractMethod<
    [_facet: AddressLike],
    [string[]],
    "view"
  >;

  "facets()": TypedContractMethod<
    [],
    [IDiamondLoupe.FacetStructOutput[]],
    "view"
  >;

  "supportsInterface(bytes4)": TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  "getApproved(uint256)": TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  "isApprovedForAll(address,address)": TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  "ownerOf(uint256)": TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  "safeTransferFrom(address,address,uint256,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "setApprovalForAll(address,bool)": TypedContractMethod<
    [operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;

  "tokenURI(uint256)": TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  equip: TypedContractMethod<
    [_playerId: BigNumberish, _equipmentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unequip: TypedContractMethod<
    [_playerId: BigNumberish, _equipmentId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimGoldfromERC20: TypedContractMethod<
    [_facetAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  createPlayerListing: TypedContractMethod<
    [_playerId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  deListPlayer: TypedContractMethod<
    [_playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAllPlayerListings: TypedContractMethod<[], [bigint[]], "view">;

  getPlayerListing: TypedContractMethod<
    [_playerId: BigNumberish],
    [PlayerListingStructOutput],
    "view"
  >;

  getPlayerListingsByAddress: TypedContractMethod<
    [_address: AddressLike],
    [bigint[]],
    "view"
  >;

  mintGoldERC20: TypedContractMethod<
    [_facetAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owners: TypedContractMethod<[_playerId: BigNumberish], [string], "view">;

  purchasePlayer: TypedContractMethod<
    [_playerId: BigNumberish],
    [void],
    "payable"
  >;

  transferPlayer: TypedContractMethod<
    [_to: AddressLike, _playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  addMonsterAdmin: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  createBasicMonster: TypedContractMethod<
    [
      _xpReward: BigNumberish,
      _damage: BigNumberish,
      _hp: BigNumberish,
      _cooldown: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  createMagicMonster: TypedContractMethod<
    [
      _xpReward: BigNumberish,
      _damage: BigNumberish,
      _hp: BigNumberish,
      _cooldown: BigNumberish,
      _cost: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  editBasicMonster: TypedContractMethod<
    [
      _basicMonsterId: BigNumberish,
      _xpReward: BigNumberish,
      _damage: BigNumberish,
      _hp: BigNumberish,
      _cooldown: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  fightBasicMonster: TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fightMagicMonster: TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBasicMonster: TypedContractMethod<
    [_monsterId: BigNumberish],
    [BasicMonsterStructOutput],
    "view"
  >;

  getBasicMonsterCooldown: TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [bigint],
    "view"
  >;

  getBasicMonsterCounter: TypedContractMethod<[], [bigint], "view">;

  getMagicMonster: TypedContractMethod<
    [_monsterId: BigNumberish],
    [MagicMonsterStructOutput],
    "view"
  >;

  getMagicMonsterCooldown: TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [bigint],
    "view"
  >;

  getMagicMonsterCounter: TypedContractMethod<[], [bigint], "view">;

  stakeMonsterGoldBasic: TypedContractMethod<
    [_playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unstakeMonsterGoldBasic: TypedContractMethod<
    [_playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeNameFee: TypedContractMethod<
    [_id: BigNumberish, _newName: string],
    [void],
    "payable"
  >;

  claimPlayerDrop: TypedContractMethod<
    [
      _playerDropId: BigNumberish,
      _proof: BytesLike[],
      _name: string,
      _isMale: boolean,
      _class: BigNumberish
    ],
    [void],
    "payable"
  >;

  claimPlayerDropPaladin: TypedContractMethod<
    [
      _playerDropId: BigNumberish,
      _proof: BytesLike[],
      _name: string,
      _isMale: boolean
    ],
    [void],
    "payable"
  >;

  "claimedStatus(uint256,address)": TypedContractMethod<
    [_treasureDropId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;

  createPlayerDrop: TypedContractMethod<
    [_merkleRoot: BytesLike, _name: string, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPlayerDrop: TypedContractMethod<
    [_playerDropId: BigNumberish],
    [PlayerDropStructOutput],
    "view"
  >;

  getPlayerDropMerkleRoot: TypedContractMethod<
    [_playerDropId: BigNumberish],
    [string],
    "view"
  >;

  verifyPlayerDropWhitelist: TypedContractMethod<
    [_proof: BytesLike[], _playerDropId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;

  changeName: TypedContractMethod<
    [_id: BigNumberish, _newName: string],
    [void],
    "nonpayable"
  >;

  getBlocktime: TypedContractMethod<[], [bigint], "view">;

  getPlayer: TypedContractMethod<
    [_playerId: BigNumberish],
    [PlayerSlotLib.PlayerStructOutput],
    "view"
  >;

  getPlayers: TypedContractMethod<[_address: AddressLike], [bigint[]], "view">;

  levelUp: TypedContractMethod<
    [_playerId: BigNumberish, _stat: BigNumberish],
    [void],
    "nonpayable"
  >;

  nameAvailable: TypedContractMethod<[_name: string], [boolean], "view">;

  ownerOfPlayer: TypedContractMethod<
    [_playerId: BigNumberish],
    [string],
    "view"
  >;

  playerCount: TypedContractMethod<[], [bigint], "view">;

  createQuestGold: TypedContractMethod<
    [
      _reward: BigNumberish,
      _maxReward: BigNumberish,
      _level: BigNumberish,
      _damage: BigNumberish,
      _time: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  endQuestGem: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  endQuestGold: TypedContractMethod<
    [_playerId: BigNumberish, _goldQuestSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeMintTest: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCooldown: TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;

  getGemBalance: TypedContractMethod<[_address: AddressLike], [bigint], "view">;

  getGemStart: TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;

  getGold: TypedContractMethod<[], [void], "nonpayable">;

  getGoldQuest: TypedContractMethod<
    [_goldQuestId: BigNumberish],
    [GoldQuestSchemaStructOutput],
    "view"
  >;

  getGoldQuestCount: TypedContractMethod<[], [bigint], "view">;

  getGoldStart: TypedContractMethod<
    [_playerId: BigNumberish],
    [bigint],
    "view"
  >;

  startQuestGem: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  startQuestGold: TypedContractMethod<
    [_playerId: BigNumberish, _goldQuestSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  emitLevel: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  levelUpScript: TypedContractMethod<[], [void], "nonpayable">;

  consumeBasicHealthPotion: TypedContractMethod<
    [_playerId: BigNumberish, _basicPotionSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createBasicPotion: TypedContractMethod<
    [
      _value: BigNumberish,
      _cost: BigNumberish,
      _isHealth: boolean,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;

  getBaiscPotionCount: TypedContractMethod<
    [_playerId: BigNumberish, _basicPotionSchemaId: BigNumberish],
    [bigint],
    "view"
  >;

  getBasicPotion: TypedContractMethod<
    [_basicPotionSchemaId: BigNumberish],
    [BasicPotionSchemaStructOutput],
    "view"
  >;

  getBasicPotionSchemaCount: TypedContractMethod<[], [bigint], "view">;

  purchaseBasicPotion: TypedContractMethod<
    [_playerId: BigNumberish, _basicPotionSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  endTrainingBasicHealth: TypedContractMethod<
    [_playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  endTrainingMana: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getHealthStart: TypedContractMethod<
    [_playerId: BigNumberish],
    [bigint],
    "view"
  >;

  getManaStart: TypedContractMethod<
    [_playerId: BigNumberish],
    [bigint],
    "view"
  >;

  startTrainingBasicHealth: TypedContractMethod<
    [_playerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  startTrainingMana: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimTreasureDropGravityOrb: TypedContractMethod<
    [
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimTreasureDropKyberShard: TypedContractMethod<
    [
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  createTreasureDrop: TypedContractMethod<
    [_merkleRoot: BytesLike, _name: string],
    [void],
    "nonpayable"
  >;

  getTreasureDropMerkleRoot: TypedContractMethod<
    [_treasureDropId: BigNumberish],
    [string],
    "view"
  >;

  verifyTreasureDropWhitelist: TypedContractMethod<
    [_proof: BytesLike[], _treasureDropId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;

  createTreasureSchema: TypedContractMethod<
    [_rank: BigNumberish, _name: string, _uri: string],
    [void],
    "nonpayable"
  >;

  getTreasurePlayer: TypedContractMethod<
    [_playerId: BigNumberish, _treasureId: BigNumberish],
    [bigint],
    "view"
  >;

  getTreasureSchema: TypedContractMethod<
    [_treasureSchemaId: BigNumberish],
    [TreasureSchemaStructOutput],
    "view"
  >;

  getTreasureSchemaCounter: TypedContractMethod<[], [bigint], "view">;

  mintTreasure: TypedContractMethod<
    [_playerId: BigNumberish, _treasureSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "balanceOfBatch(address[],uint256[])": TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[id: BigNumberish], [string], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC721Received: TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  currentVersion: TypedContractMethod<[], [bigint], "view">;

  iSend: TypedContractMethod<
    [
      version: BigNumberish,
      routeAmount: BigNumberish,
      routeRecipient: string,
      destChainId: string,
      requestMetadata: BytesLike,
      requestPacket: BytesLike
    ],
    [bigint],
    "payable"
  >;

  setDappMetadata: TypedContractMethod<
    [feePayerAddress: string],
    [bigint],
    "payable"
  >;

  init: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance(address,address)"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance(address,address)"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance(address,address)"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance(address,address)"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "allowance(address,address)"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeRecipientAddress()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeRecipientAddress()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeRecipientAddress()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeRecipientAddress()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance(address,uint256)"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maxSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint(address,uint256)"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint(string,bool,uint256)"
  ): TypedContractMethod<
    [_name: string, _isMale: boolean, _class: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "minterRole()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minterRole()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minterRole()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minterRole()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer(address,uint256)"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer(address,uint256)"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer(address,uint256)"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer(address,uint256)"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer(address,uint256)"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFeeRecipient(address)"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRecipient(address)"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRecipient(address)"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRecipient(address)"
  ): TypedContractMethod<[recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxSupply(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxSupply(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxSupply(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaxSupply(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinter(address)"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinter(address)"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinter(address)"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinter(address)"
  ): TypedContractMethod<[minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "diamondCut((address,uint8,bytes4[])[],address,bytes)"
  ): TypedContractMethod<
    [
      _diamondCut: IDiamondCut.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "diamondCut((address,uint8,bytes4[])[],address,bytes)"
  ): TypedContractMethod<
    [
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "diamondCut((address,uint8,bytes4[])[],address,bytes)"
  ): TypedContractMethod<
    [
      _diamondCut: IDiamond.FacetCutStruct[],
      _init: AddressLike,
      _calldata: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership(address)"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "extractTimestampsAndAssertAllAreEqual()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extractTimestampsAndAssertAllAreEqual()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extractTimestampsAndAssertAllAreEqual()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "extractTimestampsAndAssertAllAreEqual()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "aggregateValues(uint256[])"
  ): TypedContractMethod<[values: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "aggregateValues(uint256[])"
  ): TypedContractMethod<[values: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "aggregateValues(uint256[])"
  ): TypedContractMethod<[values: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuthorisedSignerIndex(address)"
  ): TypedContractMethod<[receivedSigner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuthorisedSignerIndex(address)"
  ): TypedContractMethod<[receivedSigner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAuthorisedSignerIndex(address)"
  ): TypedContractMethod<[signerAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDataServiceId()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDataServiceId()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDataServiceId()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUniqueSignersThreshold()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUniqueSignersThreshold()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUniqueSignersThreshold()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validateTimestamp(uint256)"
  ): TypedContractMethod<
    [receivedTimestampMilliseconds: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateTimestamp(uint256)"
  ): TypedContractMethod<
    [receivedTimestampMilliseconds: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateTimestamp(uint256)"
  ): TypedContractMethod<
    [receivedTimestampMilliseconds: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBasicArena"
  ): TypedContractMethod<
    [_cost: BigNumberish, _cooldown: BigNumberish, _name: string, _uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createHillArena"
  ): TypedContractMethod<
    [_cost: BigNumberish, _cooldown: BigNumberish, _name: string, _uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enterBasicArena"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enterHillArena"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _hillArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fightBaiscArena"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fightHillArena"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _hillArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "freeGold"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBasicArena"
  ): TypedContractMethod<
    [_basicArenaId: BigNumberish],
    [BasicArenaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicArenaCooldowns"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicArenaCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGoldBalance(address)"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGoldBalance(address)"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHillArena"
  ): TypedContractMethod<
    [_hillArenaId: BigNumberish],
    [HillArenaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHillArenaCooldowns"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _hillArenaId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHillArenaCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalLosses"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalWins"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "leaveBasicArena"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leaveHillArena"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicArenaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "advancedCraft"
  ): TypedContractMethod<
    [
      _playerId: BigNumberish,
      _advancedCraftId: BigNumberish,
      _equipmentId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "basicCraft"
  ): TypedContractMethod<
    [
      _playerId: BigNumberish,
      _equipmentId: BigNumberish,
      _craftId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createAdvancedCraft"
  ): TypedContractMethod<
    [
      _treasureSchemaId: BigNumberish,
      _slot: BigNumberish,
      _value: BigNumberish,
      _stat: BigNumberish,
      _amount: BigNumberish,
      _oldName: string,
      _newName: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBasicCraft"
  ): TypedContractMethod<
    [
      _equipmenSchematId: BigNumberish,
      _value: BigNumberish,
      _cost: BigNumberish,
      _newName: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBasicEquipment"
  ): TypedContractMethod<
    [
      _slot: BigNumberish,
      _value: BigNumberish,
      _stat: BigNumberish,
      _cost: BigNumberish,
      _supply: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAdvancedCraft"
  ): TypedContractMethod<
    [_advancedCraftId: BigNumberish],
    [AdvancedCraftStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdvancedCraftCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBasicCraft"
  ): TypedContractMethod<
    [_basicCraftId: BigNumberish],
    [BasicCraftStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicCraftCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBasicEquipmentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBasicEquipmentSchema"
  ): TypedContractMethod<
    [_basicEquipmentSchemaId: BigNumberish],
    [BasicEquipmentSchemaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicEquipmentSupply"
  ): TypedContractMethod<
    [_basicEquipmentSchemaId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEquipment"
  ): TypedContractMethod<
    [_equipmentId: BigNumberish],
    [EquipmentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerToEquipment"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "purchaseBasicEquipment"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _equipmentSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBasicEquipmentScehma"
  ): TypedContractMethod<
    [
      _basicEquipmentSchemaId: BigNumberish,
      _slot: BigNumberish,
      _value: BigNumberish,
      _stat: BigNumberish,
      _cost: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "facetAddress(bytes4)"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddress(bytes4)"
  ): TypedContractMethod<[_functionSelector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "facetAddresses()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetAddresses()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors(address)"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facetFunctionSelectors(address)"
  ): TypedContractMethod<[_facet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "facets()"
  ): TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "facets()"
  ): TypedContractMethod<[], [IDiamondLoupe.FacetStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[_interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "supportsInterface(bytes4)"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getApproved(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll(address,address)"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll(address,address)"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll(address,address)"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll(address,address)"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll(address,address)"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll(address,bool)"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll(address,bool)"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll(address,bool)"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll(address,bool)"
  ): TypedContractMethod<
    [operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll(address,bool)"
  ): TypedContractMethod<
    [operator: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tokenURI(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI(uint256)"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "equip"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _equipmentId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unequip"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _equipmentId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimGoldfromERC20"
  ): TypedContractMethod<
    [_facetAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPlayerListing"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deListPlayer"
  ): TypedContractMethod<[_playerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllPlayerListings"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPlayerListing"
  ): TypedContractMethod<
    [_playerId: BigNumberish],
    [PlayerListingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerListingsByAddress"
  ): TypedContractMethod<[_address: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "mintGoldERC20"
  ): TypedContractMethod<
    [_facetAddress: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[_playerId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "purchasePlayer"
  ): TypedContractMethod<[_playerId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "transferPlayer"
  ): TypedContractMethod<
    [_to: AddressLike, _playerId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addMonsterAdmin"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createBasicMonster"
  ): TypedContractMethod<
    [
      _xpReward: BigNumberish,
      _damage: BigNumberish,
      _hp: BigNumberish,
      _cooldown: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMagicMonster"
  ): TypedContractMethod<
    [
      _xpReward: BigNumberish,
      _damage: BigNumberish,
      _hp: BigNumberish,
      _cooldown: BigNumberish,
      _cost: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editBasicMonster"
  ): TypedContractMethod<
    [
      _basicMonsterId: BigNumberish,
      _xpReward: BigNumberish,
      _damage: BigNumberish,
      _hp: BigNumberish,
      _cooldown: BigNumberish,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fightBasicMonster"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fightMagicMonster"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBasicMonster"
  ): TypedContractMethod<
    [_monsterId: BigNumberish],
    [BasicMonsterStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicMonsterCooldown"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicMonsterCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMagicMonster"
  ): TypedContractMethod<
    [_monsterId: BigNumberish],
    [MagicMonsterStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMagicMonsterCooldown"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _monsterId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMagicMonsterCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeMonsterGoldBasic"
  ): TypedContractMethod<[_playerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstakeMonsterGoldBasic"
  ): TypedContractMethod<[_playerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeNameFee"
  ): TypedContractMethod<
    [_id: BigNumberish, _newName: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimPlayerDrop"
  ): TypedContractMethod<
    [
      _playerDropId: BigNumberish,
      _proof: BytesLike[],
      _name: string,
      _isMale: boolean,
      _class: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimPlayerDropPaladin"
  ): TypedContractMethod<
    [
      _playerDropId: BigNumberish,
      _proof: BytesLike[],
      _name: string,
      _isMale: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "claimedStatus(uint256,address)"
  ): TypedContractMethod<
    [_playerDropId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimedStatus(uint256,address)"
  ): TypedContractMethod<
    [_treasureDropId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createPlayerDrop"
  ): TypedContractMethod<
    [_merkleRoot: BytesLike, _name: string, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPlayerDrop"
  ): TypedContractMethod<
    [_playerDropId: BigNumberish],
    [PlayerDropStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayerDropMerkleRoot"
  ): TypedContractMethod<[_playerDropId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyPlayerDropWhitelist"
  ): TypedContractMethod<
    [_proof: BytesLike[], _playerDropId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeName"
  ): TypedContractMethod<
    [_id: BigNumberish, _newName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBlocktime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [_playerId: BigNumberish],
    [PlayerSlotLib.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[_address: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "levelUp"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _stat: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nameAvailable"
  ): TypedContractMethod<[_name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "ownerOfPlayer"
  ): TypedContractMethod<[_playerId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "playerCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createQuestGold"
  ): TypedContractMethod<
    [
      _reward: BigNumberish,
      _maxReward: BigNumberish,
      _level: BigNumberish,
      _damage: BigNumberish,
      _time: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endQuestGem"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endQuestGold"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _goldQuestSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeMintTest"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCooldown"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGemBalance"
  ): TypedContractMethod<[_address: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGemStart"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGold"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGoldQuest"
  ): TypedContractMethod<
    [_goldQuestId: BigNumberish],
    [GoldQuestSchemaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGoldQuestCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGoldStart"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "startQuestGem"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startQuestGold"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _goldQuestSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitLevel"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "levelUpScript"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "consumeBasicHealthPotion"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicPotionSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBasicPotion"
  ): TypedContractMethod<
    [
      _value: BigNumberish,
      _cost: BigNumberish,
      _isHealth: boolean,
      _name: string,
      _uri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBaiscPotionCount"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicPotionSchemaId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicPotion"
  ): TypedContractMethod<
    [_basicPotionSchemaId: BigNumberish],
    [BasicPotionSchemaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBasicPotionSchemaCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseBasicPotion"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _basicPotionSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endTrainingBasicHealth"
  ): TypedContractMethod<[_playerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "endTrainingMana"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getHealthStart"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getManaStart"
  ): TypedContractMethod<[_playerId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "startTrainingBasicHealth"
  ): TypedContractMethod<[_playerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startTrainingMana"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTreasureDropGravityOrb"
  ): TypedContractMethod<
    [
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimTreasureDropKyberShard"
  ): TypedContractMethod<
    [
      _treasureDropId: BigNumberish,
      _proof: BytesLike[],
      _playerId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTreasureDrop"
  ): TypedContractMethod<
    [_merkleRoot: BytesLike, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTreasureDropMerkleRoot"
  ): TypedContractMethod<[_treasureDropId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "verifyTreasureDropWhitelist"
  ): TypedContractMethod<
    [_proof: BytesLike[], _treasureDropId: BigNumberish, _address: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createTreasureSchema"
  ): TypedContractMethod<
    [_rank: BigNumberish, _name: string, _uri: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTreasurePlayer"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _treasureId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTreasureSchema"
  ): TypedContractMethod<
    [_treasureSchemaId: BigNumberish],
    [TreasureSchemaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTreasureSchemaCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintTreasure"
  ): TypedContractMethod<
    [_playerId: BigNumberish, _treasureSchemaId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch(address[],uint256[])"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch(address[],uint256[])"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      from: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "iSend"
  ): TypedContractMethod<
    [
      version: BigNumberish,
      routeAmount: BigNumberish,
      routeRecipient: string,
      destChainId: string,
      requestMetadata: BytesLike,
      requestPacket: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setDappMetadata"
  ): TypedContractMethod<[feePayerAddress: string], [bigint], "payable">;
  getFunction(
    nameOrSignature: "init"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Approval(address,address,uint256)"
  ): TypedContractEvent<
    Approval_address_address_uint256_Event.InputTuple,
    Approval_address_address_uint256_Event.OutputTuple,
    Approval_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Transfer(address,address,uint256)"
  ): TypedContractEvent<
    Transfer_address_address_uint256_Event.InputTuple,
    Transfer_address_address_uint256_Event.OutputTuple,
    Transfer_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "DiamondCut(tuple[],address,bytes)"
  ): TypedContractEvent<
    DiamondCut_tuple_array_address_bytes_Event.InputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputObject
  >;
  getEvent(
    key: "DiamondCut(tuple[],address,bytes)"
  ): TypedContractEvent<
    DiamondCut_tuple_array_address_bytes_Event.InputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputObject
  >;
  getEvent(
    key: "DiamondCut(tuple[],address,bytes)"
  ): TypedContractEvent<
    DiamondCut_tuple_array_address_bytes_Event.InputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputObject
  >;
  getEvent(
    key: "DiamondCut(tuple[],address,bytes)"
  ): TypedContractEvent<
    DiamondCut_tuple_array_address_bytes_Event.InputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputObject
  >;
  getEvent(
    key: "DiamondCut(tuple[],address,bytes)"
  ): TypedContractEvent<
    DiamondCut_tuple_array_address_bytes_Event.InputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputObject
  >;
  getEvent(
    key: "DiamondCut(tuple[],address,bytes)"
  ): TypedContractEvent<
    DiamondCut_tuple_array_address_bytes_Event.InputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
    DiamondCut_tuple_array_address_bytes_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred(address,address)"
  ): TypedContractEvent<
    OwnershipTransferred_address_address_Event.InputTuple,
    OwnershipTransferred_address_address_Event.OutputTuple,
    OwnershipTransferred_address_address_Event.OutputObject
  >;
  getEvent(
    key: "BasicArenaLoss"
  ): TypedContractEvent<
    BasicArenaLossEvent.InputTuple,
    BasicArenaLossEvent.OutputTuple,
    BasicArenaLossEvent.OutputObject
  >;
  getEvent(
    key: "BasicArenaWin"
  ): TypedContractEvent<
    BasicArenaWinEvent.InputTuple,
    BasicArenaWinEvent.OutputTuple,
    BasicArenaWinEvent.OutputObject
  >;
  getEvent(
    key: "CreateBasicArena"
  ): TypedContractEvent<
    CreateBasicArenaEvent.InputTuple,
    CreateBasicArenaEvent.OutputTuple,
    CreateBasicArenaEvent.OutputObject
  >;
  getEvent(
    key: "CreateHillArena"
  ): TypedContractEvent<
    CreateHillArenaEvent.InputTuple,
    CreateHillArenaEvent.OutputTuple,
    CreateHillArenaEvent.OutputObject
  >;
  getEvent(
    key: "EnterBasicArena"
  ): TypedContractEvent<
    EnterBasicArenaEvent.InputTuple,
    EnterBasicArenaEvent.OutputTuple,
    EnterBasicArenaEvent.OutputObject
  >;
  getEvent(
    key: "EnterHillArena"
  ): TypedContractEvent<
    EnterHillArenaEvent.InputTuple,
    EnterHillArenaEvent.OutputTuple,
    EnterHillArenaEvent.OutputObject
  >;
  getEvent(
    key: "LeaveBasicArena"
  ): TypedContractEvent<
    LeaveBasicArenaEvent.InputTuple,
    LeaveBasicArenaEvent.OutputTuple,
    LeaveBasicArenaEvent.OutputObject
  >;
  getEvent(
    key: "AdvancedCraftEvent"
  ): TypedContractEvent<
    AdvancedCraftEventEvent.InputTuple,
    AdvancedCraftEventEvent.OutputTuple,
    AdvancedCraftEventEvent.OutputObject
  >;
  getEvent(
    key: "BasicCraftEvent"
  ): TypedContractEvent<
    BasicCraftEventEvent.InputTuple,
    BasicCraftEventEvent.OutputTuple,
    BasicCraftEventEvent.OutputObject
  >;
  getEvent(
    key: "BasicEquipmentSchemaCreated"
  ): TypedContractEvent<
    BasicEquipmentSchemaCreatedEvent.InputTuple,
    BasicEquipmentSchemaCreatedEvent.OutputTuple,
    BasicEquipmentSchemaCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BasicEquipmentSchemaUpdate"
  ): TypedContractEvent<
    BasicEquipmentSchemaUpdateEvent.InputTuple,
    BasicEquipmentSchemaUpdateEvent.OutputTuple,
    BasicEquipmentSchemaUpdateEvent.OutputObject
  >;
  getEvent(
    key: "CreateAdvancedCraft"
  ): TypedContractEvent<
    CreateAdvancedCraftEvent.InputTuple,
    CreateAdvancedCraftEvent.OutputTuple,
    CreateAdvancedCraftEvent.OutputObject
  >;
  getEvent(
    key: "CreateBasicCraft"
  ): TypedContractEvent<
    CreateBasicCraftEvent.InputTuple,
    CreateBasicCraftEvent.OutputTuple,
    CreateBasicCraftEvent.OutputObject
  >;
  getEvent(
    key: "PurchaseBasicEquipment"
  ): TypedContractEvent<
    PurchaseBasicEquipmentEvent.InputTuple,
    PurchaseBasicEquipmentEvent.OutputTuple,
    PurchaseBasicEquipmentEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll(address,address,bool)"
  ): TypedContractEvent<
    ApprovalForAll_address_address_bool_Event.InputTuple,
    ApprovalForAll_address_address_bool_Event.OutputTuple,
    ApprovalForAll_address_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "ItemEquiped"
  ): TypedContractEvent<
    ItemEquipedEvent.InputTuple,
    ItemEquipedEvent.OutputTuple,
    ItemEquipedEvent.OutputObject
  >;
  getEvent(
    key: "ItemUnequiped"
  ): TypedContractEvent<
    ItemUnequipedEvent.InputTuple,
    ItemUnequipedEvent.OutputTuple,
    ItemUnequipedEvent.OutputObject
  >;
  getEvent(
    key: "CreateEquipmentListing"
  ): TypedContractEvent<
    CreateEquipmentListingEvent.InputTuple,
    CreateEquipmentListingEvent.OutputTuple,
    CreateEquipmentListingEvent.OutputObject
  >;
  getEvent(
    key: "CreatePlayerListing"
  ): TypedContractEvent<
    CreatePlayerListingEvent.InputTuple,
    CreatePlayerListingEvent.OutputTuple,
    CreatePlayerListingEvent.OutputObject
  >;
  getEvent(
    key: "DelistPlayer"
  ): TypedContractEvent<
    DelistPlayerEvent.InputTuple,
    DelistPlayerEvent.OutputTuple,
    DelistPlayerEvent.OutputObject
  >;
  getEvent(
    key: "PurchaseEquipmentLisitng"
  ): TypedContractEvent<
    PurchaseEquipmentLisitngEvent.InputTuple,
    PurchaseEquipmentLisitngEvent.OutputTuple,
    PurchaseEquipmentLisitngEvent.OutputObject
  >;
  getEvent(
    key: "PurchasePlayerListing"
  ): TypedContractEvent<
    PurchasePlayerListingEvent.InputTuple,
    PurchasePlayerListingEvent.OutputTuple,
    PurchasePlayerListingEvent.OutputObject
  >;
  getEvent(
    key: "AddMonsterAdmin"
  ): TypedContractEvent<
    AddMonsterAdminEvent.InputTuple,
    AddMonsterAdminEvent.OutputTuple,
    AddMonsterAdminEvent.OutputObject
  >;
  getEvent(
    key: "CreateBasicMonster"
  ): TypedContractEvent<
    CreateBasicMonsterEvent.InputTuple,
    CreateBasicMonsterEvent.OutputTuple,
    CreateBasicMonsterEvent.OutputObject
  >;
  getEvent(
    key: "CreateMagicMonster"
  ): TypedContractEvent<
    CreateMagicMonsterEvent.InputTuple,
    CreateMagicMonsterEvent.OutputTuple,
    CreateMagicMonsterEvent.OutputObject
  >;
  getEvent(
    key: "DragonQuest"
  ): TypedContractEvent<
    DragonQuestEvent.InputTuple,
    DragonQuestEvent.OutputTuple,
    DragonQuestEvent.OutputObject
  >;
  getEvent(
    key: "EditBasicMonster"
  ): TypedContractEvent<
    EditBasicMonsterEvent.InputTuple,
    EditBasicMonsterEvent.OutputTuple,
    EditBasicMonsterEvent.OutputObject
  >;
  getEvent(
    key: "FightBasicMonster"
  ): TypedContractEvent<
    FightBasicMonsterEvent.InputTuple,
    FightBasicMonsterEvent.OutputTuple,
    FightBasicMonsterEvent.OutputObject
  >;
  getEvent(
    key: "FightMagicMonster"
  ): TypedContractEvent<
    FightMagicMonsterEvent.InputTuple,
    FightMagicMonsterEvent.OutputTuple,
    FightMagicMonsterEvent.OutputObject
  >;
  getEvent(
    key: "ClaimPlayer"
  ): TypedContractEvent<
    ClaimPlayerEvent.InputTuple,
    ClaimPlayerEvent.OutputTuple,
    ClaimPlayerEvent.OutputObject
  >;
  getEvent(
    key: "Mint(uint256,address,string,uint256)"
  ): TypedContractEvent<
    Mint_uint256_address_string_uint256_Event.InputTuple,
    Mint_uint256_address_string_uint256_Event.OutputTuple,
    Mint_uint256_address_string_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Mint(uint256,address,string,uint256)"
  ): TypedContractEvent<
    Mint_uint256_address_string_uint256_Event.InputTuple,
    Mint_uint256_address_string_uint256_Event.OutputTuple,
    Mint_uint256_address_string_uint256_Event.OutputObject
  >;
  getEvent(
    key: "NameChange(address,uint256,string)"
  ): TypedContractEvent<
    NameChange_address_uint256_string_Event.InputTuple,
    NameChange_address_uint256_string_Event.OutputTuple,
    NameChange_address_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "NameChange(address,uint256,string)"
  ): TypedContractEvent<
    NameChange_address_uint256_string_Event.InputTuple,
    NameChange_address_uint256_string_Event.OutputTuple,
    NameChange_address_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "LevelUp"
  ): TypedContractEvent<
    LevelUpEvent.InputTuple,
    LevelUpEvent.OutputTuple,
    LevelUpEvent.OutputObject
  >;
  getEvent(
    key: "BeginGoldQuest"
  ): TypedContractEvent<
    BeginGoldQuestEvent.InputTuple,
    BeginGoldQuestEvent.OutputTuple,
    BeginGoldQuestEvent.OutputObject
  >;
  getEvent(
    key: "BeginQuesting"
  ): TypedContractEvent<
    BeginQuestingEvent.InputTuple,
    BeginQuestingEvent.OutputTuple,
    BeginQuestingEvent.OutputObject
  >;
  getEvent(
    key: "CreateGoldQuest"
  ): TypedContractEvent<
    CreateGoldQuestEvent.InputTuple,
    CreateGoldQuestEvent.OutputTuple,
    CreateGoldQuestEvent.OutputObject
  >;
  getEvent(
    key: "EndGoldQuest"
  ): TypedContractEvent<
    EndGoldQuestEvent.InputTuple,
    EndGoldQuestEvent.OutputTuple,
    EndGoldQuestEvent.OutputObject
  >;
  getEvent(
    key: "TrustedSignerChanged(address)"
  ): TypedContractEvent<
    TrustedSignerChanged_address_Event.InputTuple,
    TrustedSignerChanged_address_Event.OutputTuple,
    TrustedSignerChanged_address_Event.OutputObject
  >;
  getEvent(
    key: "TrustedSignerChanged(address)"
  ): TypedContractEvent<
    TrustedSignerChanged_address_Event.InputTuple,
    TrustedSignerChanged_address_Event.OutputTuple,
    TrustedSignerChanged_address_Event.OutputObject
  >;
  getEvent(
    key: "LevelUpPatch"
  ): TypedContractEvent<
    LevelUpPatchEvent.InputTuple,
    LevelUpPatchEvent.OutputTuple,
    LevelUpPatchEvent.OutputObject
  >;
  getEvent(
    key: "ConsumeBasicPotion"
  ): TypedContractEvent<
    ConsumeBasicPotionEvent.InputTuple,
    ConsumeBasicPotionEvent.OutputTuple,
    ConsumeBasicPotionEvent.OutputObject
  >;
  getEvent(
    key: "CreateBasicPotion"
  ): TypedContractEvent<
    CreateBasicPotionEvent.InputTuple,
    CreateBasicPotionEvent.OutputTuple,
    CreateBasicPotionEvent.OutputObject
  >;
  getEvent(
    key: "PurchaseBasicPotion"
  ): TypedContractEvent<
    PurchaseBasicPotionEvent.InputTuple,
    PurchaseBasicPotionEvent.OutputTuple,
    PurchaseBasicPotionEvent.OutputObject
  >;
  getEvent(
    key: "BeginTrainingBasicHealth"
  ): TypedContractEvent<
    BeginTrainingBasicHealthEvent.InputTuple,
    BeginTrainingBasicHealthEvent.OutputTuple,
    BeginTrainingBasicHealthEvent.OutputObject
  >;
  getEvent(
    key: "BeginTrainingMana"
  ): TypedContractEvent<
    BeginTrainingManaEvent.InputTuple,
    BeginTrainingManaEvent.OutputTuple,
    BeginTrainingManaEvent.OutputObject
  >;
  getEvent(
    key: "EndTrainingBasicHealth"
  ): TypedContractEvent<
    EndTrainingBasicHealthEvent.InputTuple,
    EndTrainingBasicHealthEvent.OutputTuple,
    EndTrainingBasicHealthEvent.OutputObject
  >;
  getEvent(
    key: "EndTrainingMana"
  ): TypedContractEvent<
    EndTrainingManaEvent.InputTuple,
    EndTrainingManaEvent.OutputTuple,
    EndTrainingManaEvent.OutputObject
  >;
  getEvent(
    key: "ClaimTreasure"
  ): TypedContractEvent<
    ClaimTreasureEvent.InputTuple,
    ClaimTreasureEvent.OutputTuple,
    ClaimTreasureEvent.OutputObject
  >;
  getEvent(
    key: "CreateTreasureDrop"
  ): TypedContractEvent<
    CreateTreasureDropEvent.InputTuple,
    CreateTreasureDropEvent.OutputTuple,
    CreateTreasureDropEvent.OutputObject
  >;
  getEvent(
    key: "MintTreasure"
  ): TypedContractEvent<
    MintTreasureEvent.InputTuple,
    MintTreasureEvent.OutputTuple,
    MintTreasureEvent.OutputObject
  >;
  getEvent(
    key: "TreasureSchemaCreation"
  ): TypedContractEvent<
    TreasureSchemaCreationEvent.InputTuple,
    TreasureSchemaCreationEvent.OutputTuple,
    TreasureSchemaCreationEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): TypedContractEvent<
    TransferBatch_address_address_address_uint256_array_uint256_array_Event.InputTuple,
    TransferBatch_address_address_address_uint256_array_uint256_array_Event.OutputTuple,
    TransferBatch_address_address_address_uint256_array_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "TransferBatch(address,address,address,uint256[],uint256[])"
  ): TypedContractEvent<
    TransferBatch_address_address_address_uint256_array_uint256_array_Event.InputTuple,
    TransferBatch_address_address_address_uint256_array_uint256_array_Event.OutputTuple,
    TransferBatch_address_address_address_uint256_array_uint256_array_Event.OutputObject
  >;
  getEvent(
    key: "TransferSingle(address,address,address,uint256,uint256)"
  ): TypedContractEvent<
    TransferSingle_address_address_address_uint256_uint256_Event.InputTuple,
    TransferSingle_address_address_address_uint256_uint256_Event.OutputTuple,
    TransferSingle_address_address_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "TransferSingle(address,address,address,uint256,uint256)"
  ): TypedContractEvent<
    TransferSingle_address_address_address_uint256_uint256_Event.InputTuple,
    TransferSingle_address_address_address_uint256_uint256_Event.OutputTuple,
    TransferSingle_address_address_address_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "URI(string,uint256)"
  ): TypedContractEvent<
    URI_string_uint256_Event.InputTuple,
    URI_string_uint256_Event.OutputTuple,
    URI_string_uint256_Event.OutputObject
  >;
  getEvent(
    key: "URI(string,uint256)"
  ): TypedContractEvent<
    URI_string_uint256_Event.InputTuple,
    URI_string_uint256_Event.OutputTuple,
    URI_string_uint256_Event.OutputObject
  >;

  // filters: {
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Approval(address,address,uint256)": TypedContractEvent<
  //     Approval_address_address_uint256_Event.InputTuple,
  //     Approval_address_address_uint256_Event.OutputTuple,
  //     Approval_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "Transfer(address,address,uint256)": TypedContractEvent<
  //     Transfer_address_address_uint256_Event.InputTuple,
  //     Transfer_address_address_uint256_Event.OutputTuple,
  //     Transfer_address_address_uint256_Event.OutputObject
  //   >;
  //   "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
  //     DiamondCut_tuple_array_address_bytes_Event.InputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputObject
  //   >;
  //   "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
  //     DiamondCut_tuple_array_address_bytes_Event.InputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputObject
  //   >;
  //   "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
  //     DiamondCut_tuple_array_address_bytes_Event.InputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputObject
  //   >;
  //   "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
  //     DiamondCut_tuple_array_address_bytes_Event.InputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputObject
  //   >;
  //   "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
  //     DiamondCut_tuple_array_address_bytes_Event.InputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputObject
  //   >;
  //   "DiamondCut(tuple[],address,bytes)": TypedContractEvent<
  //     DiamondCut_tuple_array_address_bytes_Event.InputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputTuple,
  //     DiamondCut_tuple_array_address_bytes_Event.OutputObject
  //   >;
  //   "OwnershipTransferred(address,address)": TypedContractEvent<
  //     OwnershipTransferred_address_address_Event.InputTuple,
  //     OwnershipTransferred_address_address_Event.OutputTuple,
  //     OwnershipTransferred_address_address_Event.OutputObject
  //   >;
  //   "OwnershipTransferred(address,address)": TypedContractEvent<
  //     OwnershipTransferred_address_address_Event.InputTuple,
  //     OwnershipTransferred_address_address_Event.OutputTuple,
  //     OwnershipTransferred_address_address_Event.OutputObject
  //   >;
  //   "OwnershipTransferred(address,address)": TypedContractEvent<
  //     OwnershipTransferred_address_address_Event.InputTuple,
  //     OwnershipTransferred_address_address_Event.OutputTuple,
  //     OwnershipTransferred_address_address_Event.OutputObject
  //   >;
  //   "OwnershipTransferred(address,address)": TypedContractEvent<
  //     OwnershipTransferred_address_address_Event.InputTuple,
  //     OwnershipTransferred_address_address_Event.OutputTuple,
  //     OwnershipTransferred_address_address_Event.OutputObject
  //   >;
  //   "OwnershipTransferred(address,address)": TypedContractEvent<
  //     OwnershipTransferred_address_address_Event.InputTuple,
  //     OwnershipTransferred_address_address_Event.OutputTuple,
  //     OwnershipTransferred_address_address_Event.OutputObject
  //   >;
  //   "OwnershipTransferred(address,address)": TypedContractEvent<
  //     OwnershipTransferred_address_address_Event.InputTuple,
  //     OwnershipTransferred_address_address_Event.OutputTuple,
  //     OwnershipTransferred_address_address_Event.OutputObject
  //   >;
  //   "OwnershipTransferred(address,address)": TypedContractEvent<
  //     OwnershipTransferred_address_address_Event.InputTuple,
  //     OwnershipTransferred_address_address_Event.OutputTuple,
  //     OwnershipTransferred_address_address_Event.OutputObject
  //   >;

  //   "BasicArenaLoss(uint256,uint256)": TypedContractEvent<
  //     BasicArenaLossEvent.InputTuple,
  //     BasicArenaLossEvent.OutputTuple,
  //     BasicArenaLossEvent.OutputObject
  //   >;
  //   BasicArenaLoss: TypedContractEvent<
  //     BasicArenaLossEvent.InputTuple,
  //     BasicArenaLossEvent.OutputTuple,
  //     BasicArenaLossEvent.OutputObject
  //   >;

  //   "BasicArenaWin(uint256,uint256)": TypedContractEvent<
  //     BasicArenaWinEvent.InputTuple,
  //     BasicArenaWinEvent.OutputTuple,
  //     BasicArenaWinEvent.OutputObject
  //   >;
  //   BasicArenaWin: TypedContractEvent<
  //     BasicArenaWinEvent.InputTuple,
  //     BasicArenaWinEvent.OutputTuple,
  //     BasicArenaWinEvent.OutputObject
  //   >;

  //   "CreateBasicArena(uint256,tuple)": TypedContractEvent<
  //     CreateBasicArenaEvent.InputTuple,
  //     CreateBasicArenaEvent.OutputTuple,
  //     CreateBasicArenaEvent.OutputObject
  //   >;
  //   CreateBasicArena: TypedContractEvent<
  //     CreateBasicArenaEvent.InputTuple,
  //     CreateBasicArenaEvent.OutputTuple,
  //     CreateBasicArenaEvent.OutputObject
  //   >;

  //   "CreateHillArena(uint256,tuple)": TypedContractEvent<
  //     CreateHillArenaEvent.InputTuple,
  //     CreateHillArenaEvent.OutputTuple,
  //     CreateHillArenaEvent.OutputObject
  //   >;
  //   CreateHillArena: TypedContractEvent<
  //     CreateHillArenaEvent.InputTuple,
  //     CreateHillArenaEvent.OutputTuple,
  //     CreateHillArenaEvent.OutputObject
  //   >;

  //   "EnterBasicArena(uint256,uint256)": TypedContractEvent<
  //     EnterBasicArenaEvent.InputTuple,
  //     EnterBasicArenaEvent.OutputTuple,
  //     EnterBasicArenaEvent.OutputObject
  //   >;
  //   EnterBasicArena: TypedContractEvent<
  //     EnterBasicArenaEvent.InputTuple,
  //     EnterBasicArenaEvent.OutputTuple,
  //     EnterBasicArenaEvent.OutputObject
  //   >;

  //   "EnterHillArena(uint256,uint256,uint256)": TypedContractEvent<
  //     EnterHillArenaEvent.InputTuple,
  //     EnterHillArenaEvent.OutputTuple,
  //     EnterHillArenaEvent.OutputObject
  //   >;
  //   EnterHillArena: TypedContractEvent<
  //     EnterHillArenaEvent.InputTuple,
  //     EnterHillArenaEvent.OutputTuple,
  //     EnterHillArenaEvent.OutputObject
  //   >;

  //   "LeaveBasicArena(uint256,uint256)": TypedContractEvent<
  //     LeaveBasicArenaEvent.InputTuple,
  //     LeaveBasicArenaEvent.OutputTuple,
  //     LeaveBasicArenaEvent.OutputObject
  //   >;
  //   LeaveBasicArena: TypedContractEvent<
  //     LeaveBasicArenaEvent.InputTuple,
  //     LeaveBasicArenaEvent.OutputTuple,
  //     LeaveBasicArenaEvent.OutputObject
  //   >;

  //   "AdvancedCraftEvent(uint256,uint256,uint256)": TypedContractEvent<
  //     AdvancedCraftEventEvent.InputTuple,
  //     AdvancedCraftEventEvent.OutputTuple,
  //     AdvancedCraftEventEvent.OutputObject
  //   >;
  //   AdvancedCraftEvent: TypedContractEvent<
  //     AdvancedCraftEventEvent.InputTuple,
  //     AdvancedCraftEventEvent.OutputTuple,
  //     AdvancedCraftEventEvent.OutputObject
  //   >;

  //   "BasicCraftEvent(uint256,uint256,uint256)": TypedContractEvent<
  //     BasicCraftEventEvent.InputTuple,
  //     BasicCraftEventEvent.OutputTuple,
  //     BasicCraftEventEvent.OutputObject
  //   >;
  //   BasicCraftEvent: TypedContractEvent<
  //     BasicCraftEventEvent.InputTuple,
  //     BasicCraftEventEvent.OutputTuple,
  //     BasicCraftEventEvent.OutputObject
  //   >;

  //   "BasicEquipmentSchemaCreated(uint256,uint256,string,tuple)": TypedContractEvent<
  //     BasicEquipmentSchemaCreatedEvent.InputTuple,
  //     BasicEquipmentSchemaCreatedEvent.OutputTuple,
  //     BasicEquipmentSchemaCreatedEvent.OutputObject
  //   >;
  //   BasicEquipmentSchemaCreated: TypedContractEvent<
  //     BasicEquipmentSchemaCreatedEvent.InputTuple,
  //     BasicEquipmentSchemaCreatedEvent.OutputTuple,
  //     BasicEquipmentSchemaCreatedEvent.OutputObject
  //   >;

  //   "BasicEquipmentSchemaUpdate(uint256,uint256,string,tuple)": TypedContractEvent<
  //     BasicEquipmentSchemaUpdateEvent.InputTuple,
  //     BasicEquipmentSchemaUpdateEvent.OutputTuple,
  //     BasicEquipmentSchemaUpdateEvent.OutputObject
  //   >;
  //   BasicEquipmentSchemaUpdate: TypedContractEvent<
  //     BasicEquipmentSchemaUpdateEvent.InputTuple,
  //     BasicEquipmentSchemaUpdateEvent.OutputTuple,
  //     BasicEquipmentSchemaUpdateEvent.OutputObject
  //   >;

  //   "CreateAdvancedCraft(uint256,tuple)": TypedContractEvent<
  //     CreateAdvancedCraftEvent.InputTuple,
  //     CreateAdvancedCraftEvent.OutputTuple,
  //     CreateAdvancedCraftEvent.OutputObject
  //   >;
  //   CreateAdvancedCraft: TypedContractEvent<
  //     CreateAdvancedCraftEvent.InputTuple,
  //     CreateAdvancedCraftEvent.OutputTuple,
  //     CreateAdvancedCraftEvent.OutputObject
  //   >;

  //   "CreateBasicCraft(uint256,tuple)": TypedContractEvent<
  //     CreateBasicCraftEvent.InputTuple,
  //     CreateBasicCraftEvent.OutputTuple,
  //     CreateBasicCraftEvent.OutputObject
  //   >;
  //   CreateBasicCraft: TypedContractEvent<
  //     CreateBasicCraftEvent.InputTuple,
  //     CreateBasicCraftEvent.OutputTuple,
  //     CreateBasicCraftEvent.OutputObject
  //   >;

  //   "PurchaseBasicEquipment(uint256,uint256)": TypedContractEvent<
  //     PurchaseBasicEquipmentEvent.InputTuple,
  //     PurchaseBasicEquipmentEvent.OutputTuple,
  //     PurchaseBasicEquipmentEvent.OutputObject
  //   >;
  //   PurchaseBasicEquipment: TypedContractEvent<
  //     PurchaseBasicEquipmentEvent.InputTuple,
  //     PurchaseBasicEquipmentEvent.OutputTuple,
  //     PurchaseBasicEquipmentEvent.OutputObject
  //   >;

  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;
  //   "ApprovalForAll(address,address,bool)": TypedContractEvent<
  //     ApprovalForAll_address_address_bool_Event.InputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputTuple,
  //     ApprovalForAll_address_address_bool_Event.OutputObject
  //   >;

  //   "ItemEquiped(address,uint256,uint256)": TypedContractEvent<
  //     ItemEquipedEvent.InputTuple,
  //     ItemEquipedEvent.OutputTuple,
  //     ItemEquipedEvent.OutputObject
  //   >;
  //   ItemEquiped: TypedContractEvent<
  //     ItemEquipedEvent.InputTuple,
  //     ItemEquipedEvent.OutputTuple,
  //     ItemEquipedEvent.OutputObject
  //   >;

  //   "ItemUnequiped(address,uint256,uint256)": TypedContractEvent<
  //     ItemUnequipedEvent.InputTuple,
  //     ItemUnequipedEvent.OutputTuple,
  //     ItemUnequipedEvent.OutputObject
  //   >;
  //   ItemUnequiped: TypedContractEvent<
  //     ItemUnequipedEvent.InputTuple,
  //     ItemUnequipedEvent.OutputTuple,
  //     ItemUnequipedEvent.OutputObject
  //   >;

  //   "CreateEquipmentListing(address,uint256,uint256)": TypedContractEvent<
  //     CreateEquipmentListingEvent.InputTuple,
  //     CreateEquipmentListingEvent.OutputTuple,
  //     CreateEquipmentListingEvent.OutputObject
  //   >;
  //   CreateEquipmentListing: TypedContractEvent<
  //     CreateEquipmentListingEvent.InputTuple,
  //     CreateEquipmentListingEvent.OutputTuple,
  //     CreateEquipmentListingEvent.OutputObject
  //   >;

  //   "CreatePlayerListing(address,uint256,uint256)": TypedContractEvent<
  //     CreatePlayerListingEvent.InputTuple,
  //     CreatePlayerListingEvent.OutputTuple,
  //     CreatePlayerListingEvent.OutputObject
  //   >;
  //   CreatePlayerListing: TypedContractEvent<
  //     CreatePlayerListingEvent.InputTuple,
  //     CreatePlayerListingEvent.OutputTuple,
  //     CreatePlayerListingEvent.OutputObject
  //   >;

  //   "DelistPlayer(address,uint256)": TypedContractEvent<
  //     DelistPlayerEvent.InputTuple,
  //     DelistPlayerEvent.OutputTuple,
  //     DelistPlayerEvent.OutputObject
  //   >;
  //   DelistPlayer: TypedContractEvent<
  //     DelistPlayerEvent.InputTuple,
  //     DelistPlayerEvent.OutputTuple,
  //     DelistPlayerEvent.OutputObject
  //   >;

  //   "PurchaseEquipmentLisitng(address,uint256)": TypedContractEvent<
  //     PurchaseEquipmentLisitngEvent.InputTuple,
  //     PurchaseEquipmentLisitngEvent.OutputTuple,
  //     PurchaseEquipmentLisitngEvent.OutputObject
  //   >;
  //   PurchaseEquipmentLisitng: TypedContractEvent<
  //     PurchaseEquipmentLisitngEvent.InputTuple,
  //     PurchaseEquipmentLisitngEvent.OutputTuple,
  //     PurchaseEquipmentLisitngEvent.OutputObject
  //   >;

  //   "PurchasePlayerListing(address,uint256)": TypedContractEvent<
  //     PurchasePlayerListingEvent.InputTuple,
  //     PurchasePlayerListingEvent.OutputTuple,
  //     PurchasePlayerListingEvent.OutputObject
  //   >;
  //   PurchasePlayerListing: TypedContractEvent<
  //     PurchasePlayerListingEvent.InputTuple,
  //     PurchasePlayerListingEvent.OutputTuple,
  //     PurchasePlayerListingEvent.OutputObject
  //   >;

  //   "AddMonsterAdmin(address)": TypedContractEvent<
  //     AddMonsterAdminEvent.InputTuple,
  //     AddMonsterAdminEvent.OutputTuple,
  //     AddMonsterAdminEvent.OutputObject
  //   >;
  //   AddMonsterAdmin: TypedContractEvent<
  //     AddMonsterAdminEvent.InputTuple,
  //     AddMonsterAdminEvent.OutputTuple,
  //     AddMonsterAdminEvent.OutputObject
  //   >;

  //   "CreateBasicMonster(uint256,tuple)": TypedContractEvent<
  //     CreateBasicMonsterEvent.InputTuple,
  //     CreateBasicMonsterEvent.OutputTuple,
  //     CreateBasicMonsterEvent.OutputObject
  //   >;
  //   CreateBasicMonster: TypedContractEvent<
  //     CreateBasicMonsterEvent.InputTuple,
  //     CreateBasicMonsterEvent.OutputTuple,
  //     CreateBasicMonsterEvent.OutputObject
  //   >;

  //   "CreateMagicMonster(uint256,tuple)": TypedContractEvent<
  //     CreateMagicMonsterEvent.InputTuple,
  //     CreateMagicMonsterEvent.OutputTuple,
  //     CreateMagicMonsterEvent.OutputObject
  //   >;
  //   CreateMagicMonster: TypedContractEvent<
  //     CreateMagicMonsterEvent.InputTuple,
  //     CreateMagicMonsterEvent.OutputTuple,
  //     CreateMagicMonsterEvent.OutputObject
  //   >;

  //   "DragonQuest(uint256)": TypedContractEvent<
  //     DragonQuestEvent.InputTuple,
  //     DragonQuestEvent.OutputTuple,
  //     DragonQuestEvent.OutputObject
  //   >;
  //   DragonQuest: TypedContractEvent<
  //     DragonQuestEvent.InputTuple,
  //     DragonQuestEvent.OutputTuple,
  //     DragonQuestEvent.OutputObject
  //   >;

  //   "EditBasicMonster(uint256)": TypedContractEvent<
  //     EditBasicMonsterEvent.InputTuple,
  //     EditBasicMonsterEvent.OutputTuple,
  //     EditBasicMonsterEvent.OutputObject
  //   >;
  //   EditBasicMonster: TypedContractEvent<
  //     EditBasicMonsterEvent.InputTuple,
  //     EditBasicMonsterEvent.OutputTuple,
  //     EditBasicMonsterEvent.OutputObject
  //   >;

  //   "FightBasicMonster(uint256,uint256)": TypedContractEvent<
  //     FightBasicMonsterEvent.InputTuple,
  //     FightBasicMonsterEvent.OutputTuple,
  //     FightBasicMonsterEvent.OutputObject
  //   >;
  //   FightBasicMonster: TypedContractEvent<
  //     FightBasicMonsterEvent.InputTuple,
  //     FightBasicMonsterEvent.OutputTuple,
  //     FightBasicMonsterEvent.OutputObject
  //   >;

  //   "FightMagicMonster(uint256,uint256)": TypedContractEvent<
  //     FightMagicMonsterEvent.InputTuple,
  //     FightMagicMonsterEvent.OutputTuple,
  //     FightMagicMonsterEvent.OutputObject
  //   >;
  //   FightMagicMonster: TypedContractEvent<
  //     FightMagicMonsterEvent.InputTuple,
  //     FightMagicMonsterEvent.OutputTuple,
  //     FightMagicMonsterEvent.OutputObject
  //   >;

  //   "ClaimPlayer(uint256)": TypedContractEvent<
  //     ClaimPlayerEvent.InputTuple,
  //     ClaimPlayerEvent.OutputTuple,
  //     ClaimPlayerEvent.OutputObject
  //   >;
  //   ClaimPlayer: TypedContractEvent<
  //     ClaimPlayerEvent.InputTuple,
  //     ClaimPlayerEvent.OutputTuple,
  //     ClaimPlayerEvent.OutputObject
  //   >;

  //   "Mint(uint256,address,string,uint256)": TypedContractEvent<
  //     Mint_uint256_address_string_uint256_Event.InputTuple,
  //     Mint_uint256_address_string_uint256_Event.OutputTuple,
  //     Mint_uint256_address_string_uint256_Event.OutputObject
  //   >;
  //   "Mint(uint256,address,string,uint256)": TypedContractEvent<
  //     Mint_uint256_address_string_uint256_Event.InputTuple,
  //     Mint_uint256_address_string_uint256_Event.OutputTuple,
  //     Mint_uint256_address_string_uint256_Event.OutputObject
  //   >;
  //   "NameChange(address,uint256,string)": TypedContractEvent<
  //     NameChange_address_uint256_string_Event.InputTuple,
  //     NameChange_address_uint256_string_Event.OutputTuple,
  //     NameChange_address_uint256_string_Event.OutputObject
  //   >;
  //   "NameChange(address,uint256,string)": TypedContractEvent<
  //     NameChange_address_uint256_string_Event.InputTuple,
  //     NameChange_address_uint256_string_Event.OutputTuple,
  //     NameChange_address_uint256_string_Event.OutputObject
  //   >;

  //   "LevelUp(uint256,uint256)": TypedContractEvent<
  //     LevelUpEvent.InputTuple,
  //     LevelUpEvent.OutputTuple,
  //     LevelUpEvent.OutputObject
  //   >;
  //   LevelUp: TypedContractEvent<
  //     LevelUpEvent.InputTuple,
  //     LevelUpEvent.OutputTuple,
  //     LevelUpEvent.OutputObject
  //   >;

  //   "BeginGoldQuest(address,uint256,uint256)": TypedContractEvent<
  //     BeginGoldQuestEvent.InputTuple,
  //     BeginGoldQuestEvent.OutputTuple,
  //     BeginGoldQuestEvent.OutputObject
  //   >;
  //   BeginGoldQuest: TypedContractEvent<
  //     BeginGoldQuestEvent.InputTuple,
  //     BeginGoldQuestEvent.OutputTuple,
  //     BeginGoldQuestEvent.OutputObject
  //   >;

  //   "BeginQuesting(address,uint256)": TypedContractEvent<
  //     BeginQuestingEvent.InputTuple,
  //     BeginQuestingEvent.OutputTuple,
  //     BeginQuestingEvent.OutputObject
  //   >;
  //   BeginQuesting: TypedContractEvent<
  //     BeginQuestingEvent.InputTuple,
  //     BeginQuestingEvent.OutputTuple,
  //     BeginQuestingEvent.OutputObject
  //   >;

  //   "CreateGoldQuest(uint256,tuple)": TypedContractEvent<
  //     CreateGoldQuestEvent.InputTuple,
  //     CreateGoldQuestEvent.OutputTuple,
  //     CreateGoldQuestEvent.OutputObject
  //   >;
  //   CreateGoldQuest: TypedContractEvent<
  //     CreateGoldQuestEvent.InputTuple,
  //     CreateGoldQuestEvent.OutputTuple,
  //     CreateGoldQuestEvent.OutputObject
  //   >;

  //   "EndGoldQuest(address,uint256,uint256)": TypedContractEvent<
  //     EndGoldQuestEvent.InputTuple,
  //     EndGoldQuestEvent.OutputTuple,
  //     EndGoldQuestEvent.OutputObject
  //   >;
  //   EndGoldQuest: TypedContractEvent<
  //     EndGoldQuestEvent.InputTuple,
  //     EndGoldQuestEvent.OutputTuple,
  //     EndGoldQuestEvent.OutputObject
  //   >;

  //   "TrustedSignerChanged(address)": TypedContractEvent<
  //     TrustedSignerChanged_address_Event.InputTuple,
  //     TrustedSignerChanged_address_Event.OutputTuple,
  //     TrustedSignerChanged_address_Event.OutputObject
  //   >;
  //   "TrustedSignerChanged(address)": TypedContractEvent<
  //     TrustedSignerChanged_address_Event.InputTuple,
  //     TrustedSignerChanged_address_Event.OutputTuple,
  //     TrustedSignerChanged_address_Event.OutputObject
  //   >;

  //   "LevelUpPatch(uint256)": TypedContractEvent<
  //     LevelUpPatchEvent.InputTuple,
  //     LevelUpPatchEvent.OutputTuple,
  //     LevelUpPatchEvent.OutputObject
  //   >;
  //   LevelUpPatch: TypedContractEvent<
  //     LevelUpPatchEvent.InputTuple,
  //     LevelUpPatchEvent.OutputTuple,
  //     LevelUpPatchEvent.OutputObject
  //   >;

  //   "ConsumeBasicPotion(uint256,uint256)": TypedContractEvent<
  //     ConsumeBasicPotionEvent.InputTuple,
  //     ConsumeBasicPotionEvent.OutputTuple,
  //     ConsumeBasicPotionEvent.OutputObject
  //   >;
  //   ConsumeBasicPotion: TypedContractEvent<
  //     ConsumeBasicPotionEvent.InputTuple,
  //     ConsumeBasicPotionEvent.OutputTuple,
  //     ConsumeBasicPotionEvent.OutputObject
  //   >;

  //   "CreateBasicPotion(uint256,tuple)": TypedContractEvent<
  //     CreateBasicPotionEvent.InputTuple,
  //     CreateBasicPotionEvent.OutputTuple,
  //     CreateBasicPotionEvent.OutputObject
  //   >;
  //   CreateBasicPotion: TypedContractEvent<
  //     CreateBasicPotionEvent.InputTuple,
  //     CreateBasicPotionEvent.OutputTuple,
  //     CreateBasicPotionEvent.OutputObject
  //   >;

  //   "PurchaseBasicPotion(uint256,uint256)": TypedContractEvent<
  //     PurchaseBasicPotionEvent.InputTuple,
  //     PurchaseBasicPotionEvent.OutputTuple,
  //     PurchaseBasicPotionEvent.OutputObject
  //   >;
  //   PurchaseBasicPotion: TypedContractEvent<
  //     PurchaseBasicPotionEvent.InputTuple,
  //     PurchaseBasicPotionEvent.OutputTuple,
  //     PurchaseBasicPotionEvent.OutputObject
  //   >;

  //   "BeginTrainingBasicHealth(address,uint256)": TypedContractEvent<
  //     BeginTrainingBasicHealthEvent.InputTuple,
  //     BeginTrainingBasicHealthEvent.OutputTuple,
  //     BeginTrainingBasicHealthEvent.OutputObject
  //   >;
  //   BeginTrainingBasicHealth: TypedContractEvent<
  //     BeginTrainingBasicHealthEvent.InputTuple,
  //     BeginTrainingBasicHealthEvent.OutputTuple,
  //     BeginTrainingBasicHealthEvent.OutputObject
  //   >;

  //   "BeginTrainingMana(address,uint256)": TypedContractEvent<
  //     BeginTrainingManaEvent.InputTuple,
  //     BeginTrainingManaEvent.OutputTuple,
  //     BeginTrainingManaEvent.OutputObject
  //   >;
  //   BeginTrainingMana: TypedContractEvent<
  //     BeginTrainingManaEvent.InputTuple,
  //     BeginTrainingManaEvent.OutputTuple,
  //     BeginTrainingManaEvent.OutputObject
  //   >;

  //   "EndTrainingBasicHealth(address,uint256)": TypedContractEvent<
  //     EndTrainingBasicHealthEvent.InputTuple,
  //     EndTrainingBasicHealthEvent.OutputTuple,
  //     EndTrainingBasicHealthEvent.OutputObject
  //   >;
  //   EndTrainingBasicHealth: TypedContractEvent<
  //     EndTrainingBasicHealthEvent.InputTuple,
  //     EndTrainingBasicHealthEvent.OutputTuple,
  //     EndTrainingBasicHealthEvent.OutputObject
  //   >;

  //   "EndTrainingMana(address,uint256)": TypedContractEvent<
  //     EndTrainingManaEvent.InputTuple,
  //     EndTrainingManaEvent.OutputTuple,
  //     EndTrainingManaEvent.OutputObject
  //   >;
  //   EndTrainingMana: TypedContractEvent<
  //     EndTrainingManaEvent.InputTuple,
  //     EndTrainingManaEvent.OutputTuple,
  //     EndTrainingManaEvent.OutputObject
  //   >;

  //   "ClaimTreasure(uint256,uint256)": TypedContractEvent<
  //     ClaimTreasureEvent.InputTuple,
  //     ClaimTreasureEvent.OutputTuple,
  //     ClaimTreasureEvent.OutputObject
  //   >;
  //   ClaimTreasure: TypedContractEvent<
  //     ClaimTreasureEvent.InputTuple,
  //     ClaimTreasureEvent.OutputTuple,
  //     ClaimTreasureEvent.OutputObject
  //   >;

  //   "CreateTreasureDrop(string)": TypedContractEvent<
  //     CreateTreasureDropEvent.InputTuple,
  //     CreateTreasureDropEvent.OutputTuple,
  //     CreateTreasureDropEvent.OutputObject
  //   >;
  //   CreateTreasureDrop: TypedContractEvent<
  //     CreateTreasureDropEvent.InputTuple,
  //     CreateTreasureDropEvent.OutputTuple,
  //     CreateTreasureDropEvent.OutputObject
  //   >;

  //   "MintTreasure(uint256,tuple)": TypedContractEvent<
  //     MintTreasureEvent.InputTuple,
  //     MintTreasureEvent.OutputTuple,
  //     MintTreasureEvent.OutputObject
  //   >;
  //   MintTreasure: TypedContractEvent<
  //     MintTreasureEvent.InputTuple,
  //     MintTreasureEvent.OutputTuple,
  //     MintTreasureEvent.OutputObject
  //   >;

  //   "TreasureSchemaCreation(tuple)": TypedContractEvent<
  //     TreasureSchemaCreationEvent.InputTuple,
  //     TreasureSchemaCreationEvent.OutputTuple,
  //     TreasureSchemaCreationEvent.OutputObject
  //   >;
  //   TreasureSchemaCreation: TypedContractEvent<
  //     TreasureSchemaCreationEvent.InputTuple,
  //     TreasureSchemaCreationEvent.OutputTuple,
  //     TreasureSchemaCreationEvent.OutputObject
  //   >;

  //   "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
  //     TransferBatch_address_address_address_uint256_array_uint256_array_Event.InputTuple,
  //     TransferBatch_address_address_address_uint256_array_uint256_array_Event.OutputTuple,
  //     TransferBatch_address_address_address_uint256_array_uint256_array_Event.OutputObject
  //   >;
  //   "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
  //     TransferSingle_address_address_address_uint256_uint256_Event.InputTuple,
  //     TransferSingle_address_address_address_uint256_uint256_Event.OutputTuple,
  //     TransferSingle_address_address_address_uint256_uint256_Event.OutputObject
  //   >;
  //   "URI(string,uint256)": TypedContractEvent<
  //     URI_string_uint256_Event.InputTuple,
  //     URI_string_uint256_Event.OutputTuple,
  //     URI_string_uint256_Event.OutputObject
  //   >;
  // };
}
