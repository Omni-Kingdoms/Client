schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  B_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_User
  B_users(
    skip: Int = 0
    first: Int = 100
    orderBy: B_User_orderBy
    orderDirection: B_OrderDirection
    where: B_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_User!]!
  B_player(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Player
  B_players(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Player_orderBy
    orderDirection: B_OrderDirection
    where: B_Player_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Player!]!
  B_equipment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Equipment
  B_equipments(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Equipment_orderBy
    orderDirection: B_OrderDirection
    where: B_Equipment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Equipment!]!
  B_equipmentInStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_EquipmentInStore
  B_equipmentInStores(
    skip: Int = 0
    first: Int = 100
    orderBy: B_EquipmentInStore_orderBy
    orderDirection: B_OrderDirection
    where: B_EquipmentInStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_EquipmentInStore!]!
  B_basicCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_BasicCraft
  B_basicCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: B_BasicCraft_orderBy
    orderDirection: B_OrderDirection
    where: B_BasicCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_BasicCraft!]!
  B_advancedCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_AdvancedCraft
  B_advancedCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: B_AdvancedCraft_orderBy
    orderDirection: B_OrderDirection
    where: B_AdvancedCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_AdvancedCraft!]!
  B_equipCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_EquipCount
  B_equipCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: B_EquipCount_orderBy
    orderDirection: B_OrderDirection
    where: B_EquipCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_EquipCount!]!
  B_monster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Monster
  B_monsters(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Monster_orderBy
    orderDirection: B_OrderDirection
    where: B_Monster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Monster!]!
  B_magicMonster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_MagicMonster
  B_magicMonsters(
    skip: Int = 0
    first: Int = 100
    orderBy: B_MagicMonster_orderBy
    orderDirection: B_OrderDirection
    where: B_MagicMonster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_MagicMonster!]!
  B_treasure(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Treasure
  B_treasures(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Treasure_orderBy
    orderDirection: B_OrderDirection
    where: B_Treasure_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Treasure!]!
  B_treasureBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_TreasureBalance
  B_treasureBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: B_TreasureBalance_orderBy
    orderDirection: B_OrderDirection
    where: B_TreasureBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_TreasureBalance!]!
  B_basicPotion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_BasicPotion
  B_basicPotions(
    skip: Int = 0
    first: Int = 100
    orderBy: B_BasicPotion_orderBy
    orderDirection: B_OrderDirection
    where: B_BasicPotion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_BasicPotion!]!
  B_basicPotionBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_BasicPotionBalance
  B_basicPotionBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: B_BasicPotionBalance_orderBy
    orderDirection: B_OrderDirection
    where: B_BasicPotionBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_BasicPotionBalance!]!
  B_arena(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Arena
  B_arenas(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Arena_orderBy
    orderDirection: B_OrderDirection
    where: B_Arena_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Arena!]!
  B_arenaResults(
    skip: Int = 0
    first: Int = 100
    orderBy: B_ArenaResults_orderBy
    orderDirection: B_OrderDirection
    where: B_ArenaResults_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_ArenaResults!]!
  B_sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Sale
  B_sales(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Sale_orderBy
    orderDirection: B_OrderDirection
    where: B_Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Sale!]!
  B_listing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Listing
  B_listings(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Listing_orderBy
    orderDirection: B_OrderDirection
    where: B_Listing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Listing!]!
  """Access to subgraph metadata"""
  B__meta(block: B_Block_height): B__Meta_
  S_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_User
  S_users(
    skip: Int = 0
    first: Int = 100
    orderBy: S_User_orderBy
    orderDirection: S_OrderDirection
    where: S_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_User!]!
  S_player(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Player
  S_players(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Player_orderBy
    orderDirection: S_OrderDirection
    where: S_Player_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Player!]!
  S_equipment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Equipment
  S_equipments(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Equipment_orderBy
    orderDirection: S_OrderDirection
    where: S_Equipment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Equipment!]!
  S_equipmentInStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_EquipmentInStore
  S_equipmentInStores(
    skip: Int = 0
    first: Int = 100
    orderBy: S_EquipmentInStore_orderBy
    orderDirection: S_OrderDirection
    where: S_EquipmentInStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_EquipmentInStore!]!
  S_basicCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_BasicCraft
  S_basicCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: S_BasicCraft_orderBy
    orderDirection: S_OrderDirection
    where: S_BasicCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_BasicCraft!]!
  S_advancedCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_AdvancedCraft
  S_advancedCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: S_AdvancedCraft_orderBy
    orderDirection: S_OrderDirection
    where: S_AdvancedCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_AdvancedCraft!]!
  S_equipCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_EquipCount
  S_equipCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: S_EquipCount_orderBy
    orderDirection: S_OrderDirection
    where: S_EquipCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_EquipCount!]!
  S_monster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Monster
  S_monsters(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Monster_orderBy
    orderDirection: S_OrderDirection
    where: S_Monster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Monster!]!
  S_magicMonster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_MagicMonster
  S_magicMonsters(
    skip: Int = 0
    first: Int = 100
    orderBy: S_MagicMonster_orderBy
    orderDirection: S_OrderDirection
    where: S_MagicMonster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_MagicMonster!]!
  S_treasure(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Treasure
  S_treasures(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Treasure_orderBy
    orderDirection: S_OrderDirection
    where: S_Treasure_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Treasure!]!
  S_treasureBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_TreasureBalance
  S_treasureBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: S_TreasureBalance_orderBy
    orderDirection: S_OrderDirection
    where: S_TreasureBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_TreasureBalance!]!
  S_basicPotion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_BasicPotion
  S_basicPotions(
    skip: Int = 0
    first: Int = 100
    orderBy: S_BasicPotion_orderBy
    orderDirection: S_OrderDirection
    where: S_BasicPotion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_BasicPotion!]!
  S_basicPotionBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_BasicPotionBalance
  S_basicPotionBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: S_BasicPotionBalance_orderBy
    orderDirection: S_OrderDirection
    where: S_BasicPotionBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_BasicPotionBalance!]!
  S_arena(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Arena
  S_arenas(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Arena_orderBy
    orderDirection: S_OrderDirection
    where: S_Arena_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Arena!]!
  S_arenaResults(
    skip: Int = 0
    first: Int = 100
    orderBy: S_ArenaResults_orderBy
    orderDirection: S_OrderDirection
    where: S_ArenaResults_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_ArenaResults!]!
  S_sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Sale
  S_sales(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Sale_orderBy
    orderDirection: S_OrderDirection
    where: S_Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Sale!]!
  S_listing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Listing
  S_listings(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Listing_orderBy
    orderDirection: S_OrderDirection
    where: S_Listing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Listing!]!
  """Access to subgraph metadata"""
  S__meta(block: S_Block_height): S__Meta_
  A_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_User
  A_users(
    skip: Int = 0
    first: Int = 100
    orderBy: A_User_orderBy
    orderDirection: A_OrderDirection
    where: A_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_User!]!
  A_player(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Player
  A_players(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Player_orderBy
    orderDirection: A_OrderDirection
    where: A_Player_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Player!]!
  A_equipment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Equipment
  A_equipments(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Equipment_orderBy
    orderDirection: A_OrderDirection
    where: A_Equipment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Equipment!]!
  A_equipmentInStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_EquipmentInStore
  A_equipmentInStores(
    skip: Int = 0
    first: Int = 100
    orderBy: A_EquipmentInStore_orderBy
    orderDirection: A_OrderDirection
    where: A_EquipmentInStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_EquipmentInStore!]!
  A_basicCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_BasicCraft
  A_basicCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: A_BasicCraft_orderBy
    orderDirection: A_OrderDirection
    where: A_BasicCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_BasicCraft!]!
  A_advancedCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_AdvancedCraft
  A_advancedCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: A_AdvancedCraft_orderBy
    orderDirection: A_OrderDirection
    where: A_AdvancedCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_AdvancedCraft!]!
  A_equipCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_EquipCount
  A_equipCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: A_EquipCount_orderBy
    orderDirection: A_OrderDirection
    where: A_EquipCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_EquipCount!]!
  A_monster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Monster
  A_monsters(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Monster_orderBy
    orderDirection: A_OrderDirection
    where: A_Monster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Monster!]!
  A_magicMonster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_MagicMonster
  A_magicMonsters(
    skip: Int = 0
    first: Int = 100
    orderBy: A_MagicMonster_orderBy
    orderDirection: A_OrderDirection
    where: A_MagicMonster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_MagicMonster!]!
  A_treasure(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Treasure
  A_treasures(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Treasure_orderBy
    orderDirection: A_OrderDirection
    where: A_Treasure_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Treasure!]!
  A_treasureBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_TreasureBalance
  A_treasureBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: A_TreasureBalance_orderBy
    orderDirection: A_OrderDirection
    where: A_TreasureBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_TreasureBalance!]!
  A_basicPotion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_BasicPotion
  A_basicPotions(
    skip: Int = 0
    first: Int = 100
    orderBy: A_BasicPotion_orderBy
    orderDirection: A_OrderDirection
    where: A_BasicPotion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_BasicPotion!]!
  A_basicPotionBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_BasicPotionBalance
  A_basicPotionBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: A_BasicPotionBalance_orderBy
    orderDirection: A_OrderDirection
    where: A_BasicPotionBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_BasicPotionBalance!]!
  A_arena(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Arena
  A_arenas(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Arena_orderBy
    orderDirection: A_OrderDirection
    where: A_Arena_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Arena!]!
  A_arenaResults(
    skip: Int = 0
    first: Int = 100
    orderBy: A_ArenaResults_orderBy
    orderDirection: A_OrderDirection
    where: A_ArenaResults_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_ArenaResults!]!
  A_sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Sale
  A_sales(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Sale_orderBy
    orderDirection: A_OrderDirection
    where: A_Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Sale!]!
  A_listing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Listing
  A_listings(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Listing_orderBy
    orderDirection: A_OrderDirection
    where: A_Listing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Listing!]!
  """Access to subgraph metadata"""
  A__meta(block: A_Block_height): A__Meta_
}

type Subscription {
  B_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_User
  B_users(
    skip: Int = 0
    first: Int = 100
    orderBy: B_User_orderBy
    orderDirection: B_OrderDirection
    where: B_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_User!]!
  B_player(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Player
  B_players(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Player_orderBy
    orderDirection: B_OrderDirection
    where: B_Player_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Player!]!
  B_equipment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Equipment
  B_equipments(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Equipment_orderBy
    orderDirection: B_OrderDirection
    where: B_Equipment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Equipment!]!
  B_equipmentInStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_EquipmentInStore
  B_equipmentInStores(
    skip: Int = 0
    first: Int = 100
    orderBy: B_EquipmentInStore_orderBy
    orderDirection: B_OrderDirection
    where: B_EquipmentInStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_EquipmentInStore!]!
  B_basicCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_BasicCraft
  B_basicCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: B_BasicCraft_orderBy
    orderDirection: B_OrderDirection
    where: B_BasicCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_BasicCraft!]!
  B_advancedCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_AdvancedCraft
  B_advancedCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: B_AdvancedCraft_orderBy
    orderDirection: B_OrderDirection
    where: B_AdvancedCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_AdvancedCraft!]!
  B_equipCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_EquipCount
  B_equipCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: B_EquipCount_orderBy
    orderDirection: B_OrderDirection
    where: B_EquipCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_EquipCount!]!
  B_monster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Monster
  B_monsters(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Monster_orderBy
    orderDirection: B_OrderDirection
    where: B_Monster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Monster!]!
  B_magicMonster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_MagicMonster
  B_magicMonsters(
    skip: Int = 0
    first: Int = 100
    orderBy: B_MagicMonster_orderBy
    orderDirection: B_OrderDirection
    where: B_MagicMonster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_MagicMonster!]!
  B_treasure(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Treasure
  B_treasures(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Treasure_orderBy
    orderDirection: B_OrderDirection
    where: B_Treasure_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Treasure!]!
  B_treasureBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_TreasureBalance
  B_treasureBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: B_TreasureBalance_orderBy
    orderDirection: B_OrderDirection
    where: B_TreasureBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_TreasureBalance!]!
  B_basicPotion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_BasicPotion
  B_basicPotions(
    skip: Int = 0
    first: Int = 100
    orderBy: B_BasicPotion_orderBy
    orderDirection: B_OrderDirection
    where: B_BasicPotion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_BasicPotion!]!
  B_basicPotionBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_BasicPotionBalance
  B_basicPotionBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: B_BasicPotionBalance_orderBy
    orderDirection: B_OrderDirection
    where: B_BasicPotionBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_BasicPotionBalance!]!
  B_arena(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Arena
  B_arenas(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Arena_orderBy
    orderDirection: B_OrderDirection
    where: B_Arena_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Arena!]!
  B_arenaResults(
    skip: Int = 0
    first: Int = 100
    orderBy: B_ArenaResults_orderBy
    orderDirection: B_OrderDirection
    where: B_ArenaResults_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_ArenaResults!]!
  B_sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Sale
  B_sales(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Sale_orderBy
    orderDirection: B_OrderDirection
    where: B_Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Sale!]!
  B_listing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): B_Listing
  B_listings(
    skip: Int = 0
    first: Int = 100
    orderBy: B_Listing_orderBy
    orderDirection: B_OrderDirection
    where: B_Listing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: B_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [B_Listing!]!
  """Access to subgraph metadata"""
  B__meta(block: B_Block_height): B__Meta_
  S_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_User
  S_users(
    skip: Int = 0
    first: Int = 100
    orderBy: S_User_orderBy
    orderDirection: S_OrderDirection
    where: S_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_User!]!
  S_player(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Player
  S_players(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Player_orderBy
    orderDirection: S_OrderDirection
    where: S_Player_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Player!]!
  S_equipment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Equipment
  S_equipments(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Equipment_orderBy
    orderDirection: S_OrderDirection
    where: S_Equipment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Equipment!]!
  S_equipmentInStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_EquipmentInStore
  S_equipmentInStores(
    skip: Int = 0
    first: Int = 100
    orderBy: S_EquipmentInStore_orderBy
    orderDirection: S_OrderDirection
    where: S_EquipmentInStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_EquipmentInStore!]!
  S_basicCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_BasicCraft
  S_basicCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: S_BasicCraft_orderBy
    orderDirection: S_OrderDirection
    where: S_BasicCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_BasicCraft!]!
  S_advancedCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_AdvancedCraft
  S_advancedCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: S_AdvancedCraft_orderBy
    orderDirection: S_OrderDirection
    where: S_AdvancedCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_AdvancedCraft!]!
  S_equipCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_EquipCount
  S_equipCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: S_EquipCount_orderBy
    orderDirection: S_OrderDirection
    where: S_EquipCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_EquipCount!]!
  S_monster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Monster
  S_monsters(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Monster_orderBy
    orderDirection: S_OrderDirection
    where: S_Monster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Monster!]!
  S_magicMonster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_MagicMonster
  S_magicMonsters(
    skip: Int = 0
    first: Int = 100
    orderBy: S_MagicMonster_orderBy
    orderDirection: S_OrderDirection
    where: S_MagicMonster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_MagicMonster!]!
  S_treasure(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Treasure
  S_treasures(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Treasure_orderBy
    orderDirection: S_OrderDirection
    where: S_Treasure_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Treasure!]!
  S_treasureBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_TreasureBalance
  S_treasureBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: S_TreasureBalance_orderBy
    orderDirection: S_OrderDirection
    where: S_TreasureBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_TreasureBalance!]!
  S_basicPotion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_BasicPotion
  S_basicPotions(
    skip: Int = 0
    first: Int = 100
    orderBy: S_BasicPotion_orderBy
    orderDirection: S_OrderDirection
    where: S_BasicPotion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_BasicPotion!]!
  S_basicPotionBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_BasicPotionBalance
  S_basicPotionBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: S_BasicPotionBalance_orderBy
    orderDirection: S_OrderDirection
    where: S_BasicPotionBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_BasicPotionBalance!]!
  S_arena(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Arena
  S_arenas(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Arena_orderBy
    orderDirection: S_OrderDirection
    where: S_Arena_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Arena!]!
  S_arenaResults(
    skip: Int = 0
    first: Int = 100
    orderBy: S_ArenaResults_orderBy
    orderDirection: S_OrderDirection
    where: S_ArenaResults_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_ArenaResults!]!
  S_sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Sale
  S_sales(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Sale_orderBy
    orderDirection: S_OrderDirection
    where: S_Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Sale!]!
  S_listing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): S_Listing
  S_listings(
    skip: Int = 0
    first: Int = 100
    orderBy: S_Listing_orderBy
    orderDirection: S_OrderDirection
    where: S_Listing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: S_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [S_Listing!]!
  """Access to subgraph metadata"""
  S__meta(block: S_Block_height): S__Meta_
  A_user(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_User
  A_users(
    skip: Int = 0
    first: Int = 100
    orderBy: A_User_orderBy
    orderDirection: A_OrderDirection
    where: A_User_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_User!]!
  A_player(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Player
  A_players(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Player_orderBy
    orderDirection: A_OrderDirection
    where: A_Player_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Player!]!
  A_equipment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Equipment
  A_equipments(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Equipment_orderBy
    orderDirection: A_OrderDirection
    where: A_Equipment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Equipment!]!
  A_equipmentInStore(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_EquipmentInStore
  A_equipmentInStores(
    skip: Int = 0
    first: Int = 100
    orderBy: A_EquipmentInStore_orderBy
    orderDirection: A_OrderDirection
    where: A_EquipmentInStore_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_EquipmentInStore!]!
  A_basicCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_BasicCraft
  A_basicCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: A_BasicCraft_orderBy
    orderDirection: A_OrderDirection
    where: A_BasicCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_BasicCraft!]!
  A_advancedCraft(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_AdvancedCraft
  A_advancedCrafts(
    skip: Int = 0
    first: Int = 100
    orderBy: A_AdvancedCraft_orderBy
    orderDirection: A_OrderDirection
    where: A_AdvancedCraft_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_AdvancedCraft!]!
  A_equipCount(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_EquipCount
  A_equipCounts(
    skip: Int = 0
    first: Int = 100
    orderBy: A_EquipCount_orderBy
    orderDirection: A_OrderDirection
    where: A_EquipCount_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_EquipCount!]!
  A_monster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Monster
  A_monsters(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Monster_orderBy
    orderDirection: A_OrderDirection
    where: A_Monster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Monster!]!
  A_magicMonster(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_MagicMonster
  A_magicMonsters(
    skip: Int = 0
    first: Int = 100
    orderBy: A_MagicMonster_orderBy
    orderDirection: A_OrderDirection
    where: A_MagicMonster_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_MagicMonster!]!
  A_treasure(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Treasure
  A_treasures(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Treasure_orderBy
    orderDirection: A_OrderDirection
    where: A_Treasure_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Treasure!]!
  A_treasureBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_TreasureBalance
  A_treasureBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: A_TreasureBalance_orderBy
    orderDirection: A_OrderDirection
    where: A_TreasureBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_TreasureBalance!]!
  A_basicPotion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_BasicPotion
  A_basicPotions(
    skip: Int = 0
    first: Int = 100
    orderBy: A_BasicPotion_orderBy
    orderDirection: A_OrderDirection
    where: A_BasicPotion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_BasicPotion!]!
  A_basicPotionBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_BasicPotionBalance
  A_basicPotionBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: A_BasicPotionBalance_orderBy
    orderDirection: A_OrderDirection
    where: A_BasicPotionBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_BasicPotionBalance!]!
  A_arena(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Arena
  A_arenas(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Arena_orderBy
    orderDirection: A_OrderDirection
    where: A_Arena_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Arena!]!
  A_arenaResults(
    skip: Int = 0
    first: Int = 100
    orderBy: A_ArenaResults_orderBy
    orderDirection: A_OrderDirection
    where: A_ArenaResults_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_ArenaResults!]!
  A_sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Sale
  A_sales(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Sale_orderBy
    orderDirection: A_OrderDirection
    where: A_Sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Sale!]!
  A_listing(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): A_Listing
  A_listings(
    skip: Int = 0
    first: Int = 100
    orderBy: A_Listing_orderBy
    orderDirection: A_OrderDirection
    where: A_Listing_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: A_Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [A_Listing!]!
  """Access to subgraph metadata"""
  A__meta(block: A_Block_height): A__Meta_
}

type B_AdvancedCraft {
  id: ID!
  slot: String!
  value: Int!
  stat: String!
  treasure: B_Treasure!
  oldName: String!
  newName: String!
  uri: String!
}

input B_AdvancedCraft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  treasure: String
  treasure_not: String
  treasure_gt: String
  treasure_lt: String
  treasure_gte: String
  treasure_lte: String
  treasure_in: [String!]
  treasure_not_in: [String!]
  treasure_contains: String
  treasure_contains_nocase: String
  treasure_not_contains: String
  treasure_not_contains_nocase: String
  treasure_starts_with: String
  treasure_starts_with_nocase: String
  treasure_not_starts_with: String
  treasure_not_starts_with_nocase: String
  treasure_ends_with: String
  treasure_ends_with_nocase: String
  treasure_not_ends_with: String
  treasure_not_ends_with_nocase: String
  treasure_: B_Treasure_filter
  oldName: String
  oldName_not: String
  oldName_gt: String
  oldName_lt: String
  oldName_gte: String
  oldName_lte: String
  oldName_in: [String!]
  oldName_not_in: [String!]
  oldName_contains: String
  oldName_contains_nocase: String
  oldName_not_contains: String
  oldName_not_contains_nocase: String
  oldName_starts_with: String
  oldName_starts_with_nocase: String
  oldName_not_starts_with: String
  oldName_not_starts_with_nocase: String
  oldName_ends_with: String
  oldName_ends_with_nocase: String
  oldName_not_ends_with: String
  oldName_not_ends_with_nocase: String
  newName: String
  newName_not: String
  newName_gt: String
  newName_lt: String
  newName_gte: String
  newName_lte: String
  newName_in: [String!]
  newName_not_in: [String!]
  newName_contains: String
  newName_contains_nocase: String
  newName_not_contains: String
  newName_not_contains_nocase: String
  newName_starts_with: String
  newName_starts_with_nocase: String
  newName_not_starts_with: String
  newName_not_starts_with_nocase: String
  newName_ends_with: String
  newName_ends_with_nocase: String
  newName_not_ends_with: String
  newName_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_AdvancedCraft_filter]
  or: [B_AdvancedCraft_filter]
}

enum B_AdvancedCraft_orderBy {
  id
  slot
  value
  stat
  treasure
  treasure__id
  treasure__rank
  treasure__name
  treasure__uri
  oldName
  newName
  uri
}

type B_Arena {
  id: ID!
  name: String!
  uri: String!
  cost: Int!
  cooldown: Int!
  host: B_Player
  arenaResult(skip: Int = 0, first: Int = 100, orderBy: B_ArenaResults_orderBy, orderDirection: B_OrderDirection, where: B_ArenaResults_filter): [B_ArenaResults!]!
}

type B_ArenaResults {
  id: ID!
  player: B_Player!
  arena: B_Arena!
  wins: Int!
  losses: Int!
}

input B_ArenaResults_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: B_Player_filter
  arena: String
  arena_not: String
  arena_gt: String
  arena_lt: String
  arena_gte: String
  arena_lte: String
  arena_in: [String!]
  arena_not_in: [String!]
  arena_contains: String
  arena_contains_nocase: String
  arena_not_contains: String
  arena_not_contains_nocase: String
  arena_starts_with: String
  arena_starts_with_nocase: String
  arena_not_starts_with: String
  arena_not_starts_with_nocase: String
  arena_ends_with: String
  arena_ends_with_nocase: String
  arena_not_ends_with: String
  arena_not_ends_with_nocase: String
  arena_: B_Arena_filter
  wins: Int
  wins_not: Int
  wins_gt: Int
  wins_lt: Int
  wins_gte: Int
  wins_lte: Int
  wins_in: [Int!]
  wins_not_in: [Int!]
  losses: Int
  losses_not: Int
  losses_gt: Int
  losses_lt: Int
  losses_gte: Int
  losses_lte: Int
  losses_in: [Int!]
  losses_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_ArenaResults_filter]
  or: [B_ArenaResults_filter]
}

enum B_ArenaResults_orderBy {
  id
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  arena
  arena__id
  arena__name
  arena__uri
  arena__cost
  arena__cooldown
  wins
  losses
}

input B_Arena_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  host: String
  host_not: String
  host_gt: String
  host_lt: String
  host_gte: String
  host_lte: String
  host_in: [String!]
  host_not_in: [String!]
  host_contains: String
  host_contains_nocase: String
  host_not_contains: String
  host_not_contains_nocase: String
  host_starts_with: String
  host_starts_with_nocase: String
  host_not_starts_with: String
  host_not_starts_with_nocase: String
  host_ends_with: String
  host_ends_with_nocase: String
  host_not_ends_with: String
  host_not_ends_with_nocase: String
  host_: B_Player_filter
  arenaResult_: B_ArenaResults_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_Arena_filter]
  or: [B_Arena_filter]
}

enum B_Arena_orderBy {
  id
  name
  uri
  cost
  cooldown
  host
  host__id
  host__Player_id
  host__name
  host__classes
  host__stats
  host__exp
  host__level
  host__strength
  host__magic
  host__agility
  host__defense
  host__currentHealth
  host__maxHealth
  host__currentMana
  host__maxMana
  host__totalWins
  host__totalLosses
  arenaResult
}

type B_BasicCraft {
  id: ID!
  slot: String!
  value: Int!
  cost: Int!
  oldName: String!
  newName: String!
  uri: String!
}

input B_BasicCraft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  oldName: String
  oldName_not: String
  oldName_gt: String
  oldName_lt: String
  oldName_gte: String
  oldName_lte: String
  oldName_in: [String!]
  oldName_not_in: [String!]
  oldName_contains: String
  oldName_contains_nocase: String
  oldName_not_contains: String
  oldName_not_contains_nocase: String
  oldName_starts_with: String
  oldName_starts_with_nocase: String
  oldName_not_starts_with: String
  oldName_not_starts_with_nocase: String
  oldName_ends_with: String
  oldName_ends_with_nocase: String
  oldName_not_ends_with: String
  oldName_not_ends_with_nocase: String
  newName: String
  newName_not: String
  newName_gt: String
  newName_lt: String
  newName_gte: String
  newName_lte: String
  newName_in: [String!]
  newName_not_in: [String!]
  newName_contains: String
  newName_contains_nocase: String
  newName_not_contains: String
  newName_not_contains_nocase: String
  newName_starts_with: String
  newName_starts_with_nocase: String
  newName_not_starts_with: String
  newName_not_starts_with_nocase: String
  newName_ends_with: String
  newName_ends_with_nocase: String
  newName_not_ends_with: String
  newName_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_BasicCraft_filter]
  or: [B_BasicCraft_filter]
}

enum B_BasicCraft_orderBy {
  id
  slot
  value
  cost
  oldName
  newName
  uri
}

type B_BasicPotion {
  id: ID!
  value: Int!
  cost: Int!
  type: String!
  name: String!
  uri: String!
  potionBalance(skip: Int = 0, first: Int = 100, orderBy: B_BasicPotionBalance_orderBy, orderDirection: B_OrderDirection, where: B_BasicPotionBalance_filter): [B_BasicPotionBalance!]!
}

type B_BasicPotionBalance {
  id: ID!
  balance: Int!
  potion: B_BasicPotion!
  player: B_Player!
}

input B_BasicPotionBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: Int
  balance_not: Int
  balance_gt: Int
  balance_lt: Int
  balance_gte: Int
  balance_lte: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  potion: String
  potion_not: String
  potion_gt: String
  potion_lt: String
  potion_gte: String
  potion_lte: String
  potion_in: [String!]
  potion_not_in: [String!]
  potion_contains: String
  potion_contains_nocase: String
  potion_not_contains: String
  potion_not_contains_nocase: String
  potion_starts_with: String
  potion_starts_with_nocase: String
  potion_not_starts_with: String
  potion_not_starts_with_nocase: String
  potion_ends_with: String
  potion_ends_with_nocase: String
  potion_not_ends_with: String
  potion_not_ends_with_nocase: String
  potion_: B_BasicPotion_filter
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: B_Player_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_BasicPotionBalance_filter]
  or: [B_BasicPotionBalance_filter]
}

enum B_BasicPotionBalance_orderBy {
  id
  balance
  potion
  potion__id
  potion__value
  potion__cost
  potion__type
  potion__name
  potion__uri
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

input B_BasicPotion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  potionBalance_: B_BasicPotionBalance_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_BasicPotion_filter]
  or: [B_BasicPotion_filter]
}

enum B_BasicPotion_orderBy {
  id
  value
  cost
  type
  name
  uri
  potionBalance
}

scalar B_BigDecimal

scalar BigInt

input B_BlockChangedFilter {
  number_gte: Int!
}

input B_Block_height {
  hash: B_Bytes
  number: Int
  number_gte: Int
}

scalar B_Bytes

type B_EquipCount {
  id: ID!
  count: Int!
}

input B_EquipCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: Int
  count_not: Int
  count_gt: Int
  count_lt: Int
  count_gte: Int
  count_lte: Int
  count_in: [Int!]
  count_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_EquipCount_filter]
  or: [B_EquipCount_filter]
}

enum B_EquipCount_orderBy {
  id
  count
}

type B_Equipment {
  id: ID!
  slot: String!
  rank: Int!
  value: Int!
  stat: String!
  player: B_Player!
  name: String!
  uri: String!
  isEquipped: Boolean!
}

type B_EquipmentInStore {
  id: ID!
  slot: String!
  value: Int!
  stat: String!
  cost: Int!
  name: String!
  uri: String!
}

input B_EquipmentInStore_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_EquipmentInStore_filter]
  or: [B_EquipmentInStore_filter]
}

enum B_EquipmentInStore_orderBy {
  id
  slot
  value
  stat
  cost
  name
  uri
}

input B_Equipment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  rank: Int
  rank_not: Int
  rank_gt: Int
  rank_lt: Int
  rank_gte: Int
  rank_lte: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: B_Player_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  isEquipped: Boolean
  isEquipped_not: Boolean
  isEquipped_in: [Boolean!]
  isEquipped_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_Equipment_filter]
  or: [B_Equipment_filter]
}

enum B_Equipment_orderBy {
  id
  slot
  rank
  value
  stat
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  name
  uri
  isEquipped
}

"""
8 bytes signed integer

"""
scalar B_Int8

type B_Listing {
  id: ID!
  price: BigInt!
  seller: String!
  timestamp: BigInt!
  player: B_Player!
}

input B_Listing_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: B_Player_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_Listing_filter]
  or: [B_Listing_filter]
}

enum B_Listing_orderBy {
  id
  price
  seller
  timestamp
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

type B_MagicMonster {
  id: ID!
  xpReward: Int!
  damage: Int!
  hp: Int!
  cooldown: Int!
  cost: Int!
  name: String!
  uri: String!
}

input B_MagicMonster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  xpReward: Int
  xpReward_not: Int
  xpReward_gt: Int
  xpReward_lt: Int
  xpReward_gte: Int
  xpReward_lte: Int
  xpReward_in: [Int!]
  xpReward_not_in: [Int!]
  damage: Int
  damage_not: Int
  damage_gt: Int
  damage_lt: Int
  damage_gte: Int
  damage_lte: Int
  damage_in: [Int!]
  damage_not_in: [Int!]
  hp: Int
  hp_not: Int
  hp_gt: Int
  hp_lt: Int
  hp_gte: Int
  hp_lte: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_MagicMonster_filter]
  or: [B_MagicMonster_filter]
}

enum B_MagicMonster_orderBy {
  id
  xpReward
  damage
  hp
  cooldown
  cost
  name
  uri
}

type B_Monster {
  id: ID!
  xpReward: Int!
  damage: Int!
  hp: Int!
  cooldown: Int!
  name: String!
  uri: String!
}

input B_Monster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  xpReward: Int
  xpReward_not: Int
  xpReward_gt: Int
  xpReward_lt: Int
  xpReward_gte: Int
  xpReward_lte: Int
  xpReward_in: [Int!]
  xpReward_not_in: [Int!]
  damage: Int
  damage_not: Int
  damage_gt: Int
  damage_lt: Int
  damage_gte: Int
  damage_lte: Int
  damage_in: [Int!]
  damage_not_in: [Int!]
  hp: Int
  hp_not: Int
  hp_gt: Int
  hp_lt: Int
  hp_gte: Int
  hp_lte: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_Monster_filter]
  or: [B_Monster_filter]
}

enum B_Monster_orderBy {
  id
  xpReward
  damage
  hp
  cooldown
  name
  uri
}

"""Defines the order direction, either ascending or descending"""
enum B_OrderDirection {
  asc
  desc
}

type B_Player {
  id: ID!
  Player_id: BigInt!
  user: B_User!
  name: String!
  classes: String!
  stats: String!
  exp: Int!
  level: Int!
  strength: Int!
  magic: Int!
  agility: Int!
  defense: Int!
  currentHealth: Int!
  maxHealth: Int!
  currentMana: Int!
  maxMana: Int!
  totalWins: Int!
  totalLosses: Int!
  potionBalance(skip: Int = 0, first: Int = 100, orderBy: B_BasicPotionBalance_orderBy, orderDirection: B_OrderDirection, where: B_BasicPotionBalance_filter): [B_BasicPotionBalance!]!
  equipment(skip: Int = 0, first: Int = 100, orderBy: B_Equipment_orderBy, orderDirection: B_OrderDirection, where: B_Equipment_filter): [B_Equipment!]!
  treasureBalance(skip: Int = 0, first: Int = 100, orderBy: B_TreasureBalance_orderBy, orderDirection: B_OrderDirection, where: B_TreasureBalance_filter): [B_TreasureBalance!]!
  arenaResult(skip: Int = 0, first: Int = 100, orderBy: B_ArenaResults_orderBy, orderDirection: B_OrderDirection, where: B_ArenaResults_filter): [B_ArenaResults!]!
}

input B_Player_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  Player_id: BigInt
  Player_id_not: BigInt
  Player_id_gt: BigInt
  Player_id_lt: BigInt
  Player_id_gte: BigInt
  Player_id_lte: BigInt
  Player_id_in: [BigInt!]
  Player_id_not_in: [BigInt!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: B_User_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  classes: String
  classes_not: String
  classes_gt: String
  classes_lt: String
  classes_gte: String
  classes_lte: String
  classes_in: [String!]
  classes_not_in: [String!]
  classes_contains: String
  classes_contains_nocase: String
  classes_not_contains: String
  classes_not_contains_nocase: String
  classes_starts_with: String
  classes_starts_with_nocase: String
  classes_not_starts_with: String
  classes_not_starts_with_nocase: String
  classes_ends_with: String
  classes_ends_with_nocase: String
  classes_not_ends_with: String
  classes_not_ends_with_nocase: String
  stats: String
  stats_not: String
  stats_gt: String
  stats_lt: String
  stats_gte: String
  stats_lte: String
  stats_in: [String!]
  stats_not_in: [String!]
  stats_contains: String
  stats_contains_nocase: String
  stats_not_contains: String
  stats_not_contains_nocase: String
  stats_starts_with: String
  stats_starts_with_nocase: String
  stats_not_starts_with: String
  stats_not_starts_with_nocase: String
  stats_ends_with: String
  stats_ends_with_nocase: String
  stats_not_ends_with: String
  stats_not_ends_with_nocase: String
  exp: Int
  exp_not: Int
  exp_gt: Int
  exp_lt: Int
  exp_gte: Int
  exp_lte: Int
  exp_in: [Int!]
  exp_not_in: [Int!]
  level: Int
  level_not: Int
  level_gt: Int
  level_lt: Int
  level_gte: Int
  level_lte: Int
  level_in: [Int!]
  level_not_in: [Int!]
  strength: Int
  strength_not: Int
  strength_gt: Int
  strength_lt: Int
  strength_gte: Int
  strength_lte: Int
  strength_in: [Int!]
  strength_not_in: [Int!]
  magic: Int
  magic_not: Int
  magic_gt: Int
  magic_lt: Int
  magic_gte: Int
  magic_lte: Int
  magic_in: [Int!]
  magic_not_in: [Int!]
  agility: Int
  agility_not: Int
  agility_gt: Int
  agility_lt: Int
  agility_gte: Int
  agility_lte: Int
  agility_in: [Int!]
  agility_not_in: [Int!]
  defense: Int
  defense_not: Int
  defense_gt: Int
  defense_lt: Int
  defense_gte: Int
  defense_lte: Int
  defense_in: [Int!]
  defense_not_in: [Int!]
  currentHealth: Int
  currentHealth_not: Int
  currentHealth_gt: Int
  currentHealth_lt: Int
  currentHealth_gte: Int
  currentHealth_lte: Int
  currentHealth_in: [Int!]
  currentHealth_not_in: [Int!]
  maxHealth: Int
  maxHealth_not: Int
  maxHealth_gt: Int
  maxHealth_lt: Int
  maxHealth_gte: Int
  maxHealth_lte: Int
  maxHealth_in: [Int!]
  maxHealth_not_in: [Int!]
  currentMana: Int
  currentMana_not: Int
  currentMana_gt: Int
  currentMana_lt: Int
  currentMana_gte: Int
  currentMana_lte: Int
  currentMana_in: [Int!]
  currentMana_not_in: [Int!]
  maxMana: Int
  maxMana_not: Int
  maxMana_gt: Int
  maxMana_lt: Int
  maxMana_gte: Int
  maxMana_lte: Int
  maxMana_in: [Int!]
  maxMana_not_in: [Int!]
  totalWins: Int
  totalWins_not: Int
  totalWins_gt: Int
  totalWins_lt: Int
  totalWins_gte: Int
  totalWins_lte: Int
  totalWins_in: [Int!]
  totalWins_not_in: [Int!]
  totalLosses: Int
  totalLosses_not: Int
  totalLosses_gt: Int
  totalLosses_lt: Int
  totalLosses_gte: Int
  totalLosses_lte: Int
  totalLosses_in: [Int!]
  totalLosses_not_in: [Int!]
  potionBalance_: B_BasicPotionBalance_filter
  equipment_: B_Equipment_filter
  treasureBalance_: B_TreasureBalance_filter
  arenaResult_: B_ArenaResults_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_Player_filter]
  or: [B_Player_filter]
}

enum B_Player_orderBy {
  id
  Player_id
  user
  user__id
  user__gold
  user__gem
  name
  classes
  stats
  exp
  level
  strength
  magic
  agility
  defense
  currentHealth
  maxHealth
  currentMana
  maxMana
  totalWins
  totalLosses
  potionBalance
  equipment
  treasureBalance
  arenaResult
}

type B_Sale {
  id: ID!
  price: BigInt!
  player: B_Player!
  seller: String!
  buyer: String!
  timestamp: BigInt!
  txHash: String!
}

input B_Sale_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: B_Player_filter
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  buyer: String
  buyer_not: String
  buyer_gt: String
  buyer_lt: String
  buyer_gte: String
  buyer_lte: String
  buyer_in: [String!]
  buyer_not_in: [String!]
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_Sale_filter]
  or: [B_Sale_filter]
}

enum B_Sale_orderBy {
  id
  price
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  seller
  buyer
  timestamp
  txHash
}

type B_Treasure {
  id: ID!
  rank: Int!
  name: String!
  uri: String!
  TreasureBalance(skip: Int = 0, first: Int = 100, orderBy: B_TreasureBalance_orderBy, orderDirection: B_OrderDirection, where: B_TreasureBalance_filter): [B_TreasureBalance!]!
}

type B_TreasureBalance {
  id: ID!
  balance: Int!
  treasure: B_Treasure!
  player: B_Player!
}

input B_TreasureBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: Int
  balance_not: Int
  balance_gt: Int
  balance_lt: Int
  balance_gte: Int
  balance_lte: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  treasure: String
  treasure_not: String
  treasure_gt: String
  treasure_lt: String
  treasure_gte: String
  treasure_lte: String
  treasure_in: [String!]
  treasure_not_in: [String!]
  treasure_contains: String
  treasure_contains_nocase: String
  treasure_not_contains: String
  treasure_not_contains_nocase: String
  treasure_starts_with: String
  treasure_starts_with_nocase: String
  treasure_not_starts_with: String
  treasure_not_starts_with_nocase: String
  treasure_ends_with: String
  treasure_ends_with_nocase: String
  treasure_not_ends_with: String
  treasure_not_ends_with_nocase: String
  treasure_: B_Treasure_filter
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: B_Player_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_TreasureBalance_filter]
  or: [B_TreasureBalance_filter]
}

enum B_TreasureBalance_orderBy {
  id
  balance
  treasure
  treasure__id
  treasure__rank
  treasure__name
  treasure__uri
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

input B_Treasure_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rank: Int
  rank_not: Int
  rank_gt: Int
  rank_lt: Int
  rank_gte: Int
  rank_lte: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  TreasureBalance_: B_TreasureBalance_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_Treasure_filter]
  or: [B_Treasure_filter]
}

enum B_Treasure_orderBy {
  id
  rank
  name
  uri
  TreasureBalance
}

type B_User {
  id: ID!
  gold: Int!
  gem: Int!
  players(skip: Int = 0, first: Int = 100, orderBy: B_Player_orderBy, orderDirection: B_OrderDirection, where: B_Player_filter): [B_Player!]!
}

input B_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  gold: Int
  gold_not: Int
  gold_gt: Int
  gold_lt: Int
  gold_gte: Int
  gold_lte: Int
  gold_in: [Int!]
  gold_not_in: [Int!]
  gem: Int
  gem_not: Int
  gem_gt: Int
  gem_lt: Int
  gem_gte: Int
  gem_lte: Int
  gem_in: [Int!]
  gem_not_in: [Int!]
  players_: B_Player_filter
  """Filter for the block changed event."""
  _change_block: B_BlockChangedFilter
  and: [B_User_filter]
  or: [B_User_filter]
}

enum B_User_orderBy {
  id
  gold
  gem
  players
}

type B__Block_ {
  """The hash of the block"""
  hash: B_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type B__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: B__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type S_AdvancedCraft {
  id: ID!
  slot: String!
  value: Int!
  stat: String!
  treasure: S_Treasure!
  oldName: String!
  newName: String!
  uri: String!
}

input S_AdvancedCraft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  treasure: String
  treasure_not: String
  treasure_gt: String
  treasure_lt: String
  treasure_gte: String
  treasure_lte: String
  treasure_in: [String!]
  treasure_not_in: [String!]
  treasure_contains: String
  treasure_contains_nocase: String
  treasure_not_contains: String
  treasure_not_contains_nocase: String
  treasure_starts_with: String
  treasure_starts_with_nocase: String
  treasure_not_starts_with: String
  treasure_not_starts_with_nocase: String
  treasure_ends_with: String
  treasure_ends_with_nocase: String
  treasure_not_ends_with: String
  treasure_not_ends_with_nocase: String
  treasure_: S_Treasure_filter
  oldName: String
  oldName_not: String
  oldName_gt: String
  oldName_lt: String
  oldName_gte: String
  oldName_lte: String
  oldName_in: [String!]
  oldName_not_in: [String!]
  oldName_contains: String
  oldName_contains_nocase: String
  oldName_not_contains: String
  oldName_not_contains_nocase: String
  oldName_starts_with: String
  oldName_starts_with_nocase: String
  oldName_not_starts_with: String
  oldName_not_starts_with_nocase: String
  oldName_ends_with: String
  oldName_ends_with_nocase: String
  oldName_not_ends_with: String
  oldName_not_ends_with_nocase: String
  newName: String
  newName_not: String
  newName_gt: String
  newName_lt: String
  newName_gte: String
  newName_lte: String
  newName_in: [String!]
  newName_not_in: [String!]
  newName_contains: String
  newName_contains_nocase: String
  newName_not_contains: String
  newName_not_contains_nocase: String
  newName_starts_with: String
  newName_starts_with_nocase: String
  newName_not_starts_with: String
  newName_not_starts_with_nocase: String
  newName_ends_with: String
  newName_ends_with_nocase: String
  newName_not_ends_with: String
  newName_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_AdvancedCraft_filter]
  or: [S_AdvancedCraft_filter]
}

enum S_AdvancedCraft_orderBy {
  id
  slot
  value
  stat
  treasure
  treasure__id
  treasure__rank
  treasure__name
  treasure__uri
  oldName
  newName
  uri
}

type S_Arena {
  id: ID!
  name: String!
  uri: String!
  cost: Int!
  cooldown: Int!
  host: S_Player
  arenaResult(skip: Int = 0, first: Int = 100, orderBy: S_ArenaResults_orderBy, orderDirection: S_OrderDirection, where: S_ArenaResults_filter): [S_ArenaResults!]!
}

type S_ArenaResults {
  id: ID!
  player: S_Player!
  arena: S_Arena!
  wins: Int!
  losses: Int!
}

input S_ArenaResults_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: S_Player_filter
  arena: String
  arena_not: String
  arena_gt: String
  arena_lt: String
  arena_gte: String
  arena_lte: String
  arena_in: [String!]
  arena_not_in: [String!]
  arena_contains: String
  arena_contains_nocase: String
  arena_not_contains: String
  arena_not_contains_nocase: String
  arena_starts_with: String
  arena_starts_with_nocase: String
  arena_not_starts_with: String
  arena_not_starts_with_nocase: String
  arena_ends_with: String
  arena_ends_with_nocase: String
  arena_not_ends_with: String
  arena_not_ends_with_nocase: String
  arena_: S_Arena_filter
  wins: Int
  wins_not: Int
  wins_gt: Int
  wins_lt: Int
  wins_gte: Int
  wins_lte: Int
  wins_in: [Int!]
  wins_not_in: [Int!]
  losses: Int
  losses_not: Int
  losses_gt: Int
  losses_lt: Int
  losses_gte: Int
  losses_lte: Int
  losses_in: [Int!]
  losses_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_ArenaResults_filter]
  or: [S_ArenaResults_filter]
}

enum S_ArenaResults_orderBy {
  id
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  arena
  arena__id
  arena__name
  arena__uri
  arena__cost
  arena__cooldown
  wins
  losses
}

input S_Arena_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  host: String
  host_not: String
  host_gt: String
  host_lt: String
  host_gte: String
  host_lte: String
  host_in: [String!]
  host_not_in: [String!]
  host_contains: String
  host_contains_nocase: String
  host_not_contains: String
  host_not_contains_nocase: String
  host_starts_with: String
  host_starts_with_nocase: String
  host_not_starts_with: String
  host_not_starts_with_nocase: String
  host_ends_with: String
  host_ends_with_nocase: String
  host_not_ends_with: String
  host_not_ends_with_nocase: String
  host_: S_Player_filter
  arenaResult_: S_ArenaResults_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_Arena_filter]
  or: [S_Arena_filter]
}

enum S_Arena_orderBy {
  id
  name
  uri
  cost
  cooldown
  host
  host__id
  host__Player_id
  host__name
  host__classes
  host__stats
  host__exp
  host__level
  host__strength
  host__magic
  host__agility
  host__defense
  host__currentHealth
  host__maxHealth
  host__currentMana
  host__maxMana
  host__totalWins
  host__totalLosses
  arenaResult
}

type S_BasicCraft {
  id: ID!
  slot: String!
  value: Int!
  cost: Int!
  oldName: String!
  newName: String!
  uri: String!
}

input S_BasicCraft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  oldName: String
  oldName_not: String
  oldName_gt: String
  oldName_lt: String
  oldName_gte: String
  oldName_lte: String
  oldName_in: [String!]
  oldName_not_in: [String!]
  oldName_contains: String
  oldName_contains_nocase: String
  oldName_not_contains: String
  oldName_not_contains_nocase: String
  oldName_starts_with: String
  oldName_starts_with_nocase: String
  oldName_not_starts_with: String
  oldName_not_starts_with_nocase: String
  oldName_ends_with: String
  oldName_ends_with_nocase: String
  oldName_not_ends_with: String
  oldName_not_ends_with_nocase: String
  newName: String
  newName_not: String
  newName_gt: String
  newName_lt: String
  newName_gte: String
  newName_lte: String
  newName_in: [String!]
  newName_not_in: [String!]
  newName_contains: String
  newName_contains_nocase: String
  newName_not_contains: String
  newName_not_contains_nocase: String
  newName_starts_with: String
  newName_starts_with_nocase: String
  newName_not_starts_with: String
  newName_not_starts_with_nocase: String
  newName_ends_with: String
  newName_ends_with_nocase: String
  newName_not_ends_with: String
  newName_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_BasicCraft_filter]
  or: [S_BasicCraft_filter]
}

enum S_BasicCraft_orderBy {
  id
  slot
  value
  cost
  oldName
  newName
  uri
}

type S_BasicPotion {
  id: ID!
  value: Int!
  cost: Int!
  type: String!
  name: String!
  uri: String!
  potionBalance(skip: Int = 0, first: Int = 100, orderBy: S_BasicPotionBalance_orderBy, orderDirection: S_OrderDirection, where: S_BasicPotionBalance_filter): [S_BasicPotionBalance!]!
}

type S_BasicPotionBalance {
  id: ID!
  balance: Int!
  potion: S_BasicPotion!
  player: S_Player!
}

input S_BasicPotionBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: Int
  balance_not: Int
  balance_gt: Int
  balance_lt: Int
  balance_gte: Int
  balance_lte: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  potion: String
  potion_not: String
  potion_gt: String
  potion_lt: String
  potion_gte: String
  potion_lte: String
  potion_in: [String!]
  potion_not_in: [String!]
  potion_contains: String
  potion_contains_nocase: String
  potion_not_contains: String
  potion_not_contains_nocase: String
  potion_starts_with: String
  potion_starts_with_nocase: String
  potion_not_starts_with: String
  potion_not_starts_with_nocase: String
  potion_ends_with: String
  potion_ends_with_nocase: String
  potion_not_ends_with: String
  potion_not_ends_with_nocase: String
  potion_: S_BasicPotion_filter
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: S_Player_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_BasicPotionBalance_filter]
  or: [S_BasicPotionBalance_filter]
}

enum S_BasicPotionBalance_orderBy {
  id
  balance
  potion
  potion__id
  potion__value
  potion__cost
  potion__type
  potion__name
  potion__uri
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

input S_BasicPotion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  potionBalance_: S_BasicPotionBalance_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_BasicPotion_filter]
  or: [S_BasicPotion_filter]
}

enum S_BasicPotion_orderBy {
  id
  value
  cost
  type
  name
  uri
  potionBalance
}

scalar S_BigDecimal

input S_BlockChangedFilter {
  number_gte: Int!
}

input S_Block_height {
  hash: S_Bytes
  number: Int
  number_gte: Int
}

scalar S_Bytes

type S_EquipCount {
  id: ID!
  count: Int!
}

input S_EquipCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: Int
  count_not: Int
  count_gt: Int
  count_lt: Int
  count_gte: Int
  count_lte: Int
  count_in: [Int!]
  count_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_EquipCount_filter]
  or: [S_EquipCount_filter]
}

enum S_EquipCount_orderBy {
  id
  count
}

type S_Equipment {
  id: ID!
  slot: String!
  rank: Int!
  value: Int!
  stat: String!
  player: S_Player!
  name: String!
  uri: String!
  isEquipped: Boolean!
}

type S_EquipmentInStore {
  id: ID!
  slot: String!
  value: Int!
  stat: String!
  cost: Int!
  name: String!
  uri: String!
}

input S_EquipmentInStore_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_EquipmentInStore_filter]
  or: [S_EquipmentInStore_filter]
}

enum S_EquipmentInStore_orderBy {
  id
  slot
  value
  stat
  cost
  name
  uri
}

input S_Equipment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  rank: Int
  rank_not: Int
  rank_gt: Int
  rank_lt: Int
  rank_gte: Int
  rank_lte: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: S_Player_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  isEquipped: Boolean
  isEquipped_not: Boolean
  isEquipped_in: [Boolean!]
  isEquipped_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_Equipment_filter]
  or: [S_Equipment_filter]
}

enum S_Equipment_orderBy {
  id
  slot
  rank
  value
  stat
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  name
  uri
  isEquipped
}

"""
8 bytes signed integer

"""
scalar S_Int8

type S_Listing {
  id: ID!
  price: BigInt!
  seller: String!
  timestamp: BigInt!
  player: S_Player!
}

input S_Listing_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: S_Player_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_Listing_filter]
  or: [S_Listing_filter]
}

enum S_Listing_orderBy {
  id
  price
  seller
  timestamp
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

type S_MagicMonster {
  id: ID!
  xpReward: Int!
  damage: Int!
  hp: Int!
  cooldown: Int!
  cost: Int!
  name: String!
  uri: String!
}

input S_MagicMonster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  xpReward: Int
  xpReward_not: Int
  xpReward_gt: Int
  xpReward_lt: Int
  xpReward_gte: Int
  xpReward_lte: Int
  xpReward_in: [Int!]
  xpReward_not_in: [Int!]
  damage: Int
  damage_not: Int
  damage_gt: Int
  damage_lt: Int
  damage_gte: Int
  damage_lte: Int
  damage_in: [Int!]
  damage_not_in: [Int!]
  hp: Int
  hp_not: Int
  hp_gt: Int
  hp_lt: Int
  hp_gte: Int
  hp_lte: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_MagicMonster_filter]
  or: [S_MagicMonster_filter]
}

enum S_MagicMonster_orderBy {
  id
  xpReward
  damage
  hp
  cooldown
  cost
  name
  uri
}

type S_Monster {
  id: ID!
  xpReward: Int!
  damage: Int!
  hp: Int!
  cooldown: Int!
  name: String!
  uri: String!
}

input S_Monster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  xpReward: Int
  xpReward_not: Int
  xpReward_gt: Int
  xpReward_lt: Int
  xpReward_gte: Int
  xpReward_lte: Int
  xpReward_in: [Int!]
  xpReward_not_in: [Int!]
  damage: Int
  damage_not: Int
  damage_gt: Int
  damage_lt: Int
  damage_gte: Int
  damage_lte: Int
  damage_in: [Int!]
  damage_not_in: [Int!]
  hp: Int
  hp_not: Int
  hp_gt: Int
  hp_lt: Int
  hp_gte: Int
  hp_lte: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_Monster_filter]
  or: [S_Monster_filter]
}

enum S_Monster_orderBy {
  id
  xpReward
  damage
  hp
  cooldown
  name
  uri
}

"""Defines the order direction, either ascending or descending"""
enum S_OrderDirection {
  asc
  desc
}

type S_Player {
  id: ID!
  Player_id: BigInt!
  user: S_User!
  name: String!
  classes: String!
  stats: String!
  exp: Int!
  level: Int!
  strength: Int!
  magic: Int!
  agility: Int!
  defense: Int!
  currentHealth: Int!
  maxHealth: Int!
  currentMana: Int!
  maxMana: Int!
  totalWins: Int!
  totalLosses: Int!
  potionBalance(skip: Int = 0, first: Int = 100, orderBy: S_BasicPotionBalance_orderBy, orderDirection: S_OrderDirection, where: S_BasicPotionBalance_filter): [S_BasicPotionBalance!]!
  equipment(skip: Int = 0, first: Int = 100, orderBy: S_Equipment_orderBy, orderDirection: S_OrderDirection, where: S_Equipment_filter): [S_Equipment!]!
  treasureBalance(skip: Int = 0, first: Int = 100, orderBy: S_TreasureBalance_orderBy, orderDirection: S_OrderDirection, where: S_TreasureBalance_filter): [S_TreasureBalance!]!
  arenaResult(skip: Int = 0, first: Int = 100, orderBy: S_ArenaResults_orderBy, orderDirection: S_OrderDirection, where: S_ArenaResults_filter): [S_ArenaResults!]!
}

input S_Player_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  Player_id: BigInt
  Player_id_not: BigInt
  Player_id_gt: BigInt
  Player_id_lt: BigInt
  Player_id_gte: BigInt
  Player_id_lte: BigInt
  Player_id_in: [BigInt!]
  Player_id_not_in: [BigInt!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: S_User_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  classes: String
  classes_not: String
  classes_gt: String
  classes_lt: String
  classes_gte: String
  classes_lte: String
  classes_in: [String!]
  classes_not_in: [String!]
  classes_contains: String
  classes_contains_nocase: String
  classes_not_contains: String
  classes_not_contains_nocase: String
  classes_starts_with: String
  classes_starts_with_nocase: String
  classes_not_starts_with: String
  classes_not_starts_with_nocase: String
  classes_ends_with: String
  classes_ends_with_nocase: String
  classes_not_ends_with: String
  classes_not_ends_with_nocase: String
  stats: String
  stats_not: String
  stats_gt: String
  stats_lt: String
  stats_gte: String
  stats_lte: String
  stats_in: [String!]
  stats_not_in: [String!]
  stats_contains: String
  stats_contains_nocase: String
  stats_not_contains: String
  stats_not_contains_nocase: String
  stats_starts_with: String
  stats_starts_with_nocase: String
  stats_not_starts_with: String
  stats_not_starts_with_nocase: String
  stats_ends_with: String
  stats_ends_with_nocase: String
  stats_not_ends_with: String
  stats_not_ends_with_nocase: String
  exp: Int
  exp_not: Int
  exp_gt: Int
  exp_lt: Int
  exp_gte: Int
  exp_lte: Int
  exp_in: [Int!]
  exp_not_in: [Int!]
  level: Int
  level_not: Int
  level_gt: Int
  level_lt: Int
  level_gte: Int
  level_lte: Int
  level_in: [Int!]
  level_not_in: [Int!]
  strength: Int
  strength_not: Int
  strength_gt: Int
  strength_lt: Int
  strength_gte: Int
  strength_lte: Int
  strength_in: [Int!]
  strength_not_in: [Int!]
  magic: Int
  magic_not: Int
  magic_gt: Int
  magic_lt: Int
  magic_gte: Int
  magic_lte: Int
  magic_in: [Int!]
  magic_not_in: [Int!]
  agility: Int
  agility_not: Int
  agility_gt: Int
  agility_lt: Int
  agility_gte: Int
  agility_lte: Int
  agility_in: [Int!]
  agility_not_in: [Int!]
  defense: Int
  defense_not: Int
  defense_gt: Int
  defense_lt: Int
  defense_gte: Int
  defense_lte: Int
  defense_in: [Int!]
  defense_not_in: [Int!]
  currentHealth: Int
  currentHealth_not: Int
  currentHealth_gt: Int
  currentHealth_lt: Int
  currentHealth_gte: Int
  currentHealth_lte: Int
  currentHealth_in: [Int!]
  currentHealth_not_in: [Int!]
  maxHealth: Int
  maxHealth_not: Int
  maxHealth_gt: Int
  maxHealth_lt: Int
  maxHealth_gte: Int
  maxHealth_lte: Int
  maxHealth_in: [Int!]
  maxHealth_not_in: [Int!]
  currentMana: Int
  currentMana_not: Int
  currentMana_gt: Int
  currentMana_lt: Int
  currentMana_gte: Int
  currentMana_lte: Int
  currentMana_in: [Int!]
  currentMana_not_in: [Int!]
  maxMana: Int
  maxMana_not: Int
  maxMana_gt: Int
  maxMana_lt: Int
  maxMana_gte: Int
  maxMana_lte: Int
  maxMana_in: [Int!]
  maxMana_not_in: [Int!]
  totalWins: Int
  totalWins_not: Int
  totalWins_gt: Int
  totalWins_lt: Int
  totalWins_gte: Int
  totalWins_lte: Int
  totalWins_in: [Int!]
  totalWins_not_in: [Int!]
  totalLosses: Int
  totalLosses_not: Int
  totalLosses_gt: Int
  totalLosses_lt: Int
  totalLosses_gte: Int
  totalLosses_lte: Int
  totalLosses_in: [Int!]
  totalLosses_not_in: [Int!]
  potionBalance_: S_BasicPotionBalance_filter
  equipment_: S_Equipment_filter
  treasureBalance_: S_TreasureBalance_filter
  arenaResult_: S_ArenaResults_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_Player_filter]
  or: [S_Player_filter]
}

enum S_Player_orderBy {
  id
  Player_id
  user
  user__id
  user__gold
  user__gem
  name
  classes
  stats
  exp
  level
  strength
  magic
  agility
  defense
  currentHealth
  maxHealth
  currentMana
  maxMana
  totalWins
  totalLosses
  potionBalance
  equipment
  treasureBalance
  arenaResult
}

type S_Sale {
  id: ID!
  price: BigInt!
  player: S_Player!
  seller: String!
  buyer: String!
  timestamp: BigInt!
  txHash: String!
}

input S_Sale_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: S_Player_filter
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  buyer: String
  buyer_not: String
  buyer_gt: String
  buyer_lt: String
  buyer_gte: String
  buyer_lte: String
  buyer_in: [String!]
  buyer_not_in: [String!]
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_Sale_filter]
  or: [S_Sale_filter]
}

enum S_Sale_orderBy {
  id
  price
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  seller
  buyer
  timestamp
  txHash
}

type S_Treasure {
  id: ID!
  rank: Int!
  name: String!
  uri: String!
  TreasureBalance(skip: Int = 0, first: Int = 100, orderBy: S_TreasureBalance_orderBy, orderDirection: S_OrderDirection, where: S_TreasureBalance_filter): [S_TreasureBalance!]!
}

type S_TreasureBalance {
  id: ID!
  balance: Int!
  treasure: S_Treasure!
  player: S_Player!
}

input S_TreasureBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: Int
  balance_not: Int
  balance_gt: Int
  balance_lt: Int
  balance_gte: Int
  balance_lte: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  treasure: String
  treasure_not: String
  treasure_gt: String
  treasure_lt: String
  treasure_gte: String
  treasure_lte: String
  treasure_in: [String!]
  treasure_not_in: [String!]
  treasure_contains: String
  treasure_contains_nocase: String
  treasure_not_contains: String
  treasure_not_contains_nocase: String
  treasure_starts_with: String
  treasure_starts_with_nocase: String
  treasure_not_starts_with: String
  treasure_not_starts_with_nocase: String
  treasure_ends_with: String
  treasure_ends_with_nocase: String
  treasure_not_ends_with: String
  treasure_not_ends_with_nocase: String
  treasure_: S_Treasure_filter
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: S_Player_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_TreasureBalance_filter]
  or: [S_TreasureBalance_filter]
}

enum S_TreasureBalance_orderBy {
  id
  balance
  treasure
  treasure__id
  treasure__rank
  treasure__name
  treasure__uri
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

input S_Treasure_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rank: Int
  rank_not: Int
  rank_gt: Int
  rank_lt: Int
  rank_gte: Int
  rank_lte: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  TreasureBalance_: S_TreasureBalance_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_Treasure_filter]
  or: [S_Treasure_filter]
}

enum S_Treasure_orderBy {
  id
  rank
  name
  uri
  TreasureBalance
}

type S_User {
  id: ID!
  gold: Int!
  gem: Int!
  players(skip: Int = 0, first: Int = 100, orderBy: S_Player_orderBy, orderDirection: S_OrderDirection, where: S_Player_filter): [S_Player!]!
}

input S_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  gold: Int
  gold_not: Int
  gold_gt: Int
  gold_lt: Int
  gold_gte: Int
  gold_lte: Int
  gold_in: [Int!]
  gold_not_in: [Int!]
  gem: Int
  gem_not: Int
  gem_gt: Int
  gem_lt: Int
  gem_gte: Int
  gem_lte: Int
  gem_in: [Int!]
  gem_not_in: [Int!]
  players_: S_Player_filter
  """Filter for the block changed event."""
  _change_block: S_BlockChangedFilter
  and: [S_User_filter]
  or: [S_User_filter]
}

enum S_User_orderBy {
  id
  gold
  gem
  players
}

type S__Block_ {
  """The hash of the block"""
  hash: S_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type S__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: S__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

type A_AdvancedCraft {
  id: ID!
  slot: String!
  value: Int!
  stat: String!
  treasure: A_Treasure!
  oldName: String!
  newName: String!
  uri: String!
}

input A_AdvancedCraft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  treasure: String
  treasure_not: String
  treasure_gt: String
  treasure_lt: String
  treasure_gte: String
  treasure_lte: String
  treasure_in: [String!]
  treasure_not_in: [String!]
  treasure_contains: String
  treasure_contains_nocase: String
  treasure_not_contains: String
  treasure_not_contains_nocase: String
  treasure_starts_with: String
  treasure_starts_with_nocase: String
  treasure_not_starts_with: String
  treasure_not_starts_with_nocase: String
  treasure_ends_with: String
  treasure_ends_with_nocase: String
  treasure_not_ends_with: String
  treasure_not_ends_with_nocase: String
  treasure_: A_Treasure_filter
  oldName: String
  oldName_not: String
  oldName_gt: String
  oldName_lt: String
  oldName_gte: String
  oldName_lte: String
  oldName_in: [String!]
  oldName_not_in: [String!]
  oldName_contains: String
  oldName_contains_nocase: String
  oldName_not_contains: String
  oldName_not_contains_nocase: String
  oldName_starts_with: String
  oldName_starts_with_nocase: String
  oldName_not_starts_with: String
  oldName_not_starts_with_nocase: String
  oldName_ends_with: String
  oldName_ends_with_nocase: String
  oldName_not_ends_with: String
  oldName_not_ends_with_nocase: String
  newName: String
  newName_not: String
  newName_gt: String
  newName_lt: String
  newName_gte: String
  newName_lte: String
  newName_in: [String!]
  newName_not_in: [String!]
  newName_contains: String
  newName_contains_nocase: String
  newName_not_contains: String
  newName_not_contains_nocase: String
  newName_starts_with: String
  newName_starts_with_nocase: String
  newName_not_starts_with: String
  newName_not_starts_with_nocase: String
  newName_ends_with: String
  newName_ends_with_nocase: String
  newName_not_ends_with: String
  newName_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_AdvancedCraft_filter]
  or: [A_AdvancedCraft_filter]
}

enum A_AdvancedCraft_orderBy {
  id
  slot
  value
  stat
  treasure
  treasure__id
  treasure__rank
  treasure__name
  treasure__uri
  oldName
  newName
  uri
}

type A_Arena {
  id: ID!
  name: String!
  uri: String!
  cost: Int!
  cooldown: Int!
  host: A_Player
  arenaResult(skip: Int = 0, first: Int = 100, orderBy: A_ArenaResults_orderBy, orderDirection: A_OrderDirection, where: A_ArenaResults_filter): [A_ArenaResults!]!
}

type A_ArenaResults {
  id: ID!
  player: A_Player!
  arena: A_Arena!
  wins: Int!
  losses: Int!
}

input A_ArenaResults_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: A_Player_filter
  arena: String
  arena_not: String
  arena_gt: String
  arena_lt: String
  arena_gte: String
  arena_lte: String
  arena_in: [String!]
  arena_not_in: [String!]
  arena_contains: String
  arena_contains_nocase: String
  arena_not_contains: String
  arena_not_contains_nocase: String
  arena_starts_with: String
  arena_starts_with_nocase: String
  arena_not_starts_with: String
  arena_not_starts_with_nocase: String
  arena_ends_with: String
  arena_ends_with_nocase: String
  arena_not_ends_with: String
  arena_not_ends_with_nocase: String
  arena_: A_Arena_filter
  wins: Int
  wins_not: Int
  wins_gt: Int
  wins_lt: Int
  wins_gte: Int
  wins_lte: Int
  wins_in: [Int!]
  wins_not_in: [Int!]
  losses: Int
  losses_not: Int
  losses_gt: Int
  losses_lt: Int
  losses_gte: Int
  losses_lte: Int
  losses_in: [Int!]
  losses_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_ArenaResults_filter]
  or: [A_ArenaResults_filter]
}

enum A_ArenaResults_orderBy {
  id
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  arena
  arena__id
  arena__name
  arena__uri
  arena__cost
  arena__cooldown
  wins
  losses
}

input A_Arena_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  host: String
  host_not: String
  host_gt: String
  host_lt: String
  host_gte: String
  host_lte: String
  host_in: [String!]
  host_not_in: [String!]
  host_contains: String
  host_contains_nocase: String
  host_not_contains: String
  host_not_contains_nocase: String
  host_starts_with: String
  host_starts_with_nocase: String
  host_not_starts_with: String
  host_not_starts_with_nocase: String
  host_ends_with: String
  host_ends_with_nocase: String
  host_not_ends_with: String
  host_not_ends_with_nocase: String
  host_: A_Player_filter
  arenaResult_: A_ArenaResults_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_Arena_filter]
  or: [A_Arena_filter]
}

enum A_Arena_orderBy {
  id
  name
  uri
  cost
  cooldown
  host
  host__id
  host__Player_id
  host__name
  host__classes
  host__stats
  host__exp
  host__level
  host__strength
  host__magic
  host__agility
  host__defense
  host__currentHealth
  host__maxHealth
  host__currentMana
  host__maxMana
  host__totalWins
  host__totalLosses
  arenaResult
}

type A_BasicCraft {
  id: ID!
  slot: String!
  value: Int!
  cost: Int!
  oldName: String!
  newName: String!
  uri: String!
}

input A_BasicCraft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  oldName: String
  oldName_not: String
  oldName_gt: String
  oldName_lt: String
  oldName_gte: String
  oldName_lte: String
  oldName_in: [String!]
  oldName_not_in: [String!]
  oldName_contains: String
  oldName_contains_nocase: String
  oldName_not_contains: String
  oldName_not_contains_nocase: String
  oldName_starts_with: String
  oldName_starts_with_nocase: String
  oldName_not_starts_with: String
  oldName_not_starts_with_nocase: String
  oldName_ends_with: String
  oldName_ends_with_nocase: String
  oldName_not_ends_with: String
  oldName_not_ends_with_nocase: String
  newName: String
  newName_not: String
  newName_gt: String
  newName_lt: String
  newName_gte: String
  newName_lte: String
  newName_in: [String!]
  newName_not_in: [String!]
  newName_contains: String
  newName_contains_nocase: String
  newName_not_contains: String
  newName_not_contains_nocase: String
  newName_starts_with: String
  newName_starts_with_nocase: String
  newName_not_starts_with: String
  newName_not_starts_with_nocase: String
  newName_ends_with: String
  newName_ends_with_nocase: String
  newName_not_ends_with: String
  newName_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_BasicCraft_filter]
  or: [A_BasicCraft_filter]
}

enum A_BasicCraft_orderBy {
  id
  slot
  value
  cost
  oldName
  newName
  uri
}

type A_BasicPotion {
  id: ID!
  value: Int!
  cost: Int!
  type: String!
  name: String!
  uri: String!
  potionBalance(skip: Int = 0, first: Int = 100, orderBy: A_BasicPotionBalance_orderBy, orderDirection: A_OrderDirection, where: A_BasicPotionBalance_filter): [A_BasicPotionBalance!]!
}

type A_BasicPotionBalance {
  id: ID!
  balance: Int!
  potion: A_BasicPotion!
  player: A_Player!
}

input A_BasicPotionBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: Int
  balance_not: Int
  balance_gt: Int
  balance_lt: Int
  balance_gte: Int
  balance_lte: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  potion: String
  potion_not: String
  potion_gt: String
  potion_lt: String
  potion_gte: String
  potion_lte: String
  potion_in: [String!]
  potion_not_in: [String!]
  potion_contains: String
  potion_contains_nocase: String
  potion_not_contains: String
  potion_not_contains_nocase: String
  potion_starts_with: String
  potion_starts_with_nocase: String
  potion_not_starts_with: String
  potion_not_starts_with_nocase: String
  potion_ends_with: String
  potion_ends_with_nocase: String
  potion_not_ends_with: String
  potion_not_ends_with_nocase: String
  potion_: A_BasicPotion_filter
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: A_Player_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_BasicPotionBalance_filter]
  or: [A_BasicPotionBalance_filter]
}

enum A_BasicPotionBalance_orderBy {
  id
  balance
  potion
  potion__id
  potion__value
  potion__cost
  potion__type
  potion__name
  potion__uri
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

input A_BasicPotion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  type: String
  type_not: String
  type_gt: String
  type_lt: String
  type_gte: String
  type_lte: String
  type_in: [String!]
  type_not_in: [String!]
  type_contains: String
  type_contains_nocase: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  potionBalance_: A_BasicPotionBalance_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_BasicPotion_filter]
  or: [A_BasicPotion_filter]
}

enum A_BasicPotion_orderBy {
  id
  value
  cost
  type
  name
  uri
  potionBalance
}

scalar A_BigDecimal

input A_BlockChangedFilter {
  number_gte: Int!
}

input A_Block_height {
  hash: A_Bytes
  number: Int
  number_gte: Int
}

scalar A_Bytes

type A_EquipCount {
  id: ID!
  count: Int!
}

input A_EquipCount_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  count: Int
  count_not: Int
  count_gt: Int
  count_lt: Int
  count_gte: Int
  count_lte: Int
  count_in: [Int!]
  count_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_EquipCount_filter]
  or: [A_EquipCount_filter]
}

enum A_EquipCount_orderBy {
  id
  count
}

type A_Equipment {
  id: ID!
  slot: String!
  rank: Int!
  value: Int!
  stat: String!
  player: A_Player!
  name: String!
  uri: String!
  isEquipped: Boolean!
}

type A_EquipmentInStore {
  id: ID!
  slot: String!
  value: Int!
  stat: String!
  cost: Int!
  name: String!
  uri: String!
}

input A_EquipmentInStore_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_EquipmentInStore_filter]
  or: [A_EquipmentInStore_filter]
}

enum A_EquipmentInStore_orderBy {
  id
  slot
  value
  stat
  cost
  name
  uri
}

input A_Equipment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  slot: String
  slot_not: String
  slot_gt: String
  slot_lt: String
  slot_gte: String
  slot_lte: String
  slot_in: [String!]
  slot_not_in: [String!]
  slot_contains: String
  slot_contains_nocase: String
  slot_not_contains: String
  slot_not_contains_nocase: String
  slot_starts_with: String
  slot_starts_with_nocase: String
  slot_not_starts_with: String
  slot_not_starts_with_nocase: String
  slot_ends_with: String
  slot_ends_with_nocase: String
  slot_not_ends_with: String
  slot_not_ends_with_nocase: String
  rank: Int
  rank_not: Int
  rank_gt: Int
  rank_lt: Int
  rank_gte: Int
  rank_lte: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  value: Int
  value_not: Int
  value_gt: Int
  value_lt: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int!]
  value_not_in: [Int!]
  stat: String
  stat_not: String
  stat_gt: String
  stat_lt: String
  stat_gte: String
  stat_lte: String
  stat_in: [String!]
  stat_not_in: [String!]
  stat_contains: String
  stat_contains_nocase: String
  stat_not_contains: String
  stat_not_contains_nocase: String
  stat_starts_with: String
  stat_starts_with_nocase: String
  stat_not_starts_with: String
  stat_not_starts_with_nocase: String
  stat_ends_with: String
  stat_ends_with_nocase: String
  stat_not_ends_with: String
  stat_not_ends_with_nocase: String
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: A_Player_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  isEquipped: Boolean
  isEquipped_not: Boolean
  isEquipped_in: [Boolean!]
  isEquipped_not_in: [Boolean!]
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_Equipment_filter]
  or: [A_Equipment_filter]
}

enum A_Equipment_orderBy {
  id
  slot
  rank
  value
  stat
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  name
  uri
  isEquipped
}

"""
8 bytes signed integer

"""
scalar A_Int8

type A_Listing {
  id: ID!
  price: BigInt!
  seller: String!
  timestamp: BigInt!
  player: A_Player!
}

input A_Listing_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: A_Player_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_Listing_filter]
  or: [A_Listing_filter]
}

enum A_Listing_orderBy {
  id
  price
  seller
  timestamp
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

type A_MagicMonster {
  id: ID!
  xpReward: Int!
  damage: Int!
  hp: Int!
  cooldown: Int!
  cost: Int!
  name: String!
  uri: String!
}

input A_MagicMonster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  xpReward: Int
  xpReward_not: Int
  xpReward_gt: Int
  xpReward_lt: Int
  xpReward_gte: Int
  xpReward_lte: Int
  xpReward_in: [Int!]
  xpReward_not_in: [Int!]
  damage: Int
  damage_not: Int
  damage_gt: Int
  damage_lt: Int
  damage_gte: Int
  damage_lte: Int
  damage_in: [Int!]
  damage_not_in: [Int!]
  hp: Int
  hp_not: Int
  hp_gt: Int
  hp_lt: Int
  hp_gte: Int
  hp_lte: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  cost: Int
  cost_not: Int
  cost_gt: Int
  cost_lt: Int
  cost_gte: Int
  cost_lte: Int
  cost_in: [Int!]
  cost_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_MagicMonster_filter]
  or: [A_MagicMonster_filter]
}

enum A_MagicMonster_orderBy {
  id
  xpReward
  damage
  hp
  cooldown
  cost
  name
  uri
}

type A_Monster {
  id: ID!
  xpReward: Int!
  damage: Int!
  hp: Int!
  cooldown: Int!
  name: String!
  uri: String!
}

input A_Monster_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  xpReward: Int
  xpReward_not: Int
  xpReward_gt: Int
  xpReward_lt: Int
  xpReward_gte: Int
  xpReward_lte: Int
  xpReward_in: [Int!]
  xpReward_not_in: [Int!]
  damage: Int
  damage_not: Int
  damage_gt: Int
  damage_lt: Int
  damage_gte: Int
  damage_lte: Int
  damage_in: [Int!]
  damage_not_in: [Int!]
  hp: Int
  hp_not: Int
  hp_gt: Int
  hp_lt: Int
  hp_gte: Int
  hp_lte: Int
  hp_in: [Int!]
  hp_not_in: [Int!]
  cooldown: Int
  cooldown_not: Int
  cooldown_gt: Int
  cooldown_lt: Int
  cooldown_gte: Int
  cooldown_lte: Int
  cooldown_in: [Int!]
  cooldown_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_Monster_filter]
  or: [A_Monster_filter]
}

enum A_Monster_orderBy {
  id
  xpReward
  damage
  hp
  cooldown
  name
  uri
}

"""Defines the order direction, either ascending or descending"""
enum A_OrderDirection {
  asc
  desc
}

type A_Player {
  id: ID!
  Player_id: BigInt!
  user: A_User!
  name: String!
  classes: String!
  stats: String!
  exp: Int!
  level: Int!
  strength: Int!
  magic: Int!
  agility: Int!
  defense: Int!
  currentHealth: Int!
  maxHealth: Int!
  currentMana: Int!
  maxMana: Int!
  totalWins: Int!
  totalLosses: Int!
  potionBalance(skip: Int = 0, first: Int = 100, orderBy: A_BasicPotionBalance_orderBy, orderDirection: A_OrderDirection, where: A_BasicPotionBalance_filter): [A_BasicPotionBalance!]!
  equipment(skip: Int = 0, first: Int = 100, orderBy: A_Equipment_orderBy, orderDirection: A_OrderDirection, where: A_Equipment_filter): [A_Equipment!]!
  treasureBalance(skip: Int = 0, first: Int = 100, orderBy: A_TreasureBalance_orderBy, orderDirection: A_OrderDirection, where: A_TreasureBalance_filter): [A_TreasureBalance!]!
  arenaResult(skip: Int = 0, first: Int = 100, orderBy: A_ArenaResults_orderBy, orderDirection: A_OrderDirection, where: A_ArenaResults_filter): [A_ArenaResults!]!
}

input A_Player_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  Player_id: BigInt
  Player_id_not: BigInt
  Player_id_gt: BigInt
  Player_id_lt: BigInt
  Player_id_gte: BigInt
  Player_id_lte: BigInt
  Player_id_in: [BigInt!]
  Player_id_not_in: [BigInt!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: A_User_filter
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  classes: String
  classes_not: String
  classes_gt: String
  classes_lt: String
  classes_gte: String
  classes_lte: String
  classes_in: [String!]
  classes_not_in: [String!]
  classes_contains: String
  classes_contains_nocase: String
  classes_not_contains: String
  classes_not_contains_nocase: String
  classes_starts_with: String
  classes_starts_with_nocase: String
  classes_not_starts_with: String
  classes_not_starts_with_nocase: String
  classes_ends_with: String
  classes_ends_with_nocase: String
  classes_not_ends_with: String
  classes_not_ends_with_nocase: String
  stats: String
  stats_not: String
  stats_gt: String
  stats_lt: String
  stats_gte: String
  stats_lte: String
  stats_in: [String!]
  stats_not_in: [String!]
  stats_contains: String
  stats_contains_nocase: String
  stats_not_contains: String
  stats_not_contains_nocase: String
  stats_starts_with: String
  stats_starts_with_nocase: String
  stats_not_starts_with: String
  stats_not_starts_with_nocase: String
  stats_ends_with: String
  stats_ends_with_nocase: String
  stats_not_ends_with: String
  stats_not_ends_with_nocase: String
  exp: Int
  exp_not: Int
  exp_gt: Int
  exp_lt: Int
  exp_gte: Int
  exp_lte: Int
  exp_in: [Int!]
  exp_not_in: [Int!]
  level: Int
  level_not: Int
  level_gt: Int
  level_lt: Int
  level_gte: Int
  level_lte: Int
  level_in: [Int!]
  level_not_in: [Int!]
  strength: Int
  strength_not: Int
  strength_gt: Int
  strength_lt: Int
  strength_gte: Int
  strength_lte: Int
  strength_in: [Int!]
  strength_not_in: [Int!]
  magic: Int
  magic_not: Int
  magic_gt: Int
  magic_lt: Int
  magic_gte: Int
  magic_lte: Int
  magic_in: [Int!]
  magic_not_in: [Int!]
  agility: Int
  agility_not: Int
  agility_gt: Int
  agility_lt: Int
  agility_gte: Int
  agility_lte: Int
  agility_in: [Int!]
  agility_not_in: [Int!]
  defense: Int
  defense_not: Int
  defense_gt: Int
  defense_lt: Int
  defense_gte: Int
  defense_lte: Int
  defense_in: [Int!]
  defense_not_in: [Int!]
  currentHealth: Int
  currentHealth_not: Int
  currentHealth_gt: Int
  currentHealth_lt: Int
  currentHealth_gte: Int
  currentHealth_lte: Int
  currentHealth_in: [Int!]
  currentHealth_not_in: [Int!]
  maxHealth: Int
  maxHealth_not: Int
  maxHealth_gt: Int
  maxHealth_lt: Int
  maxHealth_gte: Int
  maxHealth_lte: Int
  maxHealth_in: [Int!]
  maxHealth_not_in: [Int!]
  currentMana: Int
  currentMana_not: Int
  currentMana_gt: Int
  currentMana_lt: Int
  currentMana_gte: Int
  currentMana_lte: Int
  currentMana_in: [Int!]
  currentMana_not_in: [Int!]
  maxMana: Int
  maxMana_not: Int
  maxMana_gt: Int
  maxMana_lt: Int
  maxMana_gte: Int
  maxMana_lte: Int
  maxMana_in: [Int!]
  maxMana_not_in: [Int!]
  totalWins: Int
  totalWins_not: Int
  totalWins_gt: Int
  totalWins_lt: Int
  totalWins_gte: Int
  totalWins_lte: Int
  totalWins_in: [Int!]
  totalWins_not_in: [Int!]
  totalLosses: Int
  totalLosses_not: Int
  totalLosses_gt: Int
  totalLosses_lt: Int
  totalLosses_gte: Int
  totalLosses_lte: Int
  totalLosses_in: [Int!]
  totalLosses_not_in: [Int!]
  potionBalance_: A_BasicPotionBalance_filter
  equipment_: A_Equipment_filter
  treasureBalance_: A_TreasureBalance_filter
  arenaResult_: A_ArenaResults_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_Player_filter]
  or: [A_Player_filter]
}

enum A_Player_orderBy {
  id
  Player_id
  user
  user__id
  user__gold
  user__gem
  name
  classes
  stats
  exp
  level
  strength
  magic
  agility
  defense
  currentHealth
  maxHealth
  currentMana
  maxMana
  totalWins
  totalLosses
  potionBalance
  equipment
  treasureBalance
  arenaResult
}

type A_Sale {
  id: ID!
  price: BigInt!
  player: A_Player!
  seller: String!
  buyer: String!
  timestamp: BigInt!
  txHash: String!
}

input A_Sale_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: A_Player_filter
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  buyer: String
  buyer_not: String
  buyer_gt: String
  buyer_lt: String
  buyer_gte: String
  buyer_lte: String
  buyer_in: [String!]
  buyer_not_in: [String!]
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  txHash: String
  txHash_not: String
  txHash_gt: String
  txHash_lt: String
  txHash_gte: String
  txHash_lte: String
  txHash_in: [String!]
  txHash_not_in: [String!]
  txHash_contains: String
  txHash_contains_nocase: String
  txHash_not_contains: String
  txHash_not_contains_nocase: String
  txHash_starts_with: String
  txHash_starts_with_nocase: String
  txHash_not_starts_with: String
  txHash_not_starts_with_nocase: String
  txHash_ends_with: String
  txHash_ends_with_nocase: String
  txHash_not_ends_with: String
  txHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_Sale_filter]
  or: [A_Sale_filter]
}

enum A_Sale_orderBy {
  id
  price
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
  seller
  buyer
  timestamp
  txHash
}

type A_Treasure {
  id: ID!
  rank: Int!
  name: String!
  uri: String!
  TreasureBalance(skip: Int = 0, first: Int = 100, orderBy: A_TreasureBalance_orderBy, orderDirection: A_OrderDirection, where: A_TreasureBalance_filter): [A_TreasureBalance!]!
}

type A_TreasureBalance {
  id: ID!
  balance: Int!
  treasure: A_Treasure!
  player: A_Player!
}

input A_TreasureBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: Int
  balance_not: Int
  balance_gt: Int
  balance_lt: Int
  balance_gte: Int
  balance_lte: Int
  balance_in: [Int!]
  balance_not_in: [Int!]
  treasure: String
  treasure_not: String
  treasure_gt: String
  treasure_lt: String
  treasure_gte: String
  treasure_lte: String
  treasure_in: [String!]
  treasure_not_in: [String!]
  treasure_contains: String
  treasure_contains_nocase: String
  treasure_not_contains: String
  treasure_not_contains_nocase: String
  treasure_starts_with: String
  treasure_starts_with_nocase: String
  treasure_not_starts_with: String
  treasure_not_starts_with_nocase: String
  treasure_ends_with: String
  treasure_ends_with_nocase: String
  treasure_not_ends_with: String
  treasure_not_ends_with_nocase: String
  treasure_: A_Treasure_filter
  player: String
  player_not: String
  player_gt: String
  player_lt: String
  player_gte: String
  player_lte: String
  player_in: [String!]
  player_not_in: [String!]
  player_contains: String
  player_contains_nocase: String
  player_not_contains: String
  player_not_contains_nocase: String
  player_starts_with: String
  player_starts_with_nocase: String
  player_not_starts_with: String
  player_not_starts_with_nocase: String
  player_ends_with: String
  player_ends_with_nocase: String
  player_not_ends_with: String
  player_not_ends_with_nocase: String
  player_: A_Player_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_TreasureBalance_filter]
  or: [A_TreasureBalance_filter]
}

enum A_TreasureBalance_orderBy {
  id
  balance
  treasure
  treasure__id
  treasure__rank
  treasure__name
  treasure__uri
  player
  player__id
  player__Player_id
  player__name
  player__classes
  player__stats
  player__exp
  player__level
  player__strength
  player__magic
  player__agility
  player__defense
  player__currentHealth
  player__maxHealth
  player__currentMana
  player__maxMana
  player__totalWins
  player__totalLosses
}

input A_Treasure_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  rank: Int
  rank_not: Int
  rank_gt: Int
  rank_lt: Int
  rank_gte: Int
  rank_lte: Int
  rank_in: [Int!]
  rank_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  uri: String
  uri_not: String
  uri_gt: String
  uri_lt: String
  uri_gte: String
  uri_lte: String
  uri_in: [String!]
  uri_not_in: [String!]
  uri_contains: String
  uri_contains_nocase: String
  uri_not_contains: String
  uri_not_contains_nocase: String
  uri_starts_with: String
  uri_starts_with_nocase: String
  uri_not_starts_with: String
  uri_not_starts_with_nocase: String
  uri_ends_with: String
  uri_ends_with_nocase: String
  uri_not_ends_with: String
  uri_not_ends_with_nocase: String
  TreasureBalance_: A_TreasureBalance_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_Treasure_filter]
  or: [A_Treasure_filter]
}

enum A_Treasure_orderBy {
  id
  rank
  name
  uri
  TreasureBalance
}

type A_User {
  id: ID!
  gold: Int!
  gem: Int!
  players(skip: Int = 0, first: Int = 100, orderBy: A_Player_orderBy, orderDirection: A_OrderDirection, where: A_Player_filter): [A_Player!]!
}

input A_User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  gold: Int
  gold_not: Int
  gold_gt: Int
  gold_lt: Int
  gold_gte: Int
  gold_lte: Int
  gold_in: [Int!]
  gold_not_in: [Int!]
  gem: Int
  gem_not: Int
  gem_gt: Int
  gem_lt: Int
  gem_gte: Int
  gem_lte: Int
  gem_in: [Int!]
  gem_not_in: [Int!]
  players_: A_Player_filter
  """Filter for the block changed event."""
  _change_block: A_BlockChangedFilter
  and: [A_User_filter]
  or: [A_User_filter]
}

enum A_User_orderBy {
  id
  gold
  gem
  players
}

type A__Block_ {
  """The hash of the block"""
  hash: A_Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type A__Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: A__Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}